var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var java;
(function (java) {
    var lang;
    (function (lang) {
        var System = (function () {
            function System() {
            }
            System.gc = function () {
            };
            System.arraycopy = function (src, srcPos, dest, destPos, numElements) {
                for (var i = 0; i < numElements; i++) {
                    dest[destPos + i] = src[srcPos + i];
                }
            };
            return System;
        })();
        lang.System = System;
        var StringBuilder = (function () {
            function StringBuilder() {
                this._buffer = '';
                this.length = 0;
            }
            StringBuilder.prototype.append = function (val) {
                this._buffer = this._buffer + val;
                length = this._buffer.length;
                return this;
            };
            StringBuilder.prototype.toString = function () {
                return this._buffer;
            };
            return StringBuilder;
        })();
        lang.StringBuilder = StringBuilder;
    })(lang = java.lang || (java.lang = {}));
    var util;
    (function (util) {
        var concurrent;
        (function (concurrent) {
            var atomic;
            (function (atomic) {
                var AtomicIntegerArray = (function () {
                    function AtomicIntegerArray(p) {
                        this._internal = p;
                    }
                    AtomicIntegerArray.prototype.set = function (index, newVal) {
                        this._internal[index] = newVal;
                    };
                    AtomicIntegerArray.prototype.get = function (index) {
                        return this._internal[index];
                    };
                    AtomicIntegerArray.prototype.getAndSet = function (index, newVal) {
                        var temp = this._internal[index];
                        this._internal[index] = newVal;
                        return temp;
                    };
                    AtomicIntegerArray.prototype.compareAndSet = function (index, expect, update) {
                        if (this._internal[index] == expect) {
                            this._internal[index] = update;
                            return true;
                        }
                        else {
                            return false;
                        }
                    };
                    return AtomicIntegerArray;
                })();
                atomic.AtomicIntegerArray = AtomicIntegerArray;
                var AtomicReference = (function () {
                    function AtomicReference() {
                        this._internal = null;
                    }
                    AtomicReference.prototype.compareAndSet = function (expect, update) {
                        if (this._internal == expect) {
                            this._internal = update;
                            return true;
                        }
                        else {
                            return false;
                        }
                    };
                    AtomicReference.prototype.get = function () {
                        return this._internal;
                    };
                    AtomicReference.prototype.set = function (newRef) {
                        this._internal = newRef;
                    };
                    AtomicReference.prototype.getAndSet = function (newVal) {
                        var temp = this._internal;
                        this._internal = newVal;
                        return temp;
                    };
                    return AtomicReference;
                })();
                atomic.AtomicReference = AtomicReference;
                var AtomicLong = (function () {
                    function AtomicLong(init) {
                        this._internal = 0;
                        this._internal = init;
                    }
                    AtomicLong.prototype.compareAndSet = function (expect, update) {
                        if (this._internal == expect) {
                            this._internal = update;
                            return true;
                        }
                        else {
                            return false;
                        }
                    };
                    AtomicLong.prototype.get = function () {
                        return this._internal;
                    };
                    AtomicLong.prototype.incrementAndGet = function () {
                        this._internal++;
                        return this._internal;
                    };
                    AtomicLong.prototype.decrementAndGet = function () {
                        this._internal--;
                        return this._internal;
                    };
                    return AtomicLong;
                })();
                atomic.AtomicLong = AtomicLong;
                var AtomicInteger = (function () {
                    function AtomicInteger(init) {
                        this._internal = 0;
                        this._internal = init;
                    }
                    AtomicInteger.prototype.compareAndSet = function (expect, update) {
                        if (this._internal == expect) {
                            this._internal = update;
                            return true;
                        }
                        else {
                            return false;
                        }
                    };
                    AtomicInteger.prototype.get = function () {
                        return this._internal;
                    };
                    AtomicInteger.prototype.set = function (newVal) {
                        this._internal = newVal;
                    };
                    AtomicInteger.prototype.getAndSet = function (newVal) {
                        var temp = this._internal;
                        this._internal = newVal;
                        return temp;
                    };
                    AtomicInteger.prototype.incrementAndGet = function () {
                        this._internal++;
                        return this._internal;
                    };
                    AtomicInteger.prototype.decrementAndGet = function () {
                        this._internal--;
                        return this._internal;
                    };
                    AtomicInteger.prototype.getAndIncrement = function () {
                        var temp = this._internal;
                        this._internal++;
                        return temp;
                    };
                    AtomicInteger.prototype.getAndDecrement = function () {
                        var temp = this._internal;
                        this._internal--;
                        return temp;
                    };
                    return AtomicInteger;
                })();
                atomic.AtomicInteger = AtomicInteger;
            })(atomic = concurrent.atomic || (concurrent.atomic = {}));
        })(concurrent = util.concurrent || (util.concurrent = {}));
        var Random = (function () {
            function Random() {
            }
            Random.prototype.nextInt = function (max) {
                if (typeof max === 'undefined') {
                    max = Math.pow(2, 32);
                }
                return Math.floor(Math.random() * max);
            };
            Random.prototype.nextDouble = function () {
                return Math.random();
            };
            Random.prototype.nextBoolean = function () {
                return Math.random() >= 0.5;
            };
            return Random;
        })();
        util.Random = Random;
        var Arrays = (function () {
            function Arrays() {
            }
            Arrays.fill = function (data, begin, nbElem, param) {
                var max = begin + nbElem;
                for (var i = begin; i < max; i++) {
                    data[i] = param;
                }
            };
            return Arrays;
        })();
        util.Arrays = Arrays;
        var Collections = (function () {
            function Collections() {
            }
            Collections.reverse = function (p) {
                var temp = new List();
                for (var i = 0; i < p.size(); i++) {
                    temp.add(p.get(i));
                }
                p.clear();
                for (var i = temp.size() - 1; i >= 0; i--) {
                    p.add(temp.get(i));
                }
            };
            Collections.sort = function (p) {
                p.sort();
            };
            return Collections;
        })();
        util.Collections = Collections;
        var XArray = (function () {
            function XArray() {
                Array.apply(this, arguments);
                return new Array();
            }
            XArray.prototype.pop = function () {
                return "";
            };
            XArray.prototype.push = function (val) {
                return 0;
            };
            XArray.prototype.splice = function (newS, arrL) {
            };
            XArray.prototype.indexOf = function (val) {
                return 0;
            };
            XArray.prototype.shift = function () {
                return "";
            };
            XArray.prototype.sort = function () {
            };
            return XArray;
        })();
        util.XArray = XArray;
        XArray.prototype = new Array();
        var List = (function (_super) {
            __extends(List, _super);
            function List() {
                _super.apply(this, arguments);
            }
            List.prototype.addAll = function (vals) {
                var tempArray = vals.toArray(null);
                for (var i = 0; i < tempArray.length; i++) {
                    this.push(tempArray[i]);
                }
            };
            List.prototype.clear = function () {
                this.length = 0;
            };
            List.prototype.poll = function () {
                return this.shift();
            };
            List.prototype.remove = function (val) {
            };
            List.prototype.toArray = function (a) {
                return this;
            };
            List.prototype.size = function () {
                return this.length;
            };
            List.prototype.add = function (val) {
                this.push(val);
            };
            List.prototype.get = function (index) {
                return this[index];
            };
            List.prototype.contains = function (val) {
                return this.indexOf(val) != -1;
            };
            List.prototype.isEmpty = function () {
                return this.length == 0;
            };
            return List;
        })(XArray);
        util.List = List;
        var ArrayList = (function (_super) {
            __extends(ArrayList, _super);
            function ArrayList() {
                _super.apply(this, arguments);
            }
            return ArrayList;
        })(List);
        util.ArrayList = ArrayList;
        var LinkedList = (function (_super) {
            __extends(LinkedList, _super);
            function LinkedList() {
                _super.apply(this, arguments);
            }
            return LinkedList;
        })(List);
        util.LinkedList = LinkedList;
        var Stack = (function () {
            function Stack() {
                this.content = new Array();
            }
            Stack.prototype.pop = function () {
                return this.content.pop();
            };
            Stack.prototype.push = function (t) {
                this.content.push(t);
            };
            Stack.prototype.isEmpty = function () {
                return this.content.length == 0;
            };
            Stack.prototype.peek = function () {
                return this.content.slice(-1)[0];
            };
            return Stack;
        })();
        util.Stack = Stack;
        var Map = (function () {
            function Map() {
            }
            Map.prototype.get = function (key) {
                return this[key];
            };
            Map.prototype.put = function (key, value) {
                var previous_val = this[key];
                this[key] = value;
                return previous_val;
            };
            Map.prototype.containsKey = function (key) {
                return this.hasOwnProperty(key);
            };
            Map.prototype.remove = function (key) {
                var tmp = this[key];
                delete this[key];
                return tmp;
            };
            Map.prototype.keySet = function () {
                var result = new HashSet();
                for (var p in this) {
                    if (this.hasOwnProperty(p)) {
                        result.add(p);
                    }
                }
                return result;
            };
            Map.prototype.isEmpty = function () {
                return Object.keys(this).length == 0;
            };
            Map.prototype.values = function () {
                var result = new HashSet();
                for (var p in this) {
                    if (this.hasOwnProperty(p)) {
                        result.add(this[p]);
                    }
                }
                return result;
            };
            Map.prototype.clear = function () {
                for (var p in this) {
                    if (this.hasOwnProperty(p)) {
                        delete this[p];
                    }
                }
            };
            return Map;
        })();
        util.Map = Map;
        var HashMap = (function (_super) {
            __extends(HashMap, _super);
            function HashMap() {
                _super.apply(this, arguments);
            }
            return HashMap;
        })(Map);
        util.HashMap = HashMap;
        var Set = (function () {
            function Set() {
            }
            Set.prototype.add = function (val) {
                this[val] = val;
            };
            Set.prototype.clear = function () {
                for (var p in this) {
                    if (this.hasOwnProperty(p)) {
                        delete this[p];
                    }
                }
            };
            Set.prototype.contains = function (val) {
                return this.hasOwnProperty(val);
            };
            Set.prototype.addAll = function (vals) {
                var tempArray = vals.toArray(null);
                for (var i = 0; i < tempArray.length; i++) {
                    this[tempArray[i]] = tempArray[i];
                }
            };
            Set.prototype.remove = function (val) {
                delete this[val];
            };
            Set.prototype.size = function () {
                return Object.keys(this).length;
            };
            Set.prototype.isEmpty = function () {
                return this.size() == 0;
            };
            Set.prototype.toArray = function (a) {
                for (var ik in this) {
                    a.push(this[ik]);
                }
                return a;
            };
            return Set;
        })();
        util.Set = Set;
        var HashSet = (function (_super) {
            __extends(HashSet, _super);
            function HashSet() {
                _super.apply(this, arguments);
            }
            return HashSet;
        })(Set);
        util.HashSet = HashSet;
    })(util = java.util || (java.util = {}));
})(java || (java = {}));
var org;
(function (org) {
    var kevoree;
    (function (kevoree) {
        var modeling;
        (function (modeling) {
            var KConfig = (function () {
                function KConfig() {
                }
                KConfig.CAS_MAX_TRY = 1000;
                KConfig.CALLBACK_HISTORY = 1000;
                KConfig.LONG_SIZE = 53;
                KConfig.PREFIX_SIZE = 16;
                KConfig.BEGINNING_OF_TIME = -0x001FFFFFFFFFFFFE;
                KConfig.END_OF_TIME = 0x001FFFFFFFFFFFFE;
                KConfig.NULL_LONG = 0x001FFFFFFFFFFFFF;
                KConfig.KEY_PREFIX_MASK = 0x0000001FFFFFFFFF;
                KConfig.KEY_SEP = '|';
                KConfig.ELEM_SEP = ';';
                KConfig.VAL_SEP = ',';
                KConfig.CHUNK_ELEM_SEP = '%';
                KConfig.CHUNK_VAL_SEP = '$';
                KConfig.CACHE_INIT_SIZE = 16;
                KConfig.CACHE_LOAD_FACTOR = (75 / 100);
                return KConfig;
            })();
            modeling.KConfig = KConfig;
            var KContentKey = (function () {
                function KContentKey(p_universeID, p_timeID, p_objID) {
                    this.universe = p_universeID;
                    this.time = p_timeID;
                    this.obj = p_objID;
                }
                KContentKey.toString = function (keys, keyIndex) {
                    var buffer = new java.lang.StringBuilder();
                    var offset = keyIndex * 3;
                    if (keys[offset] != org.kevoree.modeling.KConfig.NULL_LONG) {
                        org.kevoree.modeling.util.Base64.encodeLongToBuffer(keys[offset], buffer);
                    }
                    buffer.append(org.kevoree.modeling.KConfig.KEY_SEP);
                    if (keys[offset + 1] != org.kevoree.modeling.KConfig.NULL_LONG) {
                        org.kevoree.modeling.util.Base64.encodeLongToBuffer(keys[offset + 1], buffer);
                    }
                    buffer.append(org.kevoree.modeling.KConfig.KEY_SEP);
                    if (keys[offset + 2] != org.kevoree.modeling.KConfig.NULL_LONG) {
                        org.kevoree.modeling.util.Base64.encodeLongToBuffer(keys[offset + 2], buffer);
                    }
                    return buffer.toString();
                };
                KContentKey.createObject = function (p_universeID, p_quantaID, p_objectID) {
                    return new org.kevoree.modeling.KContentKey(p_universeID, p_quantaID, p_objectID);
                };
                KContentKey.createGlobalUniverseTree = function () {
                    return new org.kevoree.modeling.KContentKey(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG);
                };
                KContentKey.createRootUniverseTree = function () {
                    return new org.kevoree.modeling.KContentKey(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.END_OF_TIME);
                };
                KContentKey.createLastPrefix = function () {
                    return new org.kevoree.modeling.KContentKey(org.kevoree.modeling.KConfig.END_OF_TIME, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG);
                };
                KContentKey.create = function (payload) {
                    if (payload == null || payload.length == 0) {
                        return null;
                    }
                    else {
                        var key = new org.kevoree.modeling.KContentKey(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG);
                        var maxRead = payload.length;
                        var indexStartElem = -1;
                        var indexElem = 0;
                        var partIndex = 0;
                        for (var i = 0; i < maxRead; i++) {
                            if (payload.charAt(i) == org.kevoree.modeling.KConfig.KEY_SEP) {
                                if (indexStartElem != -1) {
                                    try {
                                        switch (partIndex) {
                                            case 0:
                                                key.universe = org.kevoree.modeling.util.Base64.decodeToLongWithBounds(payload, indexStartElem, i);
                                                break;
                                            case 1:
                                                key.time = org.kevoree.modeling.util.Base64.decodeToLongWithBounds(payload, indexStartElem, i);
                                                break;
                                            case 2:
                                                key.obj = org.kevoree.modeling.util.Base64.decodeToLongWithBounds(payload, indexStartElem, i);
                                                break;
                                            default:
                                                break;
                                        }
                                    }
                                    catch ($ex$) {
                                        if ($ex$ instanceof Error) {
                                            var e = $ex$;
                                            console.error(e['stack']);
                                            ;
                                        }
                                        else {
                                            throw $ex$;
                                        }
                                    }
                                }
                                indexStartElem = -1;
                                indexElem = indexElem + 1;
                                partIndex++;
                            }
                            else {
                                if (indexStartElem == -1) {
                                    indexStartElem = i;
                                }
                            }
                        }
                        if (indexStartElem != -1) {
                            try {
                                switch (partIndex) {
                                    case 0:
                                        key.universe = org.kevoree.modeling.util.Base64.decodeToLongWithBounds(payload, indexStartElem, maxRead);
                                        break;
                                    case 1:
                                        key.time = org.kevoree.modeling.util.Base64.decodeToLongWithBounds(payload, indexStartElem, maxRead);
                                        break;
                                    case 2:
                                        key.obj = org.kevoree.modeling.util.Base64.decodeToLongWithBounds(payload, indexStartElem, maxRead);
                                        break;
                                    default:
                                        break;
                                }
                            }
                            catch ($ex$) {
                                if ($ex$ instanceof Error) {
                                    var e = $ex$;
                                    console.error(e['stack']);
                                    ;
                                }
                                else {
                                    throw $ex$;
                                }
                            }
                        }
                        return key;
                    }
                };
                KContentKey.prototype.equals = function (param) {
                    if (param instanceof org.kevoree.modeling.KContentKey) {
                        var remote = param;
                        return remote.universe == this.universe && remote.time == this.time && remote.obj == this.obj;
                    }
                    else {
                        return false;
                    }
                };
                KContentKey.NULL_KEY = new Float64Array([org.kevoree.modeling.KConfig.END_OF_TIME, org.kevoree.modeling.KConfig.END_OF_TIME, org.kevoree.modeling.KConfig.END_OF_TIME]);
                KContentKey.GLOBAL_UNIVERSE_KEY = new Float64Array([org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG]);
                return KContentKey;
            })();
            modeling.KContentKey = KContentKey;
            var abs;
            (function (abs) {
                var AbstractDataType = (function () {
                    function AbstractDataType(p_name, p_id) {
                        this._name = p_name;
                        this._id = p_id;
                    }
                    AbstractDataType.prototype.name = function () {
                        return this._name;
                    };
                    AbstractDataType.prototype.id = function () {
                        return this._id;
                    };
                    return AbstractDataType;
                })();
                abs.AbstractDataType = AbstractDataType;
                var AbstractKModel = (function () {
                    function AbstractKModel(p_manager) {
                        this._manager = p_manager;
                        this._manager.setModel(this);
                        this._key = this._manager.nextModelKey();
                    }
                    AbstractKModel.prototype.metaModel = function () {
                        throw "Abstract method";
                    };
                    AbstractKModel.prototype.connect = function (cb) {
                        this._manager.connect(cb);
                    };
                    AbstractKModel.prototype.disconnect = function (cb) {
                        this._manager.close(cb);
                    };
                    AbstractKModel.prototype.manager = function () {
                        return this._manager;
                    };
                    AbstractKModel.prototype.newUniverse = function () {
                        var nextKey = this._manager.nextUniverseKey();
                        var newDimension = this.internalCreateUniverse(nextKey);
                        this._manager.initUniverse(nextKey, nextKey);
                        return newDimension;
                    };
                    AbstractKModel.prototype.internalCreateUniverse = function (universe) {
                        throw "Abstract method";
                    };
                    AbstractKModel.prototype.internalCreateObject = function (universe, time, uuid, clazz, previousUniverse, previousTime) {
                        throw "Abstract method";
                    };
                    AbstractKModel.prototype.createProxy = function (universe, time, uuid, clazz, previousUniverse, previousTime) {
                        return this.internalCreateObject(universe, time, uuid, clazz, previousUniverse, previousTime);
                    };
                    AbstractKModel.prototype.universe = function (key) {
                        var newDimension = this.internalCreateUniverse(key);
                        this._manager.initUniverse(key, key);
                        return newDimension;
                    };
                    AbstractKModel.prototype.save = function (callback) {
                        this._manager.save(callback);
                    };
                    AbstractKModel.prototype.setOperation = function (metaOperation, operation) {
                        this._manager.operationManager().register(metaOperation, operation);
                    };
                    AbstractKModel.prototype.setOperationByName = function (metaClassName, metaOperationName, operation) {
                        var tempMC = this._manager.model().metaModel().metaClassByName(metaClassName);
                        if (tempMC != null) {
                            var tempMO = tempMC.operation(metaOperationName);
                            if (tempMO != null) {
                                this._manager.operationManager().register(tempMO, operation);
                            }
                            else {
                                throw new Error("MetaOperation not found with name " + metaOperationName + " on MetaClass " + metaClassName);
                            }
                        }
                        else {
                            throw new Error("MetaClass not found with name " + metaClassName);
                        }
                    };
                    AbstractKModel.prototype.defer = function () {
                        return new org.kevoree.modeling.defer.impl.Defer();
                    };
                    AbstractKModel.prototype.key = function () {
                        return this._key;
                    };
                    AbstractKModel.prototype.create = function (clazz, universe, time) {
                        if (!org.kevoree.modeling.util.Checker.isDefined(clazz)) {
                            return null;
                        }
                        var newObj = this.internalCreateObject(universe, time, this._manager.nextObjectKey(), clazz, universe, time);
                        if (newObj != null) {
                            this._manager.initKObject(newObj);
                        }
                        return newObj;
                    };
                    AbstractKModel.prototype.createByName = function (metaClassName, universe, time) {
                        return this.create(this._manager.model().metaModel().metaClassByName(metaClassName), universe, time);
                    };
                    AbstractKModel.prototype.lookup = function (p_universe, p_time, p_uuid, callback) {
                        this._manager.lookup(p_universe, p_time, p_uuid, callback);
                    };
                    AbstractKModel.prototype.lookupAllObjects = function (p_universe, p_time, p_uuids, callback) {
                        this._manager.lookupAllObjects(p_universe, p_time, p_uuids, callback);
                    };
                    AbstractKModel.prototype.lookupAllTimes = function (p_universe, p_times, p_uuids, callback) {
                        this._manager.lookupAllTimes(p_universe, p_times, p_uuids, callback);
                    };
                    AbstractKModel.prototype.createPreparedLookup = function (p_size) {
                        return this._manager.createPreparedLookup(p_size);
                    };
                    AbstractKModel.prototype.lookupPrepared = function (p_prepared, p_callback) {
                        this._manager.lookupPrepared(p_prepared, p_callback);
                    };
                    AbstractKModel.prototype.createListener = function (universe) {
                        return this._manager.createListener(universe);
                    };
                    AbstractKModel.prototype.createModelContext = function () {
                        return new org.kevoree.modeling.abs.AbstractKModelContext(this);
                    };
                    AbstractKModel.prototype.createTraversal = function (startingElements) {
                        return new org.kevoree.modeling.traversal.impl.Traversal(startingElements);
                    };
                    AbstractKModel.prototype.createReusableTraversal = function () {
                        return new org.kevoree.modeling.traversal.impl.Traversal(null);
                    };
                    return AbstractKModel;
                })();
                abs.AbstractKModel = AbstractKModel;
                var AbstractKModelContext = (function () {
                    function AbstractKModelContext(p_origin) {
                        this._origin = p_origin;
                        this._bounds = new java.util.concurrent.atomic.AtomicReference();
                        this._callbacks = new java.util.concurrent.atomic.AtomicReference();
                    }
                    AbstractKModelContext.prototype.set = function (p_originTime, p_maxTime, p_originUniverse, p_maxUniverse) {
                        var newBounds = new Float64Array([p_originTime, p_maxTime, p_originUniverse, p_maxUniverse]);
                        this._bounds.set(newBounds);
                        var currentStateListeners = this._callbacks.get();
                        if (currentStateListeners != null) {
                            for (var i = 0; i < currentStateListeners.length; i++) {
                                if (currentStateListeners[i] != null) {
                                    currentStateListeners[i](newBounds);
                                }
                            }
                        }
                    };
                    AbstractKModelContext.prototype.originTime = function () {
                        return this._bounds.get()[AbstractKModelContext.ORIGIN_TIME];
                    };
                    AbstractKModelContext.prototype.originUniverse = function () {
                        return this._bounds.get()[AbstractKModelContext.ORIGIN_UNIVERSE];
                    };
                    AbstractKModelContext.prototype.maxTime = function () {
                        return this._bounds.get()[AbstractKModelContext.MAX_TIME];
                    };
                    AbstractKModelContext.prototype.maxUniverse = function () {
                        return this._bounds.get()[AbstractKModelContext.MAX_UNIVERSE];
                    };
                    AbstractKModelContext.prototype.listen = function (new_callback) {
                        var previous;
                        var next;
                        do {
                            previous = this._callbacks.get();
                            var previousSize = 0;
                            if (previous != null) {
                                previousSize = previous.length;
                            }
                            next = new Array();
                            if (previous != null && previousSize > 0) {
                                java.lang.System.arraycopy(previous, 0, next, 0, previousSize);
                            }
                            next[previousSize] = new_callback;
                        } while (!this._callbacks.compareAndSet(previous, next));
                    };
                    AbstractKModelContext.prototype.model = function () {
                        return this._origin;
                    };
                    AbstractKModelContext.ORIGIN_TIME = 0;
                    AbstractKModelContext.MAX_TIME = 1;
                    AbstractKModelContext.ORIGIN_UNIVERSE = 2;
                    AbstractKModelContext.MAX_UNIVERSE = 3;
                    AbstractKModelContext.NB_ELEM = 4;
                    return AbstractKModelContext;
                })();
                abs.AbstractKModelContext = AbstractKModelContext;
                var AbstractKObject = (function () {
                    function AbstractKObject(p_universe, p_time, p_uuid, p_metaClass, p_manager, p_actualUniverse, p_actualTime) {
                        this._universe = p_universe;
                        this._time = p_time;
                        this._uuid = p_uuid;
                        this._metaClass = p_metaClass;
                        this._manager = p_manager;
                        this._previousResolveds = new java.util.concurrent.atomic.AtomicReference();
                        var initResolved = new Float64Array([p_actualUniverse, p_actualTime]);
                        this._previousResolveds.set(initResolved);
                    }
                    AbstractKObject.prototype.previousResolved = function () {
                        return this._previousResolveds;
                    };
                    AbstractKObject.prototype.timeDephasing = function () {
                        return this._time - this._previousResolveds.get()[AbstractKObject.TIME_PREVIOUS_INDEX];
                    };
                    AbstractKObject.prototype.uuid = function () {
                        return this._uuid;
                    };
                    AbstractKObject.prototype.metaClass = function () {
                        return this._metaClass;
                    };
                    AbstractKObject.prototype.now = function () {
                        return this._time;
                    };
                    AbstractKObject.prototype.universe = function () {
                        return this._universe;
                    };
                    AbstractKObject.prototype.detach = function (callback) {
                        var selfPointer = this;
                        var rawPayload = this._manager.preciseChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                        if (rawPayload == null) {
                            if (callback != null) {
                                callback(new Error(AbstractKObject.OUT_OF_CACHE_MSG));
                            }
                        }
                        else {
                            var collector = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                            var metaElements = this._metaClass.metaElements();
                            for (var i = 0; i < metaElements.length; i++) {
                                if (metaElements[i] != null && metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.RELATION) {
                                    var inboundsKeys = rawPayload.getLongArray(metaElements[i].index(), this._metaClass);
                                    for (var j = 0; j < inboundsKeys.length; j++) {
                                        collector.put(inboundsKeys[j], inboundsKeys[j]);
                                    }
                                    rawPayload.clearLongArray(metaElements[i].index(), this._metaClass);
                                }
                            }
                            var flatCollected = new Float64Array(collector.size());
                            var indexI = new Int32Array(1);
                            indexI[0] = 0;
                            collector.each(function (key, value) {
                                flatCollected[indexI[0]] = value;
                                indexI[0]++;
                            });
                            this._manager.lookupAllObjects(this._universe, this._time, flatCollected, function (resolved) {
                                for (var i = 0; i < resolved.length; i++) {
                                    if (resolved[i] != null) {
                                        var linkedReferences = resolved[i].referencesWith(selfPointer);
                                        for (var j = 0; j < linkedReferences.length; j++) {
                                            resolved[i].internal_remove(linkedReferences[j], selfPointer, false);
                                        }
                                    }
                                }
                                if (callback != null) {
                                    callback(null);
                                }
                            });
                        }
                    };
                    AbstractKObject.prototype.select = function (query, cb) {
                        if (!org.kevoree.modeling.util.Checker.isDefined(query)) {
                            cb(new Array());
                        }
                        else {
                            var singleRoot = new Array();
                            singleRoot[0] = this;
                            org.kevoree.modeling.traversal.query.impl.QueryEngine.getINSTANCE().eval(query, singleRoot, cb);
                        }
                    };
                    AbstractKObject.prototype.get = function (p_attribute) {
                        var transposed = this.internal_transpose_att(p_attribute);
                        if (transposed == null) {
                            throw new Error("Bad KMF usage, the attribute named " + p_attribute.metaName() + " is not part of " + this.metaClass().metaName());
                        }
                        else {
                            return transposed.strategy().extrapolate(this, transposed, this._manager);
                        }
                    };
                    AbstractKObject.prototype.getByName = function (attributeName) {
                        var transposed = this._metaClass.attribute(attributeName);
                        if (transposed != null) {
                            return transposed.strategy().extrapolate(this, transposed, this._manager);
                        }
                        else {
                            return null;
                        }
                    };
                    AbstractKObject.prototype.set = function (p_attribute, payload) {
                        var transposed = this.internal_transpose_att(p_attribute);
                        if (transposed == null) {
                            throw new Error("Bad KMF usage, the attribute named " + p_attribute.metaName() + " is not part of " + this.metaClass().metaName());
                        }
                        else {
                            transposed.strategy().mutate(this, transposed, payload, this._manager);
                        }
                    };
                    AbstractKObject.prototype.setByName = function (attributeName, payload) {
                        var transposed = this._metaClass.attribute(attributeName);
                        if (transposed != null) {
                            transposed.strategy().mutate(this, transposed, payload, this._manager);
                        }
                    };
                    AbstractKObject.prototype.addByName = function (relationName, objToAdd) {
                        var metaReference = this._metaClass.reference(relationName);
                        if (metaReference == null) {
                            throw new Error("Bad KMF usage, the reference named " + relationName + " is not part of " + this.metaClass().metaName());
                        }
                        this.internal_add(metaReference, objToAdd, true);
                    };
                    AbstractKObject.prototype.add = function (p_metaReference, objToAdd) {
                        var metaReference = this.internal_transpose_ref(p_metaReference);
                        if (metaReference == null) {
                            throw new Error("Bad KMF usage, the reference named " + p_metaReference.metaName() + " is not part of " + this.metaClass().metaName());
                        }
                        this.internal_add(metaReference, objToAdd, true);
                    };
                    AbstractKObject.prototype.internal_add = function (p_metaReference, p_param, p_setOpposite) {
                        if (p_param == null) {
                            throw new Error("Bad KMF usage, the objToAdd param should not be null in the add method of reference named " + p_metaReference.metaName() + " part of " + this.metaClass().metaName());
                        }
                        var raw = this._manager.preciseChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                        if (raw != null) {
                            if (p_metaReference.maxBound() < 0 || (p_metaReference.maxBound() <= raw.getLongArraySize(p_metaReference.index(), this._metaClass) + 1)) {
                                if (raw.addLongToArray(p_metaReference.index(), p_param.uuid(), this._metaClass)) {
                                    if (p_setOpposite) {
                                        p_param.internal_add(p_param.metaClass().reference(p_metaReference.oppositeName()), this, false);
                                    }
                                }
                            }
                            else {
                                throw new Error("MaxBound constraint violated on relation " + p_metaReference.metaName() + " from metaClass " + this._metaClass.metaName());
                            }
                        }
                    };
                    AbstractKObject.prototype.removeByName = function (relationName, objToAdd) {
                        var metaReference = this._metaClass.reference(relationName);
                        if (metaReference == null) {
                            throw new Error("Bad KMF usage, the reference named " + relationName + " is not part of " + this.metaClass().metaName());
                        }
                        this.internal_remove(metaReference, objToAdd, true);
                    };
                    AbstractKObject.prototype.remove = function (p_metaReference, objToRemove) {
                        var metaReference = this.internal_transpose_ref(p_metaReference);
                        if (metaReference == null) {
                            throw new Error("Bad KMF usage, the reference named " + p_metaReference.metaName() + " is not part of " + this.metaClass().metaName());
                        }
                        this.internal_remove(metaReference, objToRemove, true);
                    };
                    AbstractKObject.prototype.internal_remove = function (p_metaReference, objToRemove, p_setOpposite) {
                        var payload = this._manager.preciseChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                        if (payload != null) {
                            if (payload.removeLongToArray(p_metaReference.index(), objToRemove.uuid(), this._metaClass)) {
                                if (p_setOpposite) {
                                    objToRemove.internal_remove(objToRemove.metaClass().reference(p_metaReference.oppositeName()), this, false);
                                }
                            }
                        }
                    };
                    AbstractKObject.prototype.addAllByName = function (p_metaRelationName, objsToAdd) {
                        var metaReference = this._metaClass.reference(p_metaRelationName);
                        if (metaReference == null) {
                            throw new Error("Bad KMF usage, the reference named " + p_metaRelationName + " is not part of " + this.metaClass().metaName());
                        }
                        for (var i = 0; i < objsToAdd.length; i++) {
                            this.internal_add(metaReference, objsToAdd[i], true);
                        }
                    };
                    AbstractKObject.prototype.addAll = function (p_metaRelation, objsToAdd) {
                        var transposedRelation = this.internal_transpose_ref(p_metaRelation);
                        if (transposedRelation == null) {
                            throw new Error("Bad KMF usage, the reference named " + p_metaRelation.metaName() + " is not part of " + this.metaClass().metaName());
                        }
                        for (var i = 0; i < objsToAdd.length; i++) {
                            this.internal_add(transposedRelation, objsToAdd[i], true);
                        }
                    };
                    AbstractKObject.prototype.removeAllByName = function (p_metaRelationName, callback) {
                        var metaReference = this._metaClass.reference(p_metaRelationName);
                        if (metaReference == null) {
                            throw new Error("Bad KMF usage, the reference named " + p_metaRelationName + " is not part of " + this.metaClass().metaName());
                        }
                        this.internal_removeAll(metaReference, callback);
                    };
                    AbstractKObject.prototype.removeAll = function (p_metaRelation, callback) {
                        var transposedRelation = this.internal_transpose_ref(p_metaRelation);
                        if (transposedRelation == null) {
                            throw new Error("Bad KMF usage, the reference named " + p_metaRelation.metaName() + " is not part of " + this.metaClass().metaName());
                        }
                        this.internal_removeAll(transposedRelation, callback);
                    };
                    AbstractKObject.prototype.internal_removeAll = function (p_metaRelation, callback) {
                        var _this = this;
                        var selfPointer = this;
                        var currentChunk = this._manager.preciseChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                        this._manager.lookupAllObjects(this._universe, this._time, currentChunk.getLongArray(p_metaRelation.index(), this._metaClass), function (previousObjs) {
                            for (var i = 0; i < previousObjs.length; i++) {
                                if (previousObjs[i] != null) {
                                    var oppositeRelation = previousObjs[i].metaClass().reference(p_metaRelation.oppositeName());
                                    previousObjs[i].internal_remove(oppositeRelation, selfPointer, false);
                                }
                            }
                            currentChunk.clearLongArray(p_metaRelation.index(), _this._metaClass);
                            if (callback != null) {
                                callback(null);
                            }
                        });
                    };
                    AbstractKObject.prototype.size = function (p_metaReference) {
                        var transposed = this.internal_transpose_ref(p_metaReference);
                        if (transposed == null) {
                            throw new Error("Bad KMF usage, the attribute named " + p_metaReference.metaName() + " is not part of " + this.metaClass().metaName());
                        }
                        else {
                            var raw = this._manager.closestChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                            if (raw != null) {
                                var ref = raw.getPrimitiveType(transposed.index(), this._metaClass);
                                if (ref == null) {
                                    return 0;
                                }
                                else {
                                    try {
                                        var castedRefArray = ref;
                                        return castedRefArray.length;
                                    }
                                    catch ($ex$) {
                                        if ($ex$ instanceof Error) {
                                            var e = $ex$;
                                            console.error(e['stack']);
                                            ;
                                            return 0;
                                        }
                                        else {
                                            throw $ex$;
                                        }
                                    }
                                }
                            }
                            else {
                                return 0;
                            }
                        }
                    };
                    AbstractKObject.prototype.getRelationByName = function (p_metaRelationName, cb) {
                        var transposed = this.internal_transpose_ref(this._metaClass.reference(p_metaRelationName));
                        if (transposed == null) {
                            throw new Error("Bad KMF usage, the reference named " + p_metaRelationName + " is not part of " + this.metaClass().metaName());
                        }
                        else {
                            this.internal_getRelation(transposed, cb);
                        }
                    };
                    AbstractKObject.prototype.getRelation = function (p_metaReference, cb) {
                        var transposed = this.internal_transpose_ref(p_metaReference);
                        if (transposed == null) {
                            throw new Error("Bad KMF usage, the reference named " + p_metaReference.metaName() + " is not part of " + this.metaClass().metaName());
                        }
                        else {
                            this.internal_getRelation(transposed, cb);
                        }
                    };
                    AbstractKObject.prototype.internal_getRelation = function (p_transposedRelation, cb) {
                        var raw = this._manager.closestChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                        if (raw == null) {
                            cb(new Array());
                        }
                        else {
                            var o = raw.getLongArray(p_transposedRelation.index(), this._metaClass);
                            if (o == null) {
                                cb(new Array());
                            }
                            else {
                                this._manager.lookupAllObjects(this._universe, this._time, o, cb);
                            }
                        }
                    };
                    AbstractKObject.prototype.getRelationValuesByName = function (p_refName) {
                        var transposed = this.internal_transpose_ref(this.metaClass().reference(p_refName));
                        if (transposed == null) {
                            throw new Error("Bad KMF usage, the reference named " + p_refName + " is not part of " + this.metaClass().metaName());
                        }
                        else {
                            return this.internal_getRefValues(transposed);
                        }
                    };
                    AbstractKObject.prototype.getRelationValues = function (metaRelation) {
                        var transposed = this.internal_transpose_ref(metaRelation);
                        if (transposed == null) {
                            throw new Error("Bad KMF usage, the reference named " + metaRelation + " is not part of " + this.metaClass().metaName());
                        }
                        else {
                            return this.internal_getRefValues(transposed);
                        }
                    };
                    AbstractKObject.prototype.internal_getRefValues = function (transposedReference) {
                        var raw = this._manager.closestChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                        if (raw == null) {
                            return new Float64Array(0);
                        }
                        else {
                            var o = raw.getLongArray(transposedReference.index(), this._metaClass);
                            if (o == null) {
                                return new Float64Array(0);
                            }
                            else {
                                return o;
                            }
                        }
                    };
                    AbstractKObject.prototype.visitAttributes = function (visitor) {
                        if (!org.kevoree.modeling.util.Checker.isDefined(visitor)) {
                            return;
                        }
                        var metaElements = this.metaClass().metaElements();
                        for (var i = 0; i < metaElements.length; i++) {
                            if (metaElements[i] != null && metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.ATTRIBUTE) {
                                var metaAttribute = metaElements[i];
                                visitor(metaAttribute, this.get(metaAttribute));
                            }
                        }
                    };
                    AbstractKObject.prototype.visit = function (p_visitor, cb) {
                        this.internal_visit(p_visitor, cb, new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null), new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null));
                    };
                    AbstractKObject.prototype.internal_visit = function (visitor, end, visited, traversed) {
                        if (!org.kevoree.modeling.util.Checker.isDefined(visitor)) {
                            return;
                        }
                        if (traversed != null) {
                            traversed.put(this._uuid, this._uuid);
                        }
                        var toResolveIds = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                        var metaElements = this.metaClass().metaElements();
                        for (var i = 0; i < metaElements.length; i++) {
                            if (metaElements[i] != null && metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.RELATION) {
                                var reference = metaElements[i];
                                var raw = this._manager.closestChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                                if (raw != null) {
                                    var idArr = raw.getLongArray(reference.index(), this._metaClass);
                                    if (idArr != null) {
                                        try {
                                            for (var k = 0; k < idArr.length; k++) {
                                                if (traversed == null || !traversed.contains(idArr[k])) {
                                                    toResolveIds.put(idArr[k], idArr[k]);
                                                }
                                            }
                                        }
                                        catch ($ex$) {
                                            if ($ex$ instanceof Error) {
                                                var e = $ex$;
                                                console.error(e['stack']);
                                                ;
                                            }
                                            else {
                                                throw $ex$;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (toResolveIds.size() == 0) {
                            if (org.kevoree.modeling.util.Checker.isDefined(end)) {
                                end(null);
                            }
                        }
                        else {
                            var trimmed = new Float64Array(toResolveIds.size());
                            var inserted = new Int32Array([0]);
                            toResolveIds.each(function (key, value) {
                                trimmed[inserted[0]] = value;
                                inserted[0]++;
                            });
                            this._manager.lookupAllObjects(this._universe, this._time, trimmed, function (resolvedArr) {
                                var nextDeep = new java.util.ArrayList();
                                for (var i = 0; i < resolvedArr.length; i++) {
                                    var resolved = resolvedArr[i];
                                    var result = org.kevoree.modeling.traversal.visitor.KVisitResult.CONTINUE;
                                    if (resolved != null) {
                                        if (visitor != null && (visited == null || !visited.contains(resolved.uuid()))) {
                                            result = visitor(resolved);
                                        }
                                        if (visited != null) {
                                            visited.put(resolved.uuid(), resolved.uuid());
                                        }
                                    }
                                    if (result != null && result.equals(org.kevoree.modeling.traversal.visitor.KVisitResult.STOP)) {
                                        if (org.kevoree.modeling.util.Checker.isDefined(end)) {
                                            end(null);
                                        }
                                    }
                                    else {
                                        if (!org.kevoree.modeling.util.Checker.isDefined(result)) {
                                            result = org.kevoree.modeling.traversal.visitor.KVisitResult.STOP;
                                        }
                                        if (resolved != null && result.equals(org.kevoree.modeling.traversal.visitor.KVisitResult.CONTINUE)) {
                                            if (traversed == null || !traversed.contains(resolved.uuid())) {
                                                nextDeep.add(resolved);
                                            }
                                        }
                                    }
                                }
                                if (!nextDeep.isEmpty()) {
                                    var index = new Int32Array(1);
                                    index[0] = 0;
                                    var next = new java.util.ArrayList();
                                    next.add(function (throwable) {
                                        index[0] = index[0] + 1;
                                        if (index[0] == nextDeep.size()) {
                                            if (org.kevoree.modeling.util.Checker.isDefined(end)) {
                                                end(null);
                                            }
                                        }
                                        else {
                                            var abstractKObject = nextDeep.get(index[0]);
                                            abstractKObject.internal_visit(visitor, next.get(0), visited, traversed);
                                        }
                                    });
                                    var abstractKObject = nextDeep.get(index[0]);
                                    abstractKObject.internal_visit(visitor, next.get(0), visited, traversed);
                                }
                                else {
                                    if (org.kevoree.modeling.util.Checker.isDefined(end)) {
                                        end(null);
                                    }
                                }
                            });
                        }
                    };
                    AbstractKObject.prototype.toJSON = function () {
                        var builder = new java.lang.StringBuilder();
                        builder.append("{\"universe\":");
                        builder.append(this._universe);
                        builder.append(",\"time\":");
                        builder.append(this._time);
                        builder.append(",\"uuid\":");
                        builder.append(this._uuid);
                        var raw = this._manager.closestChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                        if (raw != null) {
                            builder.append(",\"data\":");
                            builder.append(raw.toJSON(this._manager.model().metaModel()));
                        }
                        builder.append("}");
                        return builder.toString();
                    };
                    AbstractKObject.prototype.toString = function () {
                        return this.toJSON();
                    };
                    AbstractKObject.prototype.equals = function (obj) {
                        if (!(obj instanceof org.kevoree.modeling.abs.AbstractKObject)) {
                            return false;
                        }
                        else {
                            var casted = obj;
                            return casted._uuid == this._uuid && casted._time == this._time && casted._universe == this._universe;
                        }
                    };
                    AbstractKObject.prototype.hashCode = function () {
                        return (this._universe ^ this._time ^ this._uuid);
                    };
                    AbstractKObject.prototype.jump = function (p_time, p_callback) {
                        this._manager.lookup(this._universe, p_time, this._uuid, p_callback);
                    };
                    AbstractKObject.prototype.internal_transpose_ref = function (p) {
                        if (!org.kevoree.modeling.util.Checker.isDefined(p)) {
                            return null;
                        }
                        else {
                            return this._metaClass.metaByName(p.metaName());
                        }
                    };
                    AbstractKObject.prototype.internal_transpose_att = function (p) {
                        if (!org.kevoree.modeling.util.Checker.isDefined(p)) {
                            return null;
                        }
                        else {
                            return this._metaClass.metaByName(p.metaName());
                        }
                    };
                    AbstractKObject.prototype.internal_transpose_op = function (p) {
                        if (!org.kevoree.modeling.util.Checker.isDefined(p)) {
                            return null;
                        }
                        else {
                            return this._metaClass.metaByName(p.metaName());
                        }
                    };
                    AbstractKObject.prototype.traversal = function () {
                        var singleRoot = new Array();
                        singleRoot[0] = this;
                        return new org.kevoree.modeling.traversal.impl.Traversal(singleRoot);
                    };
                    AbstractKObject.prototype.referencesWith = function (o) {
                        if (org.kevoree.modeling.util.Checker.isDefined(o)) {
                            var raw = this._manager.closestChunk(this._universe, this._time, this._uuid, this._metaClass, this._previousResolveds);
                            if (raw != null) {
                                var metaElements = this.metaClass().metaElements();
                                var selected = new java.util.ArrayList();
                                for (var i = 0; i < metaElements.length; i++) {
                                    if (metaElements[i] != null && metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.RELATION) {
                                        var rawI = raw.getLongArray((metaElements[i].index()), this._metaClass);
                                        if (rawI != null) {
                                            var oUUID = o.uuid();
                                            for (var h = 0; h < rawI.length; h++) {
                                                if (rawI[h] == oUUID) {
                                                    selected.add(metaElements[i]);
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                                return selected.toArray(new Array());
                            }
                            else {
                                return new Array();
                            }
                        }
                        else {
                            return new Array();
                        }
                    };
                    AbstractKObject.prototype.invokeOperation = function (p_operation, p_params, strategy, cb) {
                        this._manager.operationManager().invoke(this, p_operation, p_params, strategy, cb);
                    };
                    AbstractKObject.prototype.invokeOperationByName = function (operationName, p_params, strategy, cb) {
                        var metaOp = this._metaClass.operation(operationName);
                        if (metaOp == null) {
                            throw new Error("Operation not founded with name " + operationName + " in the metaClass " + this._metaClass.metaName());
                        }
                        this._manager.operationManager().invoke(this, metaOp, p_params, strategy, cb);
                    };
                    AbstractKObject.prototype.manager = function () {
                        return this._manager;
                    };
                    AbstractKObject.prototype.internal_times = function (start, end, cb) {
                        this._manager.resolveTimes(this._universe, this._uuid, start, end, cb);
                    };
                    AbstractKObject.prototype.allTimes = function (cb) {
                        this.internal_times(org.kevoree.modeling.KConfig.BEGINNING_OF_TIME, org.kevoree.modeling.KConfig.END_OF_TIME, cb);
                    };
                    AbstractKObject.prototype.timesBefore = function (endOfSearch, cb) {
                        this.internal_times(org.kevoree.modeling.KConfig.BEGINNING_OF_TIME, endOfSearch, cb);
                    };
                    AbstractKObject.prototype.timesAfter = function (beginningOfSearch, cb) {
                        this.internal_times(beginningOfSearch, org.kevoree.modeling.KConfig.END_OF_TIME, cb);
                    };
                    AbstractKObject.prototype.timesBetween = function (beginningOfSearch, endOfSearch, cb) {
                        this.internal_times(beginningOfSearch, endOfSearch, cb);
                    };
                    AbstractKObject.OUT_OF_CACHE_MSG = "Out of cache Error";
                    AbstractKObject.UNIVERSE_PREVIOUS_INDEX = 0;
                    AbstractKObject.TIME_PREVIOUS_INDEX = 1;
                    return AbstractKObject;
                })();
                abs.AbstractKObject = AbstractKObject;
                var AbstractKObjectInfer = (function (_super) {
                    __extends(AbstractKObjectInfer, _super);
                    function AbstractKObjectInfer(p_universe, p_time, p_uuid, p_metaClass, p_manager, currentUniverse, currentTime) {
                        _super.call(this, p_universe, p_time, p_uuid, p_metaClass, p_manager, currentUniverse, currentTime);
                    }
                    AbstractKObjectInfer.prototype.dependenciesResolver = function (dependencies) {
                        var _this = this;
                        return function (indexName) {
                            var dependency = _this._metaClass.dependencies().dependencyByName(indexName);
                            if (dependency != null) {
                                var single = new Array();
                                single[0] = dependencies[dependency.index()];
                                return single;
                            }
                            return null;
                        };
                    };
                    AbstractKObjectInfer.prototype.genericTrain = function (dependencies, expectedOutputs, callback) {
                        var all_dependencies = new Array(new Array());
                        all_dependencies[0] = dependencies;
                        var all_expectedOutputs = null;
                        if (expectedOutputs != null) {
                            all_expectedOutputs = new Array(new Array());
                            all_expectedOutputs[0] = expectedOutputs;
                        }
                        this.genericTrainAll(all_dependencies, all_expectedOutputs, callback);
                    };
                    AbstractKObjectInfer.prototype.genericTrainAll = function (p_dependencies, p_outputs, callback) {
                        var _this = this;
                        if (p_dependencies == null) {
                            throw new Error("Dependencies are mandatory for KObjectInfer");
                        }
                        var selfObject = this;
                        var waiter = this.manager().model().defer();
                        for (var i = 0; i < p_dependencies.length; i++) {
                            if (p_dependencies[i].length != this._metaClass.dependencies().allDependencies().length) {
                                throw new Error("Bad number of arguments for allDependencies");
                            }
                            var resolver = this.dependenciesResolver(p_dependencies[i]);
                            for (var j = 0; j < this._metaClass.inputs().length; j++) {
                                this._metaClass.inputs()[j].extractor().exec(null, resolver, waiter.waitResult());
                            }
                        }
                        waiter.then(function (results) {
                            var extractedInputs = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(p_dependencies.length, _this._metaClass.inputs().length);
                            var k = 0;
                            for (var i = 0; i < p_dependencies.length; i++) {
                                for (var j = 0; j < _this._metaClass.inputs().length; j++) {
                                    var extracted = results[k];
                                    if (extracted != null && extracted.length > 0) {
                                        extractedInputs.set(i, j, extracted[0]);
                                    }
                                    k++;
                                }
                            }
                            var extractedOutputs = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(1, _this._metaClass.outputs().length);
                            for (var i = 0; i < p_dependencies.length; i++) {
                                for (var j = 0; j < _this._metaClass.outputs().length; j++) {
                                    var metaInferOutput = _this._metaClass.outputs()[j];
                                    var currentOutputObject = null;
                                    if (p_outputs != null) {
                                        currentOutputObject = p_outputs[i][j];
                                    }
                                    extractedOutputs.set(i, j, _this.internalConvertOutput(currentOutputObject, metaInferOutput));
                                }
                            }
                            _this._metaClass.inferAlg().train(extractedInputs, extractedOutputs, selfObject, _this._manager);
                            if (callback != null) {
                                callback(null);
                            }
                        });
                    };
                    AbstractKObjectInfer.prototype.genericInfer = function (dependencies, callback) {
                        var all_dependencies = new Array(new Array());
                        all_dependencies[0] = dependencies;
                        this.genericInferAll(all_dependencies, function (objects) {
                            if (objects != null && objects.length > 0) {
                                callback(objects[0]);
                            }
                            else {
                                callback(null);
                            }
                        });
                    };
                    AbstractKObjectInfer.prototype.genericInferAll = function (p_dependencies, callback) {
                        var _this = this;
                        if (p_dependencies == null) {
                            throw new Error("Bad number of arguments for allDependencies");
                        }
                        var selfObject = this;
                        var waiter = this.manager().model().defer();
                        for (var i = 0; i < p_dependencies.length; i++) {
                            if (p_dependencies[i].length != this._metaClass.dependencies().allDependencies().length) {
                                throw new Error("Bad number of arguments for allDependencies");
                            }
                            var resolver = this.dependenciesResolver(p_dependencies[i]);
                            for (var j = 0; j < this._metaClass.inputs().length; j++) {
                                this._metaClass.inputs()[j].extractor().exec(null, resolver, waiter.waitResult());
                            }
                        }
                        waiter.then(function (results) {
                            var extractedInputs = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(p_dependencies.length, _this._metaClass.inputs().length);
                            var k = 0;
                            for (var i = 0; i < p_dependencies.length; i++) {
                                for (var j = 0; j < _this._metaClass.inputs().length; j++) {
                                    var extracted = results[k];
                                    if (extracted != null && extracted.length > 0) {
                                        extractedInputs.set(i, j, extracted[0]);
                                    }
                                    k++;
                                }
                            }
                            var extractedOutputs = _this._metaClass.inferAlg().infer(extractedInputs, selfObject, _this._manager);
                            var result = new Array(new Array());
                            for (var i = 0; i < extractedOutputs.rows(); i++) {
                                result[i] = new Array();
                                for (var j = 0; j < extractedOutputs.columns(); j++) {
                                    result[i][j] = _this.internalReverseOutput(extractedOutputs.get(i, j), _this._metaClass.outputs()[j]);
                                }
                            }
                            callback(result);
                        });
                    };
                    AbstractKObjectInfer.prototype.resetLearning = function () {
                        throw new Error("Not Implemented Yet!");
                    };
                    AbstractKObjectInfer.prototype.internalConvertOutput = function (output, metaOutput) {
                        if (output == null) {
                            return 0;
                        }
                        var typeId = metaOutput.attributeTypeId();
                        switch (typeId) {
                            case org.kevoree.modeling.meta.KPrimitiveTypes.BOOL_ID:
                                if (output) {
                                    return 1.0;
                                }
                                else {
                                    return 0.0;
                                }
                            case org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE_ID:
                                return output;
                            case org.kevoree.modeling.meta.KPrimitiveTypes.INT_ID:
                                return output;
                            case org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID:
                                return output;
                            case org.kevoree.modeling.meta.KPrimitiveTypes.LONG_ID:
                                return output;
                            case org.kevoree.modeling.meta.KPrimitiveTypes.STRING_ID:
                                throw new Error("String are not managed yet");
                            default:
                                if (org.kevoree.modeling.meta.KPrimitiveTypes.isEnum(metaOutput.attributeTypeId())) {
                                    var metaEnum = this._manager.model().metaModel().metaTypes()[metaOutput.attributeTypeId()];
                                    if (output instanceof org.kevoree.modeling.meta.impl.MetaLiteral) {
                                        return output.index();
                                    }
                                    else {
                                        var literal = metaEnum.literalByName(output.toString());
                                        if (literal != null) {
                                            return literal.index();
                                        }
                                    }
                                }
                                return 0;
                        }
                    };
                    AbstractKObjectInfer.prototype.internalReverseOutput = function (inferred, metaOutput) {
                        var typeId = metaOutput.attributeTypeId();
                        switch (typeId) {
                            case org.kevoree.modeling.meta.KPrimitiveTypes.BOOL_ID:
                                if (inferred >= 0.5) {
                                    return true;
                                }
                                else {
                                    return false;
                                }
                            case org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE_ID:
                                return inferred;
                            case org.kevoree.modeling.meta.KPrimitiveTypes.INT_ID:
                                return inferred;
                            case org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID:
                                return inferred;
                            case org.kevoree.modeling.meta.KPrimitiveTypes.LONG_ID:
                                return inferred;
                            case org.kevoree.modeling.meta.KPrimitiveTypes.STRING_ID:
                                throw new Error("String are not managed yet");
                            default:
                                if (org.kevoree.modeling.meta.KPrimitiveTypes.isEnum(metaOutput.attributeTypeId())) {
                                    var ceiledInferred = this.math_ceil(inferred);
                                    var metaEnum = this._manager.model().metaModel().metaTypes()[metaOutput.attributeTypeId()];
                                    return metaEnum.literal(ceiledInferred);
                                }
                                return null;
                        }
                    };
                    AbstractKObjectInfer.prototype.math_ceil = function (toCeilValue) {
                        return Math.round(toCeilValue);
                    };
                    return AbstractKObjectInfer;
                })(org.kevoree.modeling.abs.AbstractKObject);
                abs.AbstractKObjectInfer = AbstractKObjectInfer;
                var AbstractKUniverse = (function () {
                    function AbstractKUniverse(p_key, p_manager) {
                        this._universe = p_key;
                        this._manager = p_manager;
                    }
                    AbstractKUniverse.prototype.key = function () {
                        return this._universe;
                    };
                    AbstractKUniverse.prototype.time = function (timePoint) {
                        if (timePoint <= org.kevoree.modeling.KConfig.END_OF_TIME && timePoint >= org.kevoree.modeling.KConfig.BEGINNING_OF_TIME) {
                            return this.internal_create(timePoint);
                        }
                        else {
                            throw new Error("The selected Time " + timePoint + " is out of the range of KMF managed time");
                        }
                    };
                    AbstractKUniverse.prototype.internal_create = function (timePoint) {
                        throw "Abstract method";
                    };
                    AbstractKUniverse.prototype.equals = function (obj) {
                        if (!(obj instanceof org.kevoree.modeling.abs.AbstractKUniverse)) {
                            return false;
                        }
                        else {
                            var casted = obj;
                            return casted._universe == this._universe;
                        }
                    };
                    AbstractKUniverse.prototype.diverge = function () {
                        var casted = this._manager.model();
                        var nextKey = this._manager.nextUniverseKey();
                        var newUniverse = casted.internalCreateUniverse(nextKey);
                        this._manager.initUniverse(nextKey, this._universe);
                        return newUniverse;
                    };
                    AbstractKUniverse.prototype.lookupAllTimes = function (uuid, times, cb) {
                        this._manager.lookupAllTimes(this._universe, times, uuid, cb);
                    };
                    AbstractKUniverse.prototype.createListener = function () {
                        return this._manager.createListener(this._universe);
                    };
                    return AbstractKUniverse;
                })();
                abs.AbstractKUniverse = AbstractKUniverse;
                var AbstractKView = (function () {
                    function AbstractKView(p_universe, _time, p_manager) {
                        this._universe = p_universe;
                        this._time = _time;
                        this._manager = p_manager;
                    }
                    AbstractKView.prototype.now = function () {
                        return this._time;
                    };
                    AbstractKView.prototype.universe = function () {
                        return this._universe;
                    };
                    AbstractKView.prototype.setRoot = function (elem, cb) {
                        this._manager.setRoot(elem, cb);
                    };
                    AbstractKView.prototype.getRoot = function (cb) {
                        this._manager.getRoot(this._universe, this._time, cb);
                    };
                    AbstractKView.prototype.select = function (query, cb) {
                        if (org.kevoree.modeling.util.Checker.isDefined(cb)) {
                            if (query == null || query.length == 0) {
                                cb(new Array());
                            }
                            else {
                                this._manager.getRoot(this._universe, this._time, function (rootObj) {
                                    if (rootObj == null) {
                                        cb(new Array());
                                    }
                                    else {
                                        var singleRoot = new Array();
                                        singleRoot[0] = rootObj;
                                        org.kevoree.modeling.traversal.query.impl.QueryEngine.getINSTANCE().eval(query, singleRoot, cb);
                                    }
                                });
                            }
                        }
                    };
                    AbstractKView.prototype.lookup = function (kid, cb) {
                        this._manager.lookup(this._universe, this._time, kid, cb);
                    };
                    AbstractKView.prototype.lookupAll = function (keys, cb) {
                        this._manager.lookupAllObjects(this._universe, this._time, keys, cb);
                    };
                    AbstractKView.prototype.create = function (clazz) {
                        return this._manager.model().create(clazz, this._universe, this._time);
                    };
                    AbstractKView.prototype.createByName = function (metaClassName) {
                        return this.create(this._manager.model().metaModel().metaClassByName(metaClassName));
                    };
                    AbstractKView.prototype.json = function () {
                        return new org.kevoree.modeling.format.json.JsonFormat(this._universe, this._time, this._manager);
                    };
                    AbstractKView.prototype.equals = function (obj) {
                        if (!org.kevoree.modeling.util.Checker.isDefined(obj)) {
                            return false;
                        }
                        if (!(obj instanceof org.kevoree.modeling.abs.AbstractKView)) {
                            return false;
                        }
                        else {
                            var casted = obj;
                            return casted._time == this._time && casted._universe == this._universe;
                        }
                    };
                    return AbstractKView;
                })();
                abs.AbstractKView = AbstractKView;
            })(abs = modeling.abs || (modeling.abs = {}));
            var cdn;
            (function (cdn) {
                var impl;
                (function (impl) {
                    var MemoryContentDeliveryDriver = (function () {
                        function MemoryContentDeliveryDriver() {
                            this.backend = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                            this.additionalInterceptors = null;
                        }
                        MemoryContentDeliveryDriver.prototype.atomicGetIncrement = function (key, cb) {
                            var result = this.backend.get(org.kevoree.modeling.KContentKey.toString(key, 0));
                            var nextV;
                            var previousV;
                            if (result != null) {
                                try {
                                    previousV = org.kevoree.modeling.util.PrimitiveHelper.parseShort(result);
                                }
                                catch ($ex$) {
                                    if ($ex$ instanceof Error) {
                                        var e = $ex$;
                                        console.error(e['stack']);
                                        ;
                                        previousV = org.kevoree.modeling.util.PrimitiveHelper.SHORT_MIN_VALUE();
                                    }
                                    else {
                                        throw $ex$;
                                    }
                                }
                            }
                            else {
                                previousV = 0;
                            }
                            if (previousV == org.kevoree.modeling.util.PrimitiveHelper.SHORT_MAX_VALUE()) {
                                nextV = org.kevoree.modeling.util.PrimitiveHelper.SHORT_MIN_VALUE();
                            }
                            else {
                                nextV = (previousV + 1);
                            }
                            this.backend.put(org.kevoree.modeling.KContentKey.toString(key, 0), "" + nextV);
                            cb(previousV);
                        };
                        MemoryContentDeliveryDriver.prototype.get = function (keys, callback) {
                            var nbKeys = keys.length / 3;
                            var values = new Array();
                            for (var i = 0; i < nbKeys; i++) {
                                values[i] = this.backend.get(org.kevoree.modeling.KContentKey.toString(keys, i));
                            }
                            if (callback != null) {
                                callback(values);
                            }
                        };
                        MemoryContentDeliveryDriver.prototype.put = function (p_keys, p_values, p_callback, excludeListener) {
                            var nbKeys = p_keys.length / 3;
                            for (var i = 0; i < nbKeys; i++) {
                                this.backend.put(org.kevoree.modeling.KContentKey.toString(p_keys, i), p_values[i]);
                            }
                            if (this.additionalInterceptors != null) {
                                this.additionalInterceptors.each(function (key, value) {
                                    if (value != null && key != excludeListener) {
                                        value.onKeysUpdate(p_keys);
                                    }
                                });
                            }
                            if (p_callback != null) {
                                p_callback(null);
                            }
                        };
                        MemoryContentDeliveryDriver.prototype.remove = function (p_keys, callback) {
                            var nbKeys = p_keys.length / 3;
                            for (var i = 0; i < nbKeys; i++) {
                                this.backend.remove(org.kevoree.modeling.KContentKey.toString(p_keys, i));
                            }
                            if (callback != null) {
                                callback(null);
                            }
                        };
                        MemoryContentDeliveryDriver.prototype.connect = function (callback) {
                            if (callback != null) {
                                callback(null);
                            }
                        };
                        MemoryContentDeliveryDriver.prototype.close = function (callback) {
                            this.backend.clear();
                            callback(null);
                        };
                        MemoryContentDeliveryDriver.prototype.nextListenerID = function () {
                            return Math.random();
                        };
                        MemoryContentDeliveryDriver.prototype.addUpdateListener = function (p_interceptor) {
                            if (this.additionalInterceptors == null) {
                                this.additionalInterceptors = new org.kevoree.modeling.memory.chunk.impl.ArrayIntMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                            }
                            var newID = this.nextListenerID();
                            this.additionalInterceptors.put(newID, p_interceptor);
                            return newID;
                        };
                        MemoryContentDeliveryDriver.prototype.removeUpdateListener = function (id) {
                            if (this.additionalInterceptors != null) {
                                this.additionalInterceptors.remove(id);
                            }
                        };
                        MemoryContentDeliveryDriver.prototype.peers = function () {
                            return new Array();
                        };
                        MemoryContentDeliveryDriver.prototype.sendToPeer = function (peer, message, callback) {
                        };
                        return MemoryContentDeliveryDriver;
                    })();
                    impl.MemoryContentDeliveryDriver = MemoryContentDeliveryDriver;
                })(impl = cdn.impl || (cdn.impl = {}));
            })(cdn = modeling.cdn || (modeling.cdn = {}));
            var defer;
            (function (defer) {
                var impl;
                (function (impl) {
                    var Defer = (function () {
                        function Defer() {
                            this._nbExpectedResult = 0;
                            this._nbRecResult = 0;
                            this._results = null;
                            this._resultSize = 0;
                        }
                        Defer.prototype.waitResult = function () {
                            return this.informEndOrRegister(-1, null, null);
                        };
                        Defer.prototype.then = function (cb) {
                            this.informEndOrRegister(-1, null, cb);
                        };
                        Defer.prototype.informEndOrRegister = function (p_indexToInsert, p_result, p_end) {
                            var _this = this;
                            if (p_end == null) {
                                if (p_indexToInsert == -1) {
                                    var toInsert = this._nbExpectedResult;
                                    this._nbExpectedResult++;
                                    if (this._results == null || this._resultSize < this._nbExpectedResult) {
                                        var newResultSize = (this._nbExpectedResult == 0 ? 1 : this._nbExpectedResult << 1);
                                        var newResults = new Array();
                                        if (this._results != null) {
                                            java.lang.System.arraycopy(this._results, 0, newResults, 0, this._resultSize);
                                        }
                                        this._resultSize = newResultSize;
                                        this._results = newResults;
                                    }
                                    return function (o) {
                                        _this.informEndOrRegister(toInsert, o, null);
                                    };
                                }
                                else {
                                    this._results[p_indexToInsert] = p_result;
                                    this._nbRecResult++;
                                    if (this._end != null && (this._nbExpectedResult == this._nbRecResult)) {
                                        var finalResults = this._results;
                                        if (this._resultSize != this._nbExpectedResult) {
                                            var newResults = new Array();
                                            java.lang.System.arraycopy(this._results, 0, newResults, 0, this._nbExpectedResult);
                                            finalResults = newResults;
                                        }
                                        this._end(finalResults);
                                    }
                                }
                            }
                            else {
                                this._end = p_end;
                                if (this._nbExpectedResult == this._nbRecResult) {
                                    var finalResults = this._results;
                                    if (this._resultSize != this._nbExpectedResult) {
                                        var newResults = new Array();
                                        java.lang.System.arraycopy(this._results, 0, newResults, 0, this._nbExpectedResult);
                                        finalResults = newResults;
                                    }
                                    this._end(finalResults);
                                }
                            }
                            return null;
                        };
                        return Defer;
                    })();
                    impl.Defer = Defer;
                })(impl = defer.impl || (defer.impl = {}));
            })(defer = modeling.defer || (modeling.defer = {}));
            var extrapolation;
            (function (extrapolation) {
                var impl;
                (function (impl) {
                    var DiscreteExtrapolation = (function () {
                        function DiscreteExtrapolation() {
                        }
                        DiscreteExtrapolation.instance = function () {
                            if (DiscreteExtrapolation.INSTANCE == null) {
                                DiscreteExtrapolation.INSTANCE = new org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation();
                            }
                            return DiscreteExtrapolation.INSTANCE;
                        };
                        DiscreteExtrapolation.prototype.extrapolate = function (current, attribute, dataManager) {
                            var payload = dataManager.closestChunk(current.universe(), current.now(), current.uuid(), current.metaClass(), current.previousResolved());
                            if (payload != null) {
                                if (org.kevoree.modeling.meta.KPrimitiveTypes.isEnum(attribute.attributeTypeId())) {
                                    var metaEnum = current._manager.model().metaModel().metaTypes()[attribute.attributeTypeId()];
                                    return metaEnum.literal(payload.getPrimitiveType(attribute.index(), current.metaClass()));
                                }
                                else {
                                    return payload.getPrimitiveType(attribute.index(), current.metaClass());
                                }
                            }
                            else {
                                return null;
                            }
                        };
                        DiscreteExtrapolation.prototype.mutate = function (current, attribute, payload, dataManager) {
                            var internalPayload = dataManager.preciseChunk(current.universe(), current.now(), current.uuid(), current.metaClass(), current.previousResolved());
                            if (internalPayload != null) {
                                if (org.kevoree.modeling.meta.KPrimitiveTypes.isEnum(attribute.attributeTypeId())) {
                                    if (payload instanceof org.kevoree.modeling.meta.impl.MetaLiteral) {
                                        internalPayload.setPrimitiveType(attribute.index(), payload.index(), current.metaClass());
                                    }
                                    else {
                                        var metaEnum = current._manager.model().metaModel().metaTypes()[attribute.attributeTypeId()];
                                        var foundLiteral = metaEnum.literalByName(payload.toString());
                                        if (foundLiteral != null) {
                                            internalPayload.setPrimitiveType(attribute.index(), foundLiteral.index(), current.metaClass());
                                        }
                                    }
                                }
                                else {
                                    if (payload == null) {
                                        internalPayload.setPrimitiveType(attribute.index(), null, current.metaClass());
                                    }
                                    else {
                                        internalPayload.setPrimitiveType(attribute.index(), this.convert(attribute, payload), current.metaClass());
                                    }
                                }
                            }
                        };
                        DiscreteExtrapolation.prototype.convert = function (attribute, payload) {
                            return payload;
                        };
                        return DiscreteExtrapolation;
                    })();
                    impl.DiscreteExtrapolation = DiscreteExtrapolation;
                    var DoublePolynomialExtrapolation = (function () {
                        function DoublePolynomialExtrapolation() {
                        }
                        DoublePolynomialExtrapolation.prototype.extrapolate = function (current, attribute, dataManager) {
                            var raw = dataManager.closestChunk(current.universe(), current.now(), current.uuid(), current.metaClass(), current.previousResolved());
                            if (raw != null) {
                                var extrapolatedValue = this.extrapolateValue(raw, current.metaClass(), attribute.index(), current.now(), raw.time());
                                var attTypeId = attribute.attributeTypeId();
                                switch (attTypeId) {
                                    case org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID:
                                        return extrapolatedValue;
                                    case org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE_ID:
                                        return extrapolatedValue;
                                    default:
                                        return null;
                                }
                            }
                            else {
                                return null;
                            }
                        };
                        DoublePolynomialExtrapolation.prototype.getPolyWeightIndex = function (segment, meta, index) {
                            return DoublePolynomialExtrapolation.TIMEWEIGHT + segment.getDoubleArrayElem(index, DoublePolynomialExtrapolation.TIMEDEG, meta) + 1;
                        };
                        DoublePolynomialExtrapolation.prototype.getTime = function (num, segment, meta, index) {
                            if (segment.getDoubleArraySize(index, meta) == 0) {
                                return 0.0;
                            }
                            var result = 0;
                            var power = 1;
                            if (segment.getDoubleArrayElem(index, DoublePolynomialExtrapolation.TIMEDEG, meta) == 0) {
                                return segment.getDoubleArrayElem(index, DoublePolynomialExtrapolation.TIMEWEIGHT, meta);
                            }
                            var t = num;
                            var inferArraySize = segment.getDoubleArrayElem(index, DoublePolynomialExtrapolation.POLYDEG, meta);
                            for (var j = 0; j <= inferArraySize; j++) {
                                result += segment.getDoubleArrayElem(index, (j + DoublePolynomialExtrapolation.TIMEWEIGHT), meta) * power;
                                power = power * t;
                            }
                            return result;
                        };
                        DoublePolynomialExtrapolation.prototype.getLastTime = function (segment, meta, index) {
                            return this.getTime(segment.getDoubleArrayElem(index, DoublePolynomialExtrapolation.NUMSAMPLES, meta) - 1, segment, meta, index);
                        };
                        DoublePolynomialExtrapolation.prototype.extrapolateValue = function (segment, meta, index, time, timeOrigin) {
                            if (segment.getDoubleArraySize(index, meta) == 0) {
                                return 0.0;
                            }
                            var result = 0;
                            var power = 1;
                            var inferSTEP = segment.getDoubleArrayElem(index, DoublePolynomialExtrapolation.STEP, meta);
                            var polyw = this.getPolyWeightIndex(segment, meta, index);
                            if (inferSTEP == 0) {
                                return segment.getDoubleArrayElem(index, polyw, meta);
                            }
                            var t = (time - timeOrigin) / inferSTEP;
                            var inferArraySize = segment.getDoubleArrayElem(index, DoublePolynomialExtrapolation.POLYDEG, meta);
                            for (var j = 0; j <= inferArraySize; j++) {
                                result += segment.getDoubleArrayElem(index, (j + polyw), meta) * power;
                                power = power * t;
                            }
                            return result;
                        };
                        DoublePolynomialExtrapolation.prototype.maxErr = function (precision, degree) {
                            return precision / Math.pow(2, degree + 0.5);
                        };
                        DoublePolynomialExtrapolation.prototype.insert = function (time, value, timeOrigin, raw, index, precision, metaClass) {
                            if (raw.getDoubleArraySize(index, metaClass) == 0) {
                                this.initial_feed(time, value, raw, index, metaClass);
                                return true;
                            }
                            if (raw.getDoubleArrayElem(index, DoublePolynomialExtrapolation.NUMSAMPLES, metaClass) == 1) {
                                raw.setDoubleArrayElem(index, DoublePolynomialExtrapolation.STEP, (time - timeOrigin), metaClass);
                            }
                            var timedeg = raw.getDoubleArrayElem(index, DoublePolynomialExtrapolation.TIMEDEG, metaClass);
                            var deg = raw.getDoubleArrayElem(index, DoublePolynomialExtrapolation.POLYDEG, metaClass);
                            var num = raw.getDoubleArrayElem(index, DoublePolynomialExtrapolation.NUMSAMPLES, metaClass);
                            var maxError = this.maxErr(precision, deg);
                            var normTime = (time - timeOrigin) / raw.getDoubleArrayElem(index, DoublePolynomialExtrapolation.STEP, metaClass);
                            if (Math.abs(this.getTime(num, raw, metaClass, index) - time) > DoublePolynomialExtrapolation._TIMERR) {
                                if (timedeg < Math.min(num, DoublePolynomialExtrapolation._maxTimeDegree)) {
                                    timedeg++;
                                    var ss = Math.min(deg * 2, num);
                                    var times = new Float64Array(ss + 1);
                                    var values = new Float64Array(ss + 1);
                                    for (var i = 0; i < ss; i++) {
                                        times[i] = (i * num / ss);
                                        values[i] = this.getTime(times[i], raw, metaClass, index);
                                    }
                                    times[ss] = num;
                                    values[ss] = normTime;
                                    var pf = new org.kevoree.modeling.util.maths.PolynomialFit(timedeg);
                                    pf.fit(times, values);
                                    for (var i = 0; i < pf.getCoef().length; i++) {
                                        raw.setDoubleArrayElem(index, i + DoublePolynomialExtrapolation.TIMEWEIGHT, pf.getCoef()[i], metaClass);
                                    }
                                    raw.setDoubleArrayElem(index, DoublePolynomialExtrapolation.TIMEDEG, timedeg, metaClass);
                                }
                                else {
                                    return false;
                                }
                            }
                            if (Math.abs(this.extrapolateValue(raw, metaClass, index, time, timeOrigin) - value) <= maxError) {
                                var nexNumSamples = raw.getDoubleArrayElem(index, DoublePolynomialExtrapolation.NUMSAMPLES, metaClass) + 1;
                                raw.setDoubleArrayElem(index, DoublePolynomialExtrapolation.NUMSAMPLES, nexNumSamples, metaClass);
                                return true;
                            }
                            var newMaxDegree = Math.min(num, DoublePolynomialExtrapolation._maxDegree);
                            if (deg < newMaxDegree) {
                                deg++;
                                var ss = Math.min(deg * 2, num);
                                var times = new Float64Array(ss + 1);
                                var values = new Float64Array(ss + 1);
                                for (var i = 0; i < ss; i++) {
                                    times[i] = this.getTime(i * num / ss, raw, metaClass, index);
                                    values[i] = this.internal_extrapolate(times[i], raw, index, metaClass);
                                }
                                times[ss] = normTime;
                                values[ss] = value;
                                var pf = new org.kevoree.modeling.util.maths.PolynomialFit(deg);
                                pf.fit(times, values);
                                if (this.tempError(pf.getCoef(), times, values) <= maxError) {
                                    var pWeight = this.getPolyWeightIndex(raw, metaClass, index);
                                    raw.extendDoubleArray(index, (raw.getDoubleArraySize(index, metaClass) + 1), metaClass);
                                    for (var i = 0; i < pf.getCoef().length; i++) {
                                        raw.setDoubleArrayElem(index, i + pWeight, pf.getCoef()[i], metaClass);
                                    }
                                    raw.setDoubleArrayElem(index, DoublePolynomialExtrapolation.POLYDEG, deg, metaClass);
                                    raw.setDoubleArrayElem(index, DoublePolynomialExtrapolation.NUMSAMPLES, num + 1, metaClass);
                                    return true;
                                }
                            }
                            return false;
                        };
                        DoublePolynomialExtrapolation.prototype.tempError = function (computedWeights, times, values) {
                            var maxErr = 0;
                            var temp;
                            for (var i = 0; i < times.length; i++) {
                                temp = Math.abs(values[i] - org.kevoree.modeling.util.maths.PolynomialFit.extrapolate(times[i], computedWeights));
                                if (temp > maxErr) {
                                    maxErr = temp;
                                }
                            }
                            return maxErr;
                        };
                        DoublePolynomialExtrapolation.prototype.internal_extrapolate = function (t, raw, index, metaClass) {
                            var result = 0;
                            var power = 1;
                            var pWeight = this.getPolyWeightIndex(raw, metaClass, index);
                            if (raw.getDoubleArrayElem(index, DoublePolynomialExtrapolation.STEP, metaClass) == 0) {
                                return raw.getDoubleArrayElem(index, pWeight, metaClass);
                            }
                            for (var j = 0; j <= raw.getDoubleArrayElem(index, DoublePolynomialExtrapolation.POLYDEG, metaClass); j++) {
                                result += raw.getDoubleArrayElem(index, (j + pWeight), metaClass) * power;
                                power = power * t;
                            }
                            return result;
                        };
                        DoublePolynomialExtrapolation.prototype.initial_feed = function (time, value, raw, index, metaClass) {
                            raw.extendDoubleArray(index, DoublePolynomialExtrapolation.TIMEWEIGHT + 2, metaClass);
                            raw.setDoubleArrayElem(index, DoublePolynomialExtrapolation.TIMEDEG, 0, metaClass);
                            raw.setDoubleArrayElem(index, DoublePolynomialExtrapolation.NUMSAMPLES, 1, metaClass);
                            raw.setDoubleArrayElem(index, DoublePolynomialExtrapolation.POLYDEG, 0, metaClass);
                            raw.setDoubleArrayElem(index, DoublePolynomialExtrapolation.STEP, 0, metaClass);
                            raw.setDoubleArrayElem(index, DoublePolynomialExtrapolation.TIMEWEIGHT, 0, metaClass);
                            raw.setDoubleArrayElem(index, DoublePolynomialExtrapolation.TIMEWEIGHT + 1, value, metaClass);
                        };
                        DoublePolynomialExtrapolation.prototype.mutate = function (current, attribute, payload, dataManager) {
                            var raw = dataManager.closestChunk(current.universe(), current.now(), current.uuid(), current.metaClass(), current.previousResolved());
                            if (raw.getDoubleArraySize(attribute.index(), current.metaClass()) == 0) {
                                raw = dataManager.preciseChunk(current.universe(), current.now(), current.uuid(), current.metaClass(), current.previousResolved());
                            }
                            if (!this.insert(current.now(), this.castNumber(payload), raw.time(), raw, attribute.index(), attribute.precision(), current.metaClass())) {
                                var prevTime = this.getLastTimeLong(raw, current.metaClass(), attribute.index()) + raw.time();
                                var val = this.extrapolateValue(raw, current.metaClass(), attribute.index(), prevTime, raw.time());
                                var newSegment = dataManager.preciseChunk(current.universe(), prevTime, current.uuid(), current.metaClass(), current.previousResolved());
                                newSegment.clearDoubleArray(attribute.index(), current.metaClass());
                                this.insert(prevTime, val, prevTime, newSegment, attribute.index(), attribute.precision(), current.metaClass());
                                this.insert(current.now(), this.castNumber(payload), prevTime, newSegment, attribute.index(), attribute.precision(), current.metaClass());
                            }
                        };
                        DoublePolynomialExtrapolation.prototype.getLastTimeLong = function (raw, kMetaClass, index) {
                            return (this.getLastTime(raw, kMetaClass, index) * raw.getDoubleArrayElem(index, DoublePolynomialExtrapolation.STEP, kMetaClass));
                        };
                        DoublePolynomialExtrapolation.prototype.castNumber = function (payload) {
                            return +payload;
                        };
                        DoublePolynomialExtrapolation.instance = function () {
                            if (DoublePolynomialExtrapolation.INSTANCE == null) {
                                DoublePolynomialExtrapolation.INSTANCE = new org.kevoree.modeling.extrapolation.impl.DoublePolynomialExtrapolation();
                            }
                            return DoublePolynomialExtrapolation.INSTANCE;
                        };
                        DoublePolynomialExtrapolation._TIMERR = 0.001;
                        DoublePolynomialExtrapolation._maxDegree = 20;
                        DoublePolynomialExtrapolation._maxTimeDegree = 7;
                        DoublePolynomialExtrapolation.TIMEDEG = 0;
                        DoublePolynomialExtrapolation.NUMSAMPLES = 1;
                        DoublePolynomialExtrapolation.POLYDEG = 2;
                        DoublePolynomialExtrapolation.STEP = 3;
                        DoublePolynomialExtrapolation.TIMEWEIGHT = 4;
                        return DoublePolynomialExtrapolation;
                    })();
                    impl.DoublePolynomialExtrapolation = DoublePolynomialExtrapolation;
                    var PolynomialExtrapolation = (function () {
                        function PolynomialExtrapolation() {
                        }
                        PolynomialExtrapolation.prototype.extrapolate = function (current, attribute, dataManager) {
                            var raw = dataManager.closestChunk(current.universe(), current.now(), current.uuid(), current.metaClass(), current.previousResolved());
                            if (raw != null) {
                                var extrapolatedValue = this.extrapolateValue(raw, current.metaClass(), attribute.index(), current.now(), raw.time());
                                var attTypeId = attribute.attributeTypeId();
                                switch (attTypeId) {
                                    case org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID:
                                        return extrapolatedValue;
                                    case org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE_ID:
                                        return extrapolatedValue;
                                    default:
                                        return null;
                                }
                            }
                            else {
                                return null;
                            }
                        };
                        PolynomialExtrapolation.prototype.extrapolateValue = function (segment, meta, index, time, timeOrigin) {
                            if (segment.getDoubleArraySize(index, meta) == 0) {
                                return 0.0;
                            }
                            var result = 0;
                            var power = 1;
                            var inferSTEP = segment.getDoubleArrayElem(index, PolynomialExtrapolation.STEP, meta);
                            if (inferSTEP == 0) {
                                return segment.getDoubleArrayElem(index, PolynomialExtrapolation.WEIGHTS, meta);
                            }
                            var t = (time - timeOrigin) / inferSTEP;
                            var inferArraySize = segment.getDoubleArrayElem(index, PolynomialExtrapolation.DEGREE, meta);
                            for (var j = 0; j <= inferArraySize; j++) {
                                result += segment.getDoubleArrayElem(index, (j + PolynomialExtrapolation.WEIGHTS), meta) * power;
                                power = power * t;
                            }
                            return result;
                        };
                        PolynomialExtrapolation.prototype.maxErr = function (precision, degree) {
                            return precision / Math.pow(2, degree + 3);
                        };
                        PolynomialExtrapolation.prototype.insert = function (time, value, timeOrigin, raw, index, precision, metaClass) {
                            if (raw.getDoubleArraySize(index, metaClass) == 0) {
                                this.initial_feed(time, value, raw, index, metaClass);
                                return true;
                            }
                            if (raw.getDoubleArrayElem(index, PolynomialExtrapolation.NUMSAMPLES, metaClass) == 1) {
                                var timeStep = time - timeOrigin;
                                if (timeStep == 0) {
                                    raw.setDoubleArrayElem(index, PolynomialExtrapolation.WEIGHTS, value, metaClass);
                                    return true;
                                }
                                else {
                                    raw.setDoubleArrayElem(index, PolynomialExtrapolation.STEP, timeStep, metaClass);
                                }
                            }
                            var deg = raw.getDoubleArrayElem(index, PolynomialExtrapolation.DEGREE, metaClass);
                            var num = raw.getDoubleArrayElem(index, PolynomialExtrapolation.NUMSAMPLES, metaClass);
                            var stp = raw.getDoubleArrayElem(index, PolynomialExtrapolation.STEP, metaClass);
                            var maxError = this.maxErr(precision, deg);
                            if (Math.abs(this.extrapolateValue(raw, metaClass, index, time, timeOrigin) - value) <= maxError) {
                                var nexNumSamples = raw.getDoubleArrayElem(index, PolynomialExtrapolation.NUMSAMPLES, metaClass) + 1;
                                raw.setDoubleArrayElem(index, PolynomialExtrapolation.NUMSAMPLES, nexNumSamples, metaClass);
                                raw.setDoubleArrayElem(index, PolynomialExtrapolation.LASTTIME, time - timeOrigin, metaClass);
                                return true;
                            }
                            var newMaxDegree = Math.min(num, PolynomialExtrapolation._maxDegree);
                            if (deg < newMaxDegree) {
                                deg++;
                                var ss = num * 2;
                                var times = new Float64Array(ss + 1);
                                var values = new Float64Array(ss + 1);
                                var inc = 0;
                                if (ss > 1) {
                                    inc = raw.getDoubleArrayElem(index, PolynomialExtrapolation.LASTTIME, metaClass) / (stp * (ss - 1));
                                }
                                for (var i = 0; i < ss; i++) {
                                    times[i] = i * inc;
                                    values[i] = this.internal_extrapolate(times[i], raw, index, metaClass);
                                }
                                times[ss] = (time - timeOrigin) / stp;
                                values[ss] = value;
                                var pf = new org.kevoree.modeling.util.maths.PolynomialFit(deg);
                                pf.fit(times, values);
                                if (this.tempError(pf.getCoef(), times, values) <= maxError) {
                                    raw.extendDoubleArray(index, (raw.getDoubleArraySize(index, metaClass) + 1), metaClass);
                                    for (var i = 0; i < pf.getCoef().length; i++) {
                                        raw.setDoubleArrayElem(index, i + PolynomialExtrapolation.WEIGHTS, pf.getCoef()[i], metaClass);
                                    }
                                    raw.setDoubleArrayElem(index, PolynomialExtrapolation.DEGREE, deg, metaClass);
                                    raw.setDoubleArrayElem(index, PolynomialExtrapolation.NUMSAMPLES, num + 1, metaClass);
                                    raw.setDoubleArrayElem(index, PolynomialExtrapolation.LASTTIME, time - timeOrigin, metaClass);
                                    return true;
                                }
                            }
                            return false;
                        };
                        PolynomialExtrapolation.prototype.tempError = function (computedWeights, times, values) {
                            var maxErr = 0;
                            var temp;
                            for (var i = 0; i < times.length; i++) {
                                temp = Math.abs(values[i] - org.kevoree.modeling.util.maths.PolynomialFit.extrapolate(times[i], computedWeights));
                                if (temp > maxErr) {
                                    maxErr = temp;
                                }
                            }
                            return maxErr;
                        };
                        PolynomialExtrapolation.prototype.internal_extrapolate = function (t, raw, index, metaClass) {
                            var result = 0;
                            var power = 1;
                            if (raw.getDoubleArrayElem(index, PolynomialExtrapolation.STEP, metaClass) == 0) {
                                return raw.getDoubleArrayElem(index, PolynomialExtrapolation.WEIGHTS, metaClass);
                            }
                            for (var j = 0; j <= raw.getDoubleArrayElem(index, PolynomialExtrapolation.DEGREE, metaClass); j++) {
                                result += raw.getDoubleArrayElem(index, (j + PolynomialExtrapolation.WEIGHTS), metaClass) * power;
                                power = power * t;
                            }
                            return result;
                        };
                        PolynomialExtrapolation.prototype.initial_feed = function (time, value, raw, index, metaClass) {
                            raw.extendDoubleArray(index, PolynomialExtrapolation.WEIGHTS + 1, metaClass);
                            raw.setDoubleArrayElem(index, PolynomialExtrapolation.DEGREE, 0, metaClass);
                            raw.setDoubleArrayElem(index, PolynomialExtrapolation.NUMSAMPLES, 1, metaClass);
                            raw.setDoubleArrayElem(index, PolynomialExtrapolation.LASTTIME, 0, metaClass);
                            raw.setDoubleArrayElem(index, PolynomialExtrapolation.STEP, 0, metaClass);
                            raw.setDoubleArrayElem(index, PolynomialExtrapolation.WEIGHTS, value, metaClass);
                        };
                        PolynomialExtrapolation.prototype.mutate = function (current, attribute, payload, dataManager) {
                            var raw = dataManager.closestChunk(current.universe(), current.now(), current.uuid(), current.metaClass(), current.previousResolved());
                            if (raw.getDoubleArraySize(attribute.index(), current.metaClass()) == 0) {
                                raw = dataManager.preciseChunk(current.universe(), current.now(), current.uuid(), current.metaClass(), current.previousResolved());
                            }
                            if (!this.insert(current.now(), this.castNumber(payload), raw.time(), raw, attribute.index(), attribute.precision(), current.metaClass())) {
                                var prevTime = raw.getDoubleArrayElem(attribute.index(), PolynomialExtrapolation.LASTTIME, current.metaClass()) + raw.time();
                                var newSegment = dataManager.preciseChunk(current.universe(), prevTime, current.uuid(), current.metaClass(), current.previousResolved());
                                var metaElements = current.metaClass().metaElements();
                                for (var i = 0; i < metaElements.length; i++) {
                                    if (metaElements[i].metaType().equals(org.kevoree.modeling.meta.MetaType.ATTRIBUTE)) {
                                        var att = metaElements[i];
                                        if (att.strategy() == this) {
                                            newSegment.clearDoubleArray(att.index(), current.metaClass());
                                            if (att.index() != attribute.index()) {
                                                var val = this.extrapolateValue(raw, current.metaClass(), att.index(), prevTime, raw.time());
                                                this.insert(prevTime, val, prevTime, newSegment, att.index(), att.precision(), current.metaClass());
                                                var newTime = raw.getDoubleArrayElem(att.index(), PolynomialExtrapolation.LASTTIME, current.metaClass()) + raw.time();
                                                if (newTime >= current.now()) {
                                                    val = this.extrapolateValue(raw, current.metaClass(), att.index(), newTime, raw.time());
                                                    this.insert(newTime, val, prevTime, newSegment, att.index(), att.precision(), current.metaClass());
                                                }
                                            }
                                        }
                                    }
                                }
                                var val = this.extrapolateValue(raw, current.metaClass(), attribute.index(), prevTime, raw.time());
                                this.insert(prevTime, val, prevTime, newSegment, attribute.index(), attribute.precision(), current.metaClass());
                                this.insert(current.now(), this.castNumber(payload), prevTime, newSegment, attribute.index(), attribute.precision(), current.metaClass());
                            }
                        };
                        PolynomialExtrapolation.prototype.castNumber = function (payload) {
                            return +payload;
                        };
                        PolynomialExtrapolation.instance = function () {
                            if (PolynomialExtrapolation.INSTANCE == null) {
                                PolynomialExtrapolation.INSTANCE = new org.kevoree.modeling.extrapolation.impl.PolynomialExtrapolation();
                            }
                            return PolynomialExtrapolation.INSTANCE;
                        };
                        PolynomialExtrapolation._maxDegree = 20;
                        PolynomialExtrapolation.DEGREE = 0;
                        PolynomialExtrapolation.NUMSAMPLES = 1;
                        PolynomialExtrapolation.STEP = 2;
                        PolynomialExtrapolation.LASTTIME = 3;
                        PolynomialExtrapolation.WEIGHTS = 4;
                        return PolynomialExtrapolation;
                    })();
                    impl.PolynomialExtrapolation = PolynomialExtrapolation;
                })(impl = extrapolation.impl || (extrapolation.impl = {}));
            })(extrapolation = modeling.extrapolation || (modeling.extrapolation = {}));
            var format;
            (function (format) {
                var json;
                (function (json) {
                    var JsonFormat = (function () {
                        function JsonFormat(p_universe, p_time, p_manager) {
                            this._manager = p_manager;
                            this._universe = p_universe;
                            this._time = p_time;
                        }
                        JsonFormat.prototype.save = function (model, cb) {
                            if (org.kevoree.modeling.util.Checker.isDefined(model) && org.kevoree.modeling.util.Checker.isDefined(cb)) {
                                org.kevoree.modeling.format.json.JsonModelSerializer.serialize(model, cb);
                            }
                            else {
                                throw new Error(JsonFormat.NULL_PARAM_MSG);
                            }
                        };
                        JsonFormat.prototype.saveRoot = function (cb) {
                            if (org.kevoree.modeling.util.Checker.isDefined(cb)) {
                                this._manager.getRoot(this._universe, this._time, function (root) {
                                    if (root == null) {
                                        cb(null);
                                    }
                                    else {
                                        org.kevoree.modeling.format.json.JsonModelSerializer.serialize(root, cb);
                                    }
                                });
                            }
                        };
                        JsonFormat.prototype.load = function (payload, cb) {
                            if (org.kevoree.modeling.util.Checker.isDefined(payload)) {
                                org.kevoree.modeling.format.json.JsonModelLoader.load(this._manager, this._universe, this._time, payload, cb);
                            }
                            else {
                                throw new Error(JsonFormat.NULL_PARAM_MSG);
                            }
                        };
                        JsonFormat.KEY_META = "@class";
                        JsonFormat.KEY_UUID = "@uuid";
                        JsonFormat.KEY_ROOT = "@root";
                        JsonFormat.NULL_PARAM_MSG = "one parameter is null";
                        return JsonFormat;
                    })();
                    json.JsonFormat = JsonFormat;
                    var JsonModelLoader = (function () {
                        function JsonModelLoader() {
                        }
                        JsonModelLoader.load = function (manager, universe, time, payload, callback) {
                            if (payload == null) {
                                callback(null);
                            }
                            else {
                                var toLoadObj = JSON.parse(payload);
                                var rootElem = [];
                                var mappedKeys = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                                for (var i = 0; i < toLoadObj.length; i++) {
                                    var elem = toLoadObj[i];
                                    var kid = elem[org.kevoree.modeling.format.json.JsonFormat.KEY_UUID];
                                    mappedKeys.put(kid, manager.nextObjectKey());
                                }
                                for (var i = 0; i < toLoadObj.length; i++) {
                                    var elemRaw = toLoadObj[i];
                                    var elem2 = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(Object.keys(elemRaw).length, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                    for (var ik in elemRaw) {
                                        elem2[ik] = elemRaw[ik];
                                    }
                                    try {
                                        org.kevoree.modeling.format.json.JsonModelLoader.loadObj(elem2, manager, universe, time, mappedKeys, rootElem);
                                    }
                                    catch (e) {
                                        console.error(e);
                                    }
                                }
                                if (rootElem[0] != null) {
                                    manager.setRoot(rootElem[0], function (throwable) { if (callback != null) {
                                        callback(throwable);
                                    } });
                                }
                                else {
                                    if (callback != null) {
                                        callback(null);
                                    }
                                }
                            }
                        };
                        JsonModelLoader.loadObj = function (p_param, manager, universe, time, p_mappedKeys, p_rootElem) {
                            var kid = org.kevoree.modeling.util.PrimitiveHelper.parseLong(p_param.get(org.kevoree.modeling.format.json.JsonFormat.KEY_UUID).toString());
                            var meta = p_param.get(org.kevoree.modeling.format.json.JsonFormat.KEY_META).toString();
                            var metaClass = manager.model().metaModel().metaClassByName(meta);
                            var current = manager.model().createProxy(universe, time, p_mappedKeys.get(kid), metaClass, universe, time);
                            manager.initKObject(current);
                            var raw = manager.preciseChunk(current.universe(), current.now(), current.uuid(), current.metaClass(), current.previousResolved());
                            p_param.each(function (metaKey, payload_content) {
                                if (org.kevoree.modeling.util.PrimitiveHelper.equals(metaKey, org.kevoree.modeling.format.json.JsonFormat.KEY_ROOT)) {
                                    p_rootElem[0] = current;
                                }
                                else {
                                    var metaElement = metaClass.metaByName(metaKey);
                                    if (payload_content != null) {
                                        if (metaElement != null && metaElement.metaType().equals(org.kevoree.modeling.meta.MetaType.ATTRIBUTE)) {
                                            var metaAttribute = metaElement;
                                            var metaAttId = metaAttribute.attributeTypeId();
                                            switch (metaAttId) {
                                                case org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID:
                                                    var plainRawSet = p_param.get(metaAttribute.metaName());
                                                    var convertedRaw = new Float64Array(plainRawSet.length);
                                                    for (var l = 0; l < plainRawSet.length; l++) {
                                                        try {
                                                            convertedRaw[l] = org.kevoree.modeling.util.PrimitiveHelper.parseDouble(plainRawSet[l]);
                                                        }
                                                        catch ($ex$) {
                                                            if ($ex$ instanceof Error) {
                                                                var e = $ex$;
                                                                console.error(e['stack']);
                                                                ;
                                                            }
                                                            else {
                                                                throw $ex$;
                                                            }
                                                        }
                                                    }
                                                    raw.setPrimitiveType(metaElement.index(), convertedRaw, current.metaClass());
                                                    break;
                                                default:
                                                    var converted = null;
                                                    var rawPayload = p_param.get(metaElement.metaName()).toString();
                                                    switch (metaAttId) {
                                                        case org.kevoree.modeling.meta.KPrimitiveTypes.STRING_ID:
                                                            converted = org.kevoree.modeling.format.json.JsonString.unescape(rawPayload);
                                                            break;
                                                        case org.kevoree.modeling.meta.KPrimitiveTypes.LONG_ID:
                                                            converted = org.kevoree.modeling.util.PrimitiveHelper.parseLong(rawPayload);
                                                            break;
                                                        case org.kevoree.modeling.meta.KPrimitiveTypes.INT_ID:
                                                            converted = org.kevoree.modeling.util.PrimitiveHelper.parseInt(rawPayload);
                                                            break;
                                                        case org.kevoree.modeling.meta.KPrimitiveTypes.BOOL_ID:
                                                            converted = org.kevoree.modeling.util.PrimitiveHelper.parseBoolean(rawPayload);
                                                            break;
                                                        case org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE_ID:
                                                            converted = org.kevoree.modeling.util.PrimitiveHelper.parseDouble(rawPayload);
                                                            break;
                                                    }
                                                    raw.setPrimitiveType(metaElement.index(), converted, current.metaClass());
                                                    break;
                                            }
                                        }
                                        else {
                                            if (metaElement != null && metaElement.metaType() == org.kevoree.modeling.meta.MetaType.RELATION) {
                                                try {
                                                    raw.setPrimitiveType(metaElement.index(), org.kevoree.modeling.format.json.JsonModelLoader.transposeArr(payload_content, p_mappedKeys), current.metaClass());
                                                }
                                                catch ($ex$) {
                                                    if ($ex$ instanceof Error) {
                                                        var e = $ex$;
                                                        console.error(e['stack']);
                                                        ;
                                                    }
                                                    else {
                                                        throw $ex$;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            });
                        };
                        JsonModelLoader.transposeArr = function (plainRawSet, p_mappedKeys) {
                            if (plainRawSet == null) {
                                return null;
                            }
                            var sizeOfL = org.kevoree.modeling.format.json.JsonModelLoader.sizeOfList(plainRawSet);
                            var convertedRaw = new Float64Array(sizeOfL);
                            for (var l = 0; l < sizeOfL; l++) {
                                try {
                                    var converted = org.kevoree.modeling.util.PrimitiveHelper.parseLong(org.kevoree.modeling.format.json.JsonModelLoader.getString(plainRawSet, l));
                                    if (p_mappedKeys.contains(converted)) {
                                        converted = p_mappedKeys.get(converted);
                                    }
                                    convertedRaw[l] = converted;
                                }
                                catch ($ex$) {
                                    if ($ex$ instanceof Error) {
                                        var e = $ex$;
                                        console.error(e['stack']);
                                        ;
                                    }
                                    else {
                                        throw $ex$;
                                    }
                                }
                            }
                            return convertedRaw;
                        };
                        JsonModelLoader.sizeOfList = function (plainRawSet) {
                            if (plainRawSet != null && plainRawSet != undefined) {
                                if (plainRawSet.size != undefined) {
                                    return plainRawSet.size();
                                }
                                else {
                                    return plainRawSet.length;
                                }
                            }
                        };
                        JsonModelLoader.getString = function (plainRawSet, l) {
                            if (plainRawSet.get != undefined) {
                                return plainRawSet.get(l);
                            }
                            else {
                                return plainRawSet[l];
                            }
                        };
                        return JsonModelLoader;
                    })();
                    json.JsonModelLoader = JsonModelLoader;
                    var JsonModelSerializer = (function () {
                        function JsonModelSerializer() {
                        }
                        JsonModelSerializer.serialize = function (model, callback) {
                            model._manager.getRoot(model.universe(), model.now(), function (rootObj) {
                                var isRoot = false;
                                if (rootObj != null) {
                                    isRoot = rootObj.uuid() == model.uuid();
                                }
                                var builder = new java.lang.StringBuilder();
                                builder.append("[\n");
                                org.kevoree.modeling.format.json.JsonModelSerializer.printJSON(model, builder, isRoot);
                                model.visit(function (elem) {
                                    var isRoot2 = false;
                                    if (rootObj != null) {
                                        isRoot2 = rootObj.uuid() == elem.uuid();
                                    }
                                    builder.append(",\n");
                                    try {
                                        org.kevoree.modeling.format.json.JsonModelSerializer.printJSON(elem, builder, isRoot2);
                                    }
                                    catch ($ex$) {
                                        if ($ex$ instanceof Error) {
                                            var e = $ex$;
                                            console.error(e['stack']);
                                            ;
                                            builder.append("{}");
                                        }
                                        else {
                                            throw $ex$;
                                        }
                                    }
                                    return org.kevoree.modeling.traversal.visitor.KVisitResult.CONTINUE;
                                }, function (throwable) {
                                    builder.append("\n]\n");
                                    callback(builder.toString());
                                });
                            });
                        };
                        JsonModelSerializer.printJSON = function (elem, builder, isRoot) {
                            if (elem != null) {
                                var raw = elem._manager.closestChunk(elem.universe(), elem.now(), elem.uuid(), elem.metaClass(), elem.previousResolved());
                                if (raw != null) {
                                    builder.append(org.kevoree.modeling.format.json.JsonRaw.encode(raw, elem.uuid(), elem.metaClass(), isRoot));
                                }
                            }
                        };
                        return JsonModelSerializer;
                    })();
                    json.JsonModelSerializer = JsonModelSerializer;
                    var JsonObjectReader = (function () {
                        function JsonObjectReader() {
                        }
                        JsonObjectReader.prototype.parseObject = function (payload) {
                            this.readObject = JSON.parse(payload);
                        };
                        JsonObjectReader.prototype.get = function (name) {
                            return this.readObject[name];
                        };
                        JsonObjectReader.prototype.getAsStringArray = function (name) {
                            return this.readObject[name];
                        };
                        JsonObjectReader.prototype.keys = function () {
                            var keysArr = [];
                            for (var key in this.readObject) {
                                keysArr.push(key);
                            }
                            return keysArr;
                        };
                        return JsonObjectReader;
                    })();
                    json.JsonObjectReader = JsonObjectReader;
                    var JsonRaw = (function () {
                        function JsonRaw() {
                        }
                        JsonRaw.encode = function (raw, uuid, p_metaClass, isRoot) {
                            var builder = new java.lang.StringBuilder();
                            builder.append("{\"@class\":\"");
                            builder.append(p_metaClass.metaName());
                            builder.append("\",\"@uuid\":");
                            builder.append(uuid);
                            if (isRoot) {
                                builder.append(",\"" + org.kevoree.modeling.format.json.JsonFormat.KEY_ROOT + "\":true");
                            }
                            var metaElements = p_metaClass.metaElements();
                            for (var i = 0; i < metaElements.length; i++) {
                                var loopMeta = metaElements[i];
                                if (loopMeta != null && loopMeta.metaType().equals(org.kevoree.modeling.meta.MetaType.ATTRIBUTE)) {
                                    var metaAttribute = loopMeta;
                                    var metaAttId = metaAttribute.attributeTypeId();
                                    if (metaAttId == org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID) {
                                        var inferAtt = raw.getDoubleArray(loopMeta.index(), p_metaClass);
                                        if (inferAtt != null) {
                                            builder.append(",\"");
                                            builder.append(loopMeta.metaName());
                                            builder.append("\":[");
                                            for (var j = 0; j < inferAtt.length; j++) {
                                                if (j != 0) {
                                                    builder.append(",");
                                                }
                                                builder.append(inferAtt[j]);
                                            }
                                            builder.append("]");
                                        }
                                    }
                                    else {
                                        var payload_res = raw.getPrimitiveType(loopMeta.index(), p_metaClass);
                                        if (payload_res != null) {
                                            builder.append(",\"");
                                            builder.append(loopMeta.metaName());
                                            builder.append("\":\"");
                                            if (metaAttId == org.kevoree.modeling.meta.KPrimitiveTypes.STRING_ID) {
                                                builder.append(org.kevoree.modeling.format.json.JsonString.encode(payload_res.toString()));
                                            }
                                            else {
                                                builder.append(payload_res.toString());
                                            }
                                            builder.append("\"");
                                        }
                                    }
                                }
                                else {
                                    if (loopMeta != null && loopMeta.metaType().equals(org.kevoree.modeling.meta.MetaType.RELATION)) {
                                        var refPayload = raw.getLongArray(loopMeta.index(), p_metaClass);
                                        if (refPayload != null) {
                                            builder.append(",\"");
                                            builder.append(loopMeta.metaName());
                                            builder.append("\":[");
                                            for (var j = 0; j < refPayload.length; j++) {
                                                if (j != 0) {
                                                    builder.append(",");
                                                }
                                                builder.append(refPayload[j]);
                                            }
                                            builder.append("]");
                                        }
                                    }
                                }
                            }
                            builder.append("}");
                            return builder.toString();
                        };
                        return JsonRaw;
                    })();
                    json.JsonRaw = JsonRaw;
                    var JsonString = (function () {
                        function JsonString() {
                        }
                        JsonString.encodeBuffer = function (buffer, chain) {
                            if (chain == null) {
                                return;
                            }
                            var i = 0;
                            while (i < chain.length) {
                                var ch = chain.charAt(i);
                                if (ch == '"') {
                                    buffer.append(JsonString.ESCAPE_CHAR);
                                    buffer.append('"');
                                }
                                else {
                                    if (ch == JsonString.ESCAPE_CHAR) {
                                        buffer.append(JsonString.ESCAPE_CHAR);
                                        buffer.append(JsonString.ESCAPE_CHAR);
                                    }
                                    else {
                                        if (ch == '\n') {
                                            buffer.append(JsonString.ESCAPE_CHAR);
                                            buffer.append('n');
                                        }
                                        else {
                                            if (ch == '\r') {
                                                buffer.append(JsonString.ESCAPE_CHAR);
                                                buffer.append('r');
                                            }
                                            else {
                                                if (ch == '\t') {
                                                    buffer.append(JsonString.ESCAPE_CHAR);
                                                    buffer.append('t');
                                                }
                                                else {
                                                    if (ch == '\u2028') {
                                                        buffer.append(JsonString.ESCAPE_CHAR);
                                                        buffer.append('u');
                                                        buffer.append('2');
                                                        buffer.append('0');
                                                        buffer.append('2');
                                                        buffer.append('8');
                                                    }
                                                    else {
                                                        if (ch == '\u2029') {
                                                            buffer.append(JsonString.ESCAPE_CHAR);
                                                            buffer.append('u');
                                                            buffer.append('2');
                                                            buffer.append('0');
                                                            buffer.append('2');
                                                            buffer.append('9');
                                                        }
                                                        else {
                                                            buffer.append(ch);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                i = i + 1;
                            }
                        };
                        JsonString.encode = function (p_chain) {
                            var sb = new java.lang.StringBuilder();
                            org.kevoree.modeling.format.json.JsonString.encodeBuffer(sb, p_chain);
                            return sb.toString();
                        };
                        JsonString.unescape = function (p_src) {
                            if (p_src == null) {
                                return null;
                            }
                            if (p_src.length == 0) {
                                return p_src;
                            }
                            var builder = null;
                            var i = 0;
                            while (i < p_src.length) {
                                var current = p_src.charAt(i);
                                if (current == JsonString.ESCAPE_CHAR) {
                                    if (builder == null) {
                                        builder = new java.lang.StringBuilder();
                                        builder.append(p_src.substring(0, i));
                                    }
                                    i++;
                                    var current2 = p_src.charAt(i);
                                    switch (current2) {
                                        case '"':
                                            builder.append('\"');
                                            break;
                                        case '\\':
                                            builder.append(current2);
                                            break;
                                        case '/':
                                            builder.append(current2);
                                            break;
                                        case 'b':
                                            builder.append('\b');
                                            break;
                                        case 'f':
                                            builder.append('\f');
                                            break;
                                        case 'n':
                                            builder.append('\n');
                                            break;
                                        case 'r':
                                            builder.append('\r');
                                            break;
                                        case 't':
                                            builder.append('\t');
                                            break;
                                        case '{':
                                            builder.append("\\{");
                                            break;
                                        case '}':
                                            builder.append("\\}");
                                            break;
                                        case '[':
                                            builder.append("\\[");
                                            break;
                                        case ']':
                                            builder.append("\\]");
                                            break;
                                        case ',':
                                            builder.append("\\,");
                                            break;
                                    }
                                }
                                else {
                                    if (builder != null) {
                                        builder = builder.append(current);
                                    }
                                }
                                i++;
                            }
                            if (builder != null) {
                                return builder.toString();
                            }
                            else {
                                return p_src;
                            }
                        };
                        JsonString.ESCAPE_CHAR = '\\';
                        return JsonString;
                    })();
                    json.JsonString = JsonString;
                })(json = format.json || (format.json = {}));
            })(format = modeling.format || (modeling.format = {}));
            var infer;
            (function (infer) {
                var KInferAlgFactory = (function () {
                    function KInferAlgFactory() {
                    }
                    KInferAlgFactory.build = function (name) {
                        if (org.kevoree.modeling.util.PrimitiveHelper.equals(name, "BinaryPerceptron")) {
                            return new org.kevoree.modeling.infer.impl.BinaryPerceptronAlg();
                        }
                        else {
                            if (org.kevoree.modeling.util.PrimitiveHelper.equals(name, "LinearRegression")) {
                                return new org.kevoree.modeling.infer.impl.LinearRegressionAlg();
                            }
                            else {
                                if (org.kevoree.modeling.util.PrimitiveHelper.equals(name, "KMeanCluster")) {
                                    return new org.kevoree.modeling.infer.impl.KMeanClusterAlg();
                                }
                                else {
                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(name, "GaussianProfiler")) {
                                        return new org.kevoree.modeling.infer.impl.GaussianProfiler();
                                    }
                                    else {
                                        if (org.kevoree.modeling.util.PrimitiveHelper.equals(name, "GaussianClassifier")) {
                                            return new org.kevoree.modeling.infer.impl.GaussianClassifierAlg();
                                        }
                                        else {
                                            if (org.kevoree.modeling.util.PrimitiveHelper.equals(name, "GaussianAnomalyDetection")) {
                                                return new org.kevoree.modeling.infer.impl.GaussianAnomalyDetectionAlg();
                                            }
                                            else {
                                                if (org.kevoree.modeling.util.PrimitiveHelper.equals(name, "Winnow")) {
                                                    return new org.kevoree.modeling.infer.impl.WinnowAlg();
                                                }
                                                else {
                                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(name, "EmptyInfer")) {
                                                        return new org.kevoree.modeling.infer.impl.EmptyInfer();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        return null;
                    };
                    return KInferAlgFactory;
                })();
                infer.KInferAlgFactory = KInferAlgFactory;
                var impl;
                (function (impl) {
                    var BinaryPerceptronAlg = (function () {
                        function BinaryPerceptronAlg() {
                            this.iterations = 5;
                            this.alpha = 1;
                            this.rand = new java.util.Random();
                        }
                        BinaryPerceptronAlg.prototype.train = function (trainingSet, expectedResultSet, origin, manager) {
                            var ks = manager.preciseChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = origin.metaClass().inputs().length + 1;
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                ks.extendDoubleArray(origin.metaClass().dependencies().index(), size, origin.metaClass());
                                for (var i = 0; i < size; i++) {
                                    ks.setDoubleArrayElem(dependenciesIndex, i, this.rand.nextDouble() * 0.1, origin.metaClass());
                                }
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            for (var iter = 0; iter < this.iterations; iter++) {
                                for (var row = 0; row < trainingSet.rows(); row++) {
                                    var h = this.sigmoid(trainingSet, row, state);
                                    var error = this.alpha * (expectedResultSet.get(row, 0) - h);
                                    for (var j = 0; j < origin.metaClass().inputs().length; j++) {
                                        state.add(j, error * trainingSet.get(row, j));
                                    }
                                    state.add(origin.metaClass().inputs().length, error);
                                }
                            }
                        };
                        BinaryPerceptronAlg.prototype.addUp = function (features, row, state) {
                            var res = 0;
                            for (var i = 0; i < features.columns(); i++) {
                                res = res + state.get(i) * features.get(row, i);
                            }
                            res = res + state.get(features.columns());
                            return res;
                        };
                        BinaryPerceptronAlg.prototype.sigmoid = function (features, row, state) {
                            return 1 / (1 + Math.exp(-this.addUp(features, row, state)));
                        };
                        BinaryPerceptronAlg.prototype.infer = function (features, origin, manager) {
                            var ks = manager.closestChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = origin.metaClass().inputs().length + 1;
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                return null;
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            var result = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(features.rows(), 1);
                            for (var inst = 0; inst < features.rows(); inst++) {
                                if (this.sigmoid(features, inst, state) >= 0.5) {
                                    result.set(inst, 0, 1.0);
                                }
                                else {
                                    result.set(inst, 0, 0);
                                }
                            }
                            return result;
                        };
                        return BinaryPerceptronAlg;
                    })();
                    impl.BinaryPerceptronAlg = BinaryPerceptronAlg;
                    var EmptyInfer = (function () {
                        function EmptyInfer() {
                        }
                        EmptyInfer.prototype.train = function (trainingSet, expectedResultSet, currentInferObject, manager) {
                        };
                        EmptyInfer.prototype.infer = function (features, currentInferObject, manager) {
                            var res = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(features.rows(), currentInferObject.metaClass().outputs().length);
                            for (var i = 0; i < res.rows() * res.columns(); i++) {
                                res.setAtIndex(i, 42);
                            }
                            return res;
                        };
                        return EmptyInfer;
                    })();
                    impl.EmptyInfer = EmptyInfer;
                    var GaussianAnomalyDetectionAlg = (function () {
                        function GaussianAnomalyDetectionAlg() {
                            this._alpha = 0.5;
                        }
                        GaussianAnomalyDetectionAlg.prototype.getProba = function (features, row, state, meta) {
                            var prob = 0;
                            var avg = this.getAvg(state, meta);
                            var variance = this.getVariance(state, avg, meta);
                            prob = org.kevoree.modeling.util.maths.Distribution.gaussianArray(features, row, avg, variance);
                            return prob;
                        };
                        GaussianAnomalyDetectionAlg.prototype.getAvg = function (state, meta) {
                            var avg = new Float64Array(meta.origin().inputs().length);
                            var total = state.get(meta.origin().inputs().length * GaussianAnomalyDetectionAlg.NUMOFFIELDS);
                            if (total != 0) {
                                for (var i = 0; i < meta.origin().inputs().length; i++) {
                                    avg[i] = state.get(GaussianAnomalyDetectionAlg.NUMOFFIELDS * i + GaussianAnomalyDetectionAlg.SUM) / total;
                                }
                            }
                            return avg;
                        };
                        GaussianAnomalyDetectionAlg.prototype.getVariance = function (state, avg, meta) {
                            var variances = new Float64Array(meta.origin().inputs().length);
                            var total = state.get(meta.origin().inputs().length * GaussianAnomalyDetectionAlg.NUMOFFIELDS);
                            if (total != 0) {
                                for (var i = 0; i < meta.origin().inputs().length; i++) {
                                    variances[i] = state.get(GaussianAnomalyDetectionAlg.NUMOFFIELDS * i + GaussianAnomalyDetectionAlg.SUMSQUARE) / total - avg[i] * avg[i];
                                }
                            }
                            return variances;
                        };
                        GaussianAnomalyDetectionAlg.prototype.train = function (trainingSet, expectedResultSet, origin, manager) {
                            var ks = manager.preciseChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var alpha = origin.getByName("alpha");
                            if (alpha == null) {
                                alpha = this._alpha;
                            }
                            var length = origin.metaClass().inputs().length;
                            var size = (length * GaussianAnomalyDetectionAlg.NUMOFFIELDS + 2);
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                ks.extendDoubleArray(origin.metaClass().dependencies().index(), size, origin.metaClass());
                                for (var i = 0; i < size; i++) {
                                    ks.setDoubleArrayElem(dependenciesIndex, i, 0, origin.metaClass());
                                }
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            for (var i = 0; i < trainingSet.rows(); i++) {
                                var output = expectedResultSet.get(i, 0);
                                if (output == 0) {
                                    for (var j = 0; j < origin.metaClass().inputs().length; j++) {
                                        if (state.get(length * GaussianAnomalyDetectionAlg.NUMOFFIELDS) == 0) {
                                            state.set(j * GaussianAnomalyDetectionAlg.NUMOFFIELDS + GaussianAnomalyDetectionAlg.MIN, trainingSet.get(i, j));
                                            state.set(j * GaussianAnomalyDetectionAlg.NUMOFFIELDS + GaussianAnomalyDetectionAlg.MAX, trainingSet.get(i, j));
                                            state.set(j * GaussianAnomalyDetectionAlg.NUMOFFIELDS + GaussianAnomalyDetectionAlg.SUM, trainingSet.get(i, j));
                                            state.set(j * GaussianAnomalyDetectionAlg.NUMOFFIELDS + GaussianAnomalyDetectionAlg.SUMSQUARE, trainingSet.get(i, j) * trainingSet.get(i, j));
                                        }
                                        else {
                                            if (trainingSet.get(i, j) < state.get(j * GaussianAnomalyDetectionAlg.NUMOFFIELDS + GaussianAnomalyDetectionAlg.MIN)) {
                                                state.set(j * GaussianAnomalyDetectionAlg.NUMOFFIELDS + GaussianAnomalyDetectionAlg.MIN, trainingSet.get(i, j));
                                            }
                                            if (trainingSet.get(i, j) > state.get(j * GaussianAnomalyDetectionAlg.NUMOFFIELDS + GaussianAnomalyDetectionAlg.MAX)) {
                                                state.set(j * GaussianAnomalyDetectionAlg.NUMOFFIELDS + GaussianAnomalyDetectionAlg.MAX, trainingSet.get(i, j));
                                            }
                                            state.add(j * GaussianAnomalyDetectionAlg.NUMOFFIELDS + GaussianAnomalyDetectionAlg.SUM, trainingSet.get(i, j));
                                            state.add(j * GaussianAnomalyDetectionAlg.NUMOFFIELDS + GaussianAnomalyDetectionAlg.SUMSQUARE, trainingSet.get(i, j) * trainingSet.get(i, j));
                                        }
                                    }
                                    state.add(length * GaussianAnomalyDetectionAlg.NUMOFFIELDS, 1);
                                    var newEpsilon = this.getProba(trainingSet, i, state, origin.metaClass().dependencies());
                                    var epsilon = state.get(length * GaussianAnomalyDetectionAlg.NUMOFFIELDS + 1);
                                    if (newEpsilon < epsilon) {
                                        state.set(length * GaussianAnomalyDetectionAlg.NUMOFFIELDS + 1, epsilon + alpha * (newEpsilon - epsilon));
                                    }
                                }
                                else {
                                    var newEpsilon = this.getProba(trainingSet, i, state, origin.metaClass().dependencies());
                                    var epsilon = state.get(length * GaussianAnomalyDetectionAlg.NUMOFFIELDS + 1);
                                    if (newEpsilon > epsilon) {
                                        state.set(length * GaussianAnomalyDetectionAlg.NUMOFFIELDS + 1, epsilon + alpha * (newEpsilon - epsilon));
                                    }
                                }
                            }
                        };
                        GaussianAnomalyDetectionAlg.prototype.infer = function (features, origin, manager) {
                            var ks = manager.closestChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var length = origin.metaClass().inputs().length;
                            var size = (length * GaussianAnomalyDetectionAlg.NUMOFFIELDS + 2);
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                return null;
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            var result = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(features.rows(), 1);
                            var epsilon = state.get(length * GaussianAnomalyDetectionAlg.NUMOFFIELDS + 1);
                            for (var i = 0; i < features.rows(); i++) {
                                if (this.getProba(features, i, state, origin.metaClass().dependencies()) >= epsilon) {
                                    result.set(i, 0, 0);
                                }
                                else {
                                    result.set(i, 0, 1);
                                }
                            }
                            return result;
                        };
                        GaussianAnomalyDetectionAlg.MIN = 0;
                        GaussianAnomalyDetectionAlg.MAX = 1;
                        GaussianAnomalyDetectionAlg.SUM = 2;
                        GaussianAnomalyDetectionAlg.SUMSQUARE = 3;
                        GaussianAnomalyDetectionAlg.NUMOFFIELDS = 4;
                        return GaussianAnomalyDetectionAlg;
                    })();
                    impl.GaussianAnomalyDetectionAlg = GaussianAnomalyDetectionAlg;
                    var GaussianClassifierAlg = (function () {
                        function GaussianClassifierAlg() {
                        }
                        GaussianClassifierAlg.prototype.getIndex = function (input, output, field, meta) {
                            return output * (GaussianClassifierAlg.NUMOFFIELDS * meta.origin().inputs().length + 1) + GaussianClassifierAlg.NUMOFFIELDS * input + field;
                        };
                        GaussianClassifierAlg.prototype.getCounter = function (output, meta) {
                            return output * (GaussianClassifierAlg.NUMOFFIELDS * meta.origin().inputs().length + 1) + GaussianClassifierAlg.NUMOFFIELDS * meta.origin().inputs().length;
                        };
                        GaussianClassifierAlg.prototype.getAvg = function (output, state, meta) {
                            var avg = new Float64Array(meta.origin().inputs().length);
                            var total = state.get(this.getCounter(output, meta));
                            if (total != 0) {
                                for (var i = 0; i < meta.origin().inputs().length; i++) {
                                    avg[i] = state.get(this.getIndex(i, output, GaussianClassifierAlg.SUM, meta)) / total;
                                }
                            }
                            return avg;
                        };
                        GaussianClassifierAlg.prototype.getVariance = function (output, state, avg, meta) {
                            var variances = new Float64Array(meta.origin().inputs().length);
                            var total = state.get(this.getCounter(output, meta));
                            if (total != 0) {
                                for (var i = 0; i < meta.origin().inputs().length; i++) {
                                    variances[i] = state.get(this.getIndex(i, output, GaussianClassifierAlg.SUMSQUARE, meta)) / total - avg[i] * avg[i];
                                }
                            }
                            return variances;
                        };
                        GaussianClassifierAlg.prototype.train = function (trainingSet, expectedResultSet, origin, manager) {
                            var outType = origin.metaClass().outputs()[0].attributeTypeId();
                            var maxOutput = (origin.manager().model().metaModel().metaTypes()[outType]).literals().length;
                            var ks = manager.preciseChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = (maxOutput + 1) * (origin.metaClass().inputs().length * GaussianClassifierAlg.NUMOFFIELDS + 1);
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                ks.extendDoubleArray(origin.metaClass().dependencies().index(), size, origin.metaClass());
                                for (var i = 0; i < size; i++) {
                                    ks.setDoubleArrayElem(dependenciesIndex, i, 0, origin.metaClass());
                                }
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            for (var i = 0; i < trainingSet.rows(); i++) {
                                var output = expectedResultSet.get(i, 0);
                                for (var j = 0; j < origin.metaClass().inputs().length; j++) {
                                    if (state.get(this.getCounter(output, origin.metaClass().dependencies())) == 0) {
                                        state.set(this.getIndex(j, output, GaussianClassifierAlg.MIN, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.set(this.getIndex(j, output, GaussianClassifierAlg.MAX, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.set(this.getIndex(j, output, GaussianClassifierAlg.SUM, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.set(this.getIndex(j, output, GaussianClassifierAlg.SUMSQUARE, origin.metaClass().dependencies()), trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                    else {
                                        if (trainingSet.get(i, j) < state.get(this.getIndex(j, output, GaussianClassifierAlg.MIN, origin.metaClass().dependencies()))) {
                                            state.set(this.getIndex(j, output, GaussianClassifierAlg.MIN, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        }
                                        if (trainingSet.get(i, j) > state.get(this.getIndex(j, output, GaussianClassifierAlg.MAX, origin.metaClass().dependencies()))) {
                                            state.set(this.getIndex(j, output, GaussianClassifierAlg.MAX, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        }
                                        state.add(this.getIndex(j, output, GaussianClassifierAlg.SUM, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.add(this.getIndex(j, output, GaussianClassifierAlg.SUMSQUARE, origin.metaClass().dependencies()), trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                    if (state.get(this.getCounter(maxOutput, origin.metaClass().dependencies())) == 0) {
                                        state.set(this.getIndex(j, maxOutput, GaussianClassifierAlg.MIN, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.set(this.getIndex(j, maxOutput, GaussianClassifierAlg.MAX, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.set(this.getIndex(j, maxOutput, GaussianClassifierAlg.SUM, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.set(this.getIndex(j, maxOutput, GaussianClassifierAlg.SUMSQUARE, origin.metaClass().dependencies()), trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                    else {
                                        if (trainingSet.get(i, j) < state.get(this.getIndex(j, maxOutput, GaussianClassifierAlg.MIN, origin.metaClass().dependencies()))) {
                                            state.set(this.getIndex(j, maxOutput, GaussianClassifierAlg.MIN, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        }
                                        if (trainingSet.get(i, j) > state.get(this.getIndex(j, maxOutput, GaussianClassifierAlg.MAX, origin.metaClass().dependencies()))) {
                                            state.set(this.getIndex(j, maxOutput, GaussianClassifierAlg.MAX, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        }
                                        state.add(this.getIndex(j, maxOutput, GaussianClassifierAlg.SUM, origin.metaClass().dependencies()), trainingSet.get(i, j));
                                        state.add(this.getIndex(j, maxOutput, GaussianClassifierAlg.SUMSQUARE, origin.metaClass().dependencies()), trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                }
                                state.add(this.getCounter(output, origin.metaClass().dependencies()), 1);
                                state.add(this.getCounter(maxOutput, origin.metaClass().dependencies()), 1);
                            }
                        };
                        GaussianClassifierAlg.prototype.infer = function (features, origin, manager) {
                            var outType = origin.metaClass().outputs()[0].attributeTypeId();
                            var maxOutput = (origin.manager().model().metaModel().metaTypes()[outType]).literals().length;
                            var ks = manager.closestChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = (maxOutput + 1) * (origin.metaClass().inputs().length * GaussianClassifierAlg.NUMOFFIELDS + 1);
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                return null;
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            var result = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(features.rows(), 1);
                            for (var j = 0; j < features.rows(); j++) {
                                var maxprob = 0;
                                var prob = 0;
                                for (var output = 0; output < maxOutput; output++) {
                                    prob = this.getProba(features, j, output, state, origin.metaClass().dependencies());
                                    if (prob > maxprob) {
                                        maxprob = prob;
                                        result.set(j, 0, output);
                                    }
                                }
                            }
                            return result;
                        };
                        GaussianClassifierAlg.prototype.getProba = function (features, row, output, state, meta) {
                            var prob = 0;
                            var avg = this.getAvg(output, state, meta);
                            var variance = this.getVariance(output, state, avg, meta);
                            prob = org.kevoree.modeling.util.maths.Distribution.gaussianArray(features, row, avg, variance);
                            return prob;
                        };
                        GaussianClassifierAlg.prototype.getAllProba = function (features, state, meta, maxOutput) {
                            var results = new Float64Array(maxOutput);
                            for (var i = 0; i < maxOutput; i++) {
                                var avg = this.getAvg(i, state, meta);
                                var variance = this.getVariance(i, state, avg, meta);
                                results[i] = org.kevoree.modeling.util.maths.Distribution.gaussian(features, avg, variance);
                            }
                            return results;
                        };
                        GaussianClassifierAlg.MIN = 0;
                        GaussianClassifierAlg.MAX = 1;
                        GaussianClassifierAlg.SUM = 2;
                        GaussianClassifierAlg.SUMSQUARE = 3;
                        GaussianClassifierAlg.NUMOFFIELDS = 4;
                        return GaussianClassifierAlg;
                    })();
                    impl.GaussianClassifierAlg = GaussianClassifierAlg;
                    var GaussianProfiler = (function () {
                        function GaussianProfiler() {
                            this.maxTimeSlots = 24;
                        }
                        GaussianProfiler.prototype.getIndex = function (input, output, field, meta) {
                            return output * (GaussianProfiler.NUMOFFIELDS * (meta.origin().inputs().length - 1) + 1) + GaussianProfiler.NUMOFFIELDS * input + field;
                        };
                        GaussianProfiler.prototype.getCounter = function (output, meta) {
                            return output * (GaussianProfiler.NUMOFFIELDS * (meta.origin().inputs().length - 1) + 1) + GaussianProfiler.NUMOFFIELDS * (meta.origin().inputs().length - 1);
                        };
                        GaussianProfiler.prototype.getAvg = function (output, state, meta) {
                            var avg = new Float64Array(meta.origin().inputs().length);
                            var total = state.get(this.getCounter(output, meta));
                            if (total != 0) {
                                for (var i = 0; i < meta.origin().inputs().length; i++) {
                                    avg[i] = state.get(this.getIndex(i, output, GaussianProfiler.SUM, meta)) / total;
                                }
                            }
                            return avg;
                        };
                        GaussianProfiler.prototype.getVariance = function (output, state, avg, meta) {
                            var variances = new Float64Array(meta.origin().inputs().length);
                            var total = state.get(this.getCounter(output, meta));
                            if (total != 0) {
                                for (var i = 0; i < meta.origin().inputs().length; i++) {
                                    variances[i] = state.get(this.getIndex(i, output, GaussianProfiler.SUMSQUARE, meta)) / total - avg[i] * avg[i];
                                }
                            }
                            return variances;
                        };
                        GaussianProfiler.prototype.train = function (trainingSet, expectedResult, origin, manager) {
                            var ks = manager.preciseChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dep = origin.metaClass().dependencies();
                            var dependenciesIndex = dep.index();
                            var size = (this.maxTimeSlots + 1) * ((origin.metaClass().inputs().length - 1) * GaussianProfiler.NUMOFFIELDS + 1);
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                ks.extendDoubleArray(dep.index(), size, origin.metaClass());
                                for (var i = 0; i < size; i++) {
                                    ks.setDoubleArrayElem(dependenciesIndex, i, 0, origin.metaClass());
                                }
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, dep.index(), ks, origin.metaClass());
                            for (var i = 0; i < trainingSet.rows(); i++) {
                                var output = trainingSet.get(i, 0);
                                for (var j = 1; j < origin.metaClass().inputs().length; j++) {
                                    if (state.get(this.getCounter(output, dep)) == 0) {
                                        state.set(this.getIndex(j - 1, output, GaussianProfiler.MIN, dep), trainingSet.get(i, j));
                                        state.set(this.getIndex(j - 1, output, GaussianProfiler.MAX, dep), trainingSet.get(i, j));
                                        state.set(this.getIndex(j - 1, output, GaussianProfiler.SUM, dep), trainingSet.get(i, j));
                                        state.set(this.getIndex(j - 1, output, GaussianProfiler.SUMSQUARE, dep), trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                    else {
                                        if (trainingSet.get(i, j) < state.get(this.getIndex(j - 1, output, GaussianProfiler.MIN, dep))) {
                                            state.set(this.getIndex(j - 1, output, GaussianProfiler.MIN, dep), trainingSet.get(i, j));
                                        }
                                        if (trainingSet.get(i, j) > state.get(this.getIndex(j - 1, output, GaussianProfiler.MAX, dep))) {
                                            state.set(this.getIndex(j - 1, output, GaussianProfiler.MAX, dep), trainingSet.get(i, j));
                                        }
                                        state.add(this.getIndex(j - 1, output, GaussianProfiler.SUM, dep), trainingSet.get(i, j));
                                        state.add(this.getIndex(j - 1, output, GaussianProfiler.SUMSQUARE, dep), trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                    if (state.get(this.getCounter(this.maxTimeSlots, dep)) == 0) {
                                        state.set(this.getIndex(j - 1, this.maxTimeSlots, GaussianProfiler.MIN, dep), trainingSet.get(i, j));
                                        state.set(this.getIndex(j - 1, this.maxTimeSlots, GaussianProfiler.MAX, dep), trainingSet.get(i, j));
                                        state.set(this.getIndex(j - 1, this.maxTimeSlots, GaussianProfiler.SUM, dep), trainingSet.get(i, j));
                                        state.set(this.getIndex(j - 1, this.maxTimeSlots, GaussianProfiler.SUMSQUARE, dep), trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                    else {
                                        if (trainingSet.get(i, j) < state.get(this.getIndex(j - 1, this.maxTimeSlots, GaussianProfiler.MIN, dep))) {
                                            state.set(this.getIndex(j - 1, this.maxTimeSlots, GaussianProfiler.MIN, dep), trainingSet.get(i, j));
                                        }
                                        if (trainingSet.get(i, j) > state.get(this.getIndex(j - 1, this.maxTimeSlots, GaussianProfiler.MAX, dep))) {
                                            state.set(this.getIndex(j - 1, this.maxTimeSlots, GaussianProfiler.MAX, dep), trainingSet.get(i, j));
                                        }
                                        state.add(this.getIndex(j - 1, this.maxTimeSlots, GaussianProfiler.SUM, dep), trainingSet.get(i, j));
                                        state.add(this.getIndex(j - 1, this.maxTimeSlots, GaussianProfiler.SUMSQUARE, dep), trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                }
                                state.add(this.getCounter(output, dep), 1);
                                state.add(this.getCounter(this.maxTimeSlots, dep), 1);
                            }
                        };
                        GaussianProfiler.prototype.infer = function (features, origin, manager) {
                            var ks = manager.closestChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dep = origin.metaClass().dependencies();
                            var dependenciesIndex = dep.index();
                            var size = (this.maxTimeSlots + 1) * ((origin.metaClass().inputs().length - 1) * GaussianProfiler.NUMOFFIELDS + 1);
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                return null;
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, dep.index(), ks, origin.metaClass());
                            var result = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(features.rows(), 1);
                            for (var j = 0; j < features.rows(); j++) {
                                var output = features.get(j, 0);
                                var values = new Float64Array(features.columns() - 1);
                                for (var i = 0; i < features.columns() - 1; i++) {
                                    values[i] = features.get(j, i + 1);
                                }
                                if (values[0] >= 0) {
                                    result.set(j, 0, this.getProba(values, output, state, dep));
                                }
                                else {
                                    if (values[0] == -1) {
                                        result.set(j, 0, this.getAvg(output, state, dep)[0]);
                                    }
                                    else {
                                        if (values[0] == -2) {
                                            result.set(j, 0, state.get(this.getIndex(0, output, GaussianProfiler.MIN, dep)));
                                        }
                                        else {
                                            if (values[0] == -3) {
                                                result.set(j, 0, state.get(this.getIndex(0, output, GaussianProfiler.MAX, dep)));
                                            }
                                        }
                                    }
                                }
                            }
                            return result;
                        };
                        GaussianProfiler.prototype.getProba = function (features, output, state, meta) {
                            var prob = 0;
                            var avg = this.getAvg(output, state, meta);
                            var variance = this.getVariance(output, state, avg, meta);
                            prob = org.kevoree.modeling.util.maths.Distribution.gaussian(features, avg, variance);
                            return prob;
                        };
                        GaussianProfiler.MIN = 0;
                        GaussianProfiler.MAX = 1;
                        GaussianProfiler.SUM = 2;
                        GaussianProfiler.SUMSQUARE = 3;
                        GaussianProfiler.NUMOFFIELDS = 4;
                        return GaussianProfiler;
                    })();
                    impl.GaussianProfiler = GaussianProfiler;
                    var KMeanClusterAlg = (function () {
                        function KMeanClusterAlg() {
                            this.k = 3;
                            this.iterations = 100;
                        }
                        KMeanClusterAlg.prototype.train = function (trainingSet, expectedResultSet, origin, manager) {
                            if (trainingSet.rows() < this.k) {
                                throw new Error("training setPrimitiveType not enough");
                            }
                            var ks = manager.preciseChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = this.k * origin.metaClass().inputs().length;
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                ks.extendDoubleArray(origin.metaClass().dependencies().index(), size, origin.metaClass());
                                for (var i = 0; i < this.k; i++) {
                                    for (var j = 0; j < origin.metaClass().inputs().length; j++) {
                                        ks.setDoubleArrayElem(dependenciesIndex, j + i * origin.metaClass().inputs().length, trainingSet.get(i, j), origin.metaClass());
                                    }
                                }
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            for (var iter = 0; iter < this.iterations; iter++) {
                                var temporalClassification;
                                var centroids = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(this.k, origin.metaClass().inputs().length);
                                var counters = new Int32Array(this.k);
                                for (var i = 0; i < trainingSet.rows(); i++) {
                                    temporalClassification = this.classify(trainingSet, i, state);
                                    for (var j = 0; j < origin.metaClass().inputs().length; j++) {
                                        centroids.add(temporalClassification, j, trainingSet.get(i, j));
                                    }
                                    counters[temporalClassification]++;
                                }
                                for (var i = 0; i < this.k; i++) {
                                    if (counters[i] != 0) {
                                        for (var j = 0; j < origin.metaClass().inputs().length; j++) {
                                            state.set(j + i * origin.metaClass().inputs().length, centroids.get(i, j) / counters[i]);
                                        }
                                    }
                                    else {
                                        var rand = new java.util.Random();
                                        var pos = rand.nextInt(trainingSet.rows());
                                        for (var j = 0; j < origin.metaClass().inputs().length; j++) {
                                            state.set(j + i * origin.metaClass().inputs().length, trainingSet.get(pos, j));
                                        }
                                    }
                                }
                            }
                        };
                        KMeanClusterAlg.prototype.classify = function (features, row, state) {
                            var maxdistance = -1;
                            var classNum = -1;
                            for (var i = 0; i < this.k; i++) {
                                var currentdist = 0;
                                for (var j = 0; j < features.columns(); j++) {
                                    currentdist += (features.get(row, j) - state.get(i * features.columns() + j)) * (features.get(row, j) - state.get(i * features.columns() + j));
                                }
                                if (maxdistance < 0) {
                                    maxdistance = currentdist;
                                    classNum = i;
                                }
                                else {
                                    if (currentdist < maxdistance) {
                                        maxdistance = currentdist;
                                        classNum = i;
                                    }
                                }
                            }
                            return classNum;
                        };
                        KMeanClusterAlg.prototype.infer = function (features, origin, manager) {
                            var ks = manager.closestChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = this.k * origin.metaClass().inputs().length;
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                return null;
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            var result = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(features.rows(), 1);
                            for (var inst = 0; inst < features.rows(); inst++) {
                                result.set(inst, 0, this.classify(features, inst, state));
                            }
                            return result;
                        };
                        return KMeanClusterAlg;
                    })();
                    impl.KMeanClusterAlg = KMeanClusterAlg;
                    var LinearRegressionAlg = (function () {
                        function LinearRegressionAlg() {
                            this.alpha = 0.005;
                            this.gamma = 0.000;
                            this.iterations = 10;
                        }
                        LinearRegressionAlg.prototype.train = function (trainingSet, expectedResultSet, origin, manager) {
                            var ks = manager.preciseChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = origin.metaClass().inputs().length + 1;
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                ks.extendDoubleArray(origin.metaClass().dependencies().index(), size, origin.metaClass());
                                for (var i = 0; i < size; i++) {
                                    ks.setDoubleArrayElem(dependenciesIndex, i, LinearRegressionAlg.rand.nextDouble(), origin.metaClass());
                                }
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            for (var i = 0; i < this.iterations; i++) {
                                for (var row = 0; row < trainingSet.rows(); row++) {
                                    var h = this.estimate(trainingSet, row, state);
                                    var error = -this.alpha * (h - expectedResultSet.get(row, 0));
                                    for (var feature = 0; feature < origin.metaClass().inputs().length; feature++) {
                                        state.set(feature, state.get(feature) * (1 - this.alpha * this.gamma) + error * trainingSet.get(row, feature));
                                    }
                                    state.add(origin.metaClass().inputs().length, error);
                                }
                            }
                        };
                        LinearRegressionAlg.prototype.estimate = function (training, row, state) {
                            var result = 0;
                            for (var i = 0; i < training.columns(); i++) {
                                result = result + training.get(row, i) * state.get(i);
                            }
                            result = result + state.get(training.columns());
                            return result;
                        };
                        LinearRegressionAlg.prototype.infer = function (features, origin, manager) {
                            var ks = manager.closestChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = origin.metaClass().inputs().length + 1;
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                return null;
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            var results = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(features.rows(), 1);
                            for (var i = 0; i < features.rows(); i++) {
                                results.set(i, 0, this.estimate(features, i, state));
                            }
                            return results;
                        };
                        LinearRegressionAlg.rand = new java.util.Random();
                        return LinearRegressionAlg;
                    })();
                    impl.LinearRegressionAlg = LinearRegressionAlg;
                    var RecommendationAlg = (function () {
                        function RecommendationAlg() {
                        }
                        RecommendationAlg.prototype.train = function (trainingSet, expectedResultSet, currentInferObject, manager) {
                        };
                        RecommendationAlg.prototype.infer = function (features, currentInferObject, manager) {
                            return new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(1, 1);
                        };
                        return RecommendationAlg;
                    })();
                    impl.RecommendationAlg = RecommendationAlg;
                    var StatInferAlg = (function () {
                        function StatInferAlg() {
                        }
                        StatInferAlg.prototype.train = function (trainingSet, expectedResultSet, origin, manager) {
                            var ks = manager.preciseChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                ks.extendDoubleArray(dependenciesIndex, StatInferAlg.NUMOFFIELDS * origin.metaClass().inputs().length + 1, origin.metaClass());
                                for (var i = 0; i < StatInferAlg.NUMOFFIELDS * origin.metaClass().inputs().length + 1; i++) {
                                    ks.setDoubleArrayElem(dependenciesIndex, i, 0, origin.metaClass());
                                }
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(StatInferAlg.NUMOFFIELDS * trainingSet.columns() + 1, 0, dependenciesIndex, ks, origin.metaClass());
                            for (var i = 0; i < trainingSet.rows(); i++) {
                                for (var j = 0; j < origin.metaClass().inputs().length; j++) {
                                    if (state.get(StatInferAlg.NUMOFFIELDS * trainingSet.columns()) == 0) {
                                        state.set(StatInferAlg.MIN + j * StatInferAlg.NUMOFFIELDS, trainingSet.get(i, j));
                                        state.set(StatInferAlg.MAX + j * StatInferAlg.NUMOFFIELDS, trainingSet.get(i, j));
                                        state.set(StatInferAlg.SUM + j * StatInferAlg.NUMOFFIELDS, trainingSet.get(i, j));
                                        state.set(StatInferAlg.SUMSQuare + j * StatInferAlg.NUMOFFIELDS, trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                    else {
                                        if (trainingSet.get(i, j) < state.get(StatInferAlg.MIN + j * StatInferAlg.NUMOFFIELDS)) {
                                            state.set(StatInferAlg.MIN + j * StatInferAlg.NUMOFFIELDS, trainingSet.get(i, j));
                                        }
                                        if (trainingSet.get(i, j) > state.get(StatInferAlg.MAX + j * StatInferAlg.NUMOFFIELDS)) {
                                            state.set(StatInferAlg.MAX + j * StatInferAlg.NUMOFFIELDS, trainingSet.get(i, j));
                                        }
                                        state.add(StatInferAlg.SUM + j * StatInferAlg.NUMOFFIELDS, trainingSet.get(i, j));
                                        state.add(StatInferAlg.SUMSQuare + j * StatInferAlg.NUMOFFIELDS, trainingSet.get(i, j) * trainingSet.get(i, j));
                                    }
                                }
                                state.add(StatInferAlg.NUMOFFIELDS * origin.metaClass().inputs().length, 1);
                            }
                        };
                        StatInferAlg.prototype.infer = function (features, origin, manager) {
                            var ks = manager.closestChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), origin.previousResolved());
                            var tempres = this.getAvgAll(ks, origin.metaClass().dependencies());
                            var result = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(1, tempres.length);
                            for (var i = 0; i < tempres.length; i++) {
                                result.set(0, i, tempres[i]);
                            }
                            return result;
                        };
                        StatInferAlg.prototype.getAvgAll = function (ks, meta) {
                            var result = new Float64Array(meta.origin().inputs().length);
                            for (var i = 0; i < meta.origin().inputs().length; i++) {
                                result[i] = this.getAvg(i, ks, meta);
                            }
                            return result;
                        };
                        StatInferAlg.prototype.getMinAll = function (ks, meta) {
                            var result = new Float64Array(meta.origin().inputs().length);
                            for (var i = 0; i < meta.origin().inputs().length; i++) {
                                result[i] = this.getMin(i, ks, meta);
                            }
                            return result;
                        };
                        StatInferAlg.prototype.getMaxAll = function (ks, meta) {
                            var result = new Float64Array(meta.origin().inputs().length);
                            for (var i = 0; i < meta.origin().inputs().length; i++) {
                                result[i] = this.getMax(i, ks, meta);
                            }
                            return result;
                        };
                        StatInferAlg.prototype.getVarianceAll = function (ks, meta, avgs) {
                            var result = new Float64Array(meta.origin().inputs().length);
                            for (var i = 0; i < meta.origin().inputs().length; i++) {
                                result[i] = this.getVariance(i, ks, meta, avgs[i]);
                            }
                            return result;
                        };
                        StatInferAlg.prototype.getAvg = function (featureNum, ks, meta) {
                            if (ks.getDoubleArraySize(meta.index(), meta.origin()) == 0) {
                                return 0;
                            }
                            var count = ks.getDoubleArrayElem(meta.index(), ks.getDoubleArraySize(meta.index(), meta.origin()) - 1, meta.origin());
                            if (count == 0) {
                                return 0;
                            }
                            return ks.getDoubleArrayElem(meta.index(), featureNum * StatInferAlg.NUMOFFIELDS + StatInferAlg.SUM, meta.origin()) / count;
                        };
                        StatInferAlg.prototype.getMin = function (featureNum, ks, meta) {
                            if (ks.getDoubleArraySize(meta.index(), meta.origin()) == 0) {
                                return 0;
                            }
                            var count = ks.getDoubleArrayElem(meta.index(), ks.getDoubleArraySize(meta.index(), meta.origin()) - 1, meta.origin());
                            if (count == 0) {
                                return 0;
                            }
                            return ks.getDoubleArrayElem(meta.index(), featureNum * StatInferAlg.NUMOFFIELDS + StatInferAlg.MIN, meta.origin());
                        };
                        StatInferAlg.prototype.getMax = function (featureNum, ks, meta) {
                            if (ks.getDoubleArraySize(meta.index(), meta.origin()) == 0) {
                                return 0;
                            }
                            var count = ks.getDoubleArrayElem(meta.index(), ks.getDoubleArraySize(meta.index(), meta.origin()) - 1, meta.origin());
                            if (count == 0) {
                                return 0;
                            }
                            return ks.getDoubleArrayElem(meta.index(), featureNum * StatInferAlg.NUMOFFIELDS + StatInferAlg.MAX, meta.origin());
                        };
                        StatInferAlg.prototype.getVariance = function (featureNum, ks, meta, avg) {
                            if (ks.getDoubleArraySize(meta.index(), meta.origin()) == 0) {
                                return 0;
                            }
                            var count = ks.getDoubleArrayElem(meta.index(), ks.getDoubleArraySize(meta.index(), meta.origin()) - 1, meta.origin());
                            if (count == 0) {
                                return 0;
                            }
                            return ks.getDoubleArrayElem(meta.index(), featureNum * StatInferAlg.NUMOFFIELDS + StatInferAlg.SUMSQuare, meta.origin()) / count - avg * avg;
                        };
                        StatInferAlg.MIN = 0;
                        StatInferAlg.MAX = 1;
                        StatInferAlg.SUM = 2;
                        StatInferAlg.SUMSQuare = 3;
                        StatInferAlg.NUMOFFIELDS = 4;
                        return StatInferAlg;
                    })();
                    impl.StatInferAlg = StatInferAlg;
                    var WinnowAlg = (function () {
                        function WinnowAlg() {
                            this.alpha = 2;
                            this.beta = 2;
                            this.iterations = 1;
                            this.rand = new java.util.Random();
                        }
                        WinnowAlg.prototype.train = function (trainingSet, expectedResultSet, origin, manager) {
                            var ks = manager.preciseChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), (origin.previousResolved()));
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = origin.metaClass().inputs().length;
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                ks.extendDoubleArray(origin.metaClass().dependencies().index(), size, origin.metaClass());
                                for (var i = 0; i < size; i++) {
                                    ks.setDoubleArrayElem(dependenciesIndex, i, this.rand.nextDouble(), origin.metaClass());
                                }
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            for (var iter = 0; iter < this.iterations; iter++) {
                                for (var inst = 0; inst < trainingSet.rows(); inst++) {
                                    if (this.calculate(trainingSet, inst, state) == expectedResultSet.get(inst, 0)) {
                                        continue;
                                    }
                                    if (expectedResultSet.get(inst, 0) == 0) {
                                        for (var i = 0; i < size; i++) {
                                            state.set(i, state.get(i) / this.beta);
                                        }
                                    }
                                    else {
                                        for (var i = 0; i < size; i++) {
                                            state.set(i, state.get(i) * this.alpha);
                                        }
                                    }
                                }
                            }
                        };
                        WinnowAlg.prototype.calculate = function (features, row, state) {
                            var result = 0;
                            for (var i = 0; i < features.columns(); i++) {
                                result += state.get(i) * features.get(row, i);
                            }
                            if (result >= features.columns()) {
                                return 1.0;
                            }
                            else {
                                return 0.0;
                            }
                        };
                        WinnowAlg.prototype.infer = function (features, origin, manager) {
                            var ks = manager.closestChunk(origin.universe(), origin.now(), origin.uuid(), origin.metaClass(), (origin.previousResolved()));
                            var dependenciesIndex = origin.metaClass().dependencies().index();
                            var size = origin.metaClass().inputs().length;
                            if (ks.getDoubleArraySize(dependenciesIndex, origin.metaClass()) == 0) {
                                return null;
                            }
                            var state = new org.kevoree.modeling.util.maths.structure.impl.Array1D(size, 0, origin.metaClass().dependencies().index(), ks, origin.metaClass());
                            var result = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(features.rows(), 1);
                            for (var inst = 0; inst < features.rows(); inst++) {
                                result.set(inst, 0, this.calculate(features, inst, state));
                            }
                            return result;
                        };
                        return WinnowAlg;
                    })();
                    impl.WinnowAlg = WinnowAlg;
                })(impl = infer.impl || (infer.impl = {}));
            })(infer = modeling.infer || (modeling.infer = {}));
            var memory;
            (function (memory) {
                var KChunkFlags = (function () {
                    function KChunkFlags() {
                    }
                    KChunkFlags.DIRTY_BIT_INDEX = 0;
                    KChunkFlags.DIRTY_BIT = 1 << KChunkFlags.DIRTY_BIT_INDEX;
                    KChunkFlags.REMOVED_BIT_INDEX = 1;
                    KChunkFlags.REMOVED_BIT = 1 << KChunkFlags.REMOVED_BIT_INDEX;
                    return KChunkFlags;
                })();
                memory.KChunkFlags = KChunkFlags;
                var chunk;
                (function (chunk) {
                    var impl;
                    (function (impl) {
                        var AbstractArrayTree = (function () {
                            function AbstractArrayTree(p_universe, p_time, p_obj, p_space) {
                                this.kvSize = 1;
                                this._threshold = 0;
                                this._root_index = -1;
                                this._size = 0;
                                this._universe = p_universe;
                                this._time = p_time;
                                this._obj = p_obj;
                                this._flags = new java.util.concurrent.atomic.AtomicLong(0);
                                this._counter = new java.util.concurrent.atomic.AtomicInteger(0);
                                this._space = p_space;
                            }
                            AbstractArrayTree.prototype.counter = function () {
                                return this._counter.get();
                            };
                            AbstractArrayTree.prototype.inc = function () {
                                return this._counter.incrementAndGet();
                            };
                            AbstractArrayTree.prototype.dec = function () {
                                return this._counter.decrementAndGet();
                            };
                            AbstractArrayTree.prototype.universe = function () {
                                return this._universe;
                            };
                            AbstractArrayTree.prototype.time = function () {
                                return this._time;
                            };
                            AbstractArrayTree.prototype.obj = function () {
                                return this._obj;
                            };
                            AbstractArrayTree.prototype.getFlags = function () {
                                return this._flags.get();
                            };
                            AbstractArrayTree.prototype.setFlags = function (bitsToEnable, bitsToDisable) {
                                var val;
                                var nval;
                                do {
                                    val = this._flags.get();
                                    nval = val & ~bitsToDisable | bitsToEnable;
                                } while (!this._flags.compareAndSet(val, nval));
                            };
                            AbstractArrayTree.prototype.space = function () {
                                return this._space;
                            };
                            AbstractArrayTree.prototype.allocate = function (capacity) {
                                this.state = new org.kevoree.modeling.memory.chunk.impl.AbstractArrayTree.InternalState(new Int32Array(capacity * AbstractArrayTree.META_SIZE), new Float64Array(capacity * this.kvSize), new Array());
                                this._threshold = (capacity * AbstractArrayTree.LOAD_FACTOR);
                            };
                            AbstractArrayTree.prototype.reallocate = function (newCapacity) {
                                this._threshold = (newCapacity * AbstractArrayTree.LOAD_FACTOR);
                                var new_back_kv = new Float64Array(newCapacity * this.kvSize);
                                if (this.state != null && this.state._back_kv != null) {
                                    java.lang.System.arraycopy(this.state._back_kv, 0, new_back_kv, 0, this._size * this.kvSize);
                                }
                                var new_back_colors = new Array();
                                if (this.state != null && this.state._back_colors != null) {
                                    java.lang.System.arraycopy(this.state._back_colors, 0, new_back_colors, 0, this._size);
                                    for (var i = this._size; i < newCapacity; i++) {
                                        new_back_colors[i] = false;
                                    }
                                }
                                var new_back_meta = new Int32Array(newCapacity * AbstractArrayTree.META_SIZE);
                                if (this.state != null && this.state._back_meta != null) {
                                    java.lang.System.arraycopy(this.state._back_meta, 0, new_back_meta, 0, this._size * AbstractArrayTree.META_SIZE);
                                    for (var i = this._size * AbstractArrayTree.META_SIZE; i < newCapacity * AbstractArrayTree.META_SIZE; i++) {
                                        new_back_meta[i] = -1;
                                    }
                                }
                                this.state = new org.kevoree.modeling.memory.chunk.impl.AbstractArrayTree.InternalState(new_back_meta, new_back_kv, new_back_colors);
                            };
                            AbstractArrayTree.prototype.size = function () {
                                return this._size;
                            };
                            AbstractArrayTree.prototype.key = function (p_currentIndex) {
                                if (p_currentIndex == -1) {
                                    return -1;
                                }
                                return this.state._back_kv[p_currentIndex * this.kvSize];
                            };
                            AbstractArrayTree.prototype.setKey = function (p_currentIndex, p_paramIndex) {
                                this.state._back_kv[p_currentIndex * this.kvSize] = p_paramIndex;
                            };
                            AbstractArrayTree.prototype.value = function (p_currentIndex) {
                                if (p_currentIndex == -1) {
                                    return -1;
                                }
                                return this.state._back_kv[(p_currentIndex * this.kvSize) + 1];
                            };
                            AbstractArrayTree.prototype.setValue = function (p_currentIndex, p_paramIndex) {
                                this.state._back_kv[(p_currentIndex * this.kvSize) + 1] = p_paramIndex;
                            };
                            AbstractArrayTree.prototype.left = function (p_currentIndex) {
                                if (p_currentIndex == -1) {
                                    return -1;
                                }
                                return this.state._back_meta[p_currentIndex * AbstractArrayTree.META_SIZE];
                            };
                            AbstractArrayTree.prototype.setLeft = function (p_currentIndex, p_paramIndex) {
                                this.state._back_meta[p_currentIndex * AbstractArrayTree.META_SIZE] = p_paramIndex;
                            };
                            AbstractArrayTree.prototype.right = function (p_currentIndex) {
                                if (p_currentIndex == -1) {
                                    return -1;
                                }
                                return this.state._back_meta[(p_currentIndex * AbstractArrayTree.META_SIZE) + 1];
                            };
                            AbstractArrayTree.prototype.setRight = function (p_currentIndex, p_paramIndex) {
                                this.state._back_meta[(p_currentIndex * AbstractArrayTree.META_SIZE) + 1] = p_paramIndex;
                            };
                            AbstractArrayTree.prototype.parent = function (p_currentIndex) {
                                if (p_currentIndex == -1) {
                                    return -1;
                                }
                                return this.state._back_meta[(p_currentIndex * AbstractArrayTree.META_SIZE) + 2];
                            };
                            AbstractArrayTree.prototype.setParent = function (p_currentIndex, p_paramIndex) {
                                this.state._back_meta[(p_currentIndex * AbstractArrayTree.META_SIZE) + 2] = p_paramIndex;
                            };
                            AbstractArrayTree.prototype.color = function (p_currentIndex) {
                                if (p_currentIndex == -1) {
                                    return true;
                                }
                                return this.state._back_colors[p_currentIndex];
                            };
                            AbstractArrayTree.prototype.setColor = function (p_currentIndex, p_paramIndex) {
                                this.state._back_colors[p_currentIndex] = p_paramIndex;
                            };
                            AbstractArrayTree.prototype.grandParent = function (p_currentIndex) {
                                if (p_currentIndex == -1) {
                                    return -1;
                                }
                                if (this.parent(p_currentIndex) != -1) {
                                    return this.parent(this.parent(p_currentIndex));
                                }
                                else {
                                    return -1;
                                }
                            };
                            AbstractArrayTree.prototype.sibling = function (p_currentIndex) {
                                if (this.parent(p_currentIndex) == -1) {
                                    return -1;
                                }
                                else {
                                    if (p_currentIndex == this.left(this.parent(p_currentIndex))) {
                                        return this.right(this.parent(p_currentIndex));
                                    }
                                    else {
                                        return this.left(this.parent(p_currentIndex));
                                    }
                                }
                            };
                            AbstractArrayTree.prototype.uncle = function (p_currentIndex) {
                                if (this.parent(p_currentIndex) != -1) {
                                    return this.sibling(this.parent(p_currentIndex));
                                }
                                else {
                                    return -1;
                                }
                            };
                            AbstractArrayTree.prototype.previous = function (p_index) {
                                var p = p_index;
                                if (this.left(p) != -1) {
                                    p = this.left(p);
                                    while (this.right(p) != -1) {
                                        p = this.right(p);
                                    }
                                    return p;
                                }
                                else {
                                    if (this.parent(p) != -1) {
                                        if (p == this.right(this.parent(p))) {
                                            return this.parent(p);
                                        }
                                        else {
                                            while (this.parent(p) != -1 && p == this.left(this.parent(p))) {
                                                p = this.parent(p);
                                            }
                                            return this.parent(p);
                                        }
                                    }
                                    else {
                                        return -1;
                                    }
                                }
                            };
                            AbstractArrayTree.prototype.next = function (p_index) {
                                var p = p_index;
                                if (this.right(p) != -1) {
                                    p = this.right(p);
                                    while (this.left(p) != -1) {
                                        p = this.left(p);
                                    }
                                    return p;
                                }
                                else {
                                    if (this.parent(p) != -1) {
                                        if (p == this.left(this.parent(p))) {
                                            return this.parent(p);
                                        }
                                        else {
                                            while (this.parent(p) != -1 && p == this.right(this.parent(p))) {
                                                p = this.parent(p);
                                            }
                                            return this.parent(p);
                                        }
                                    }
                                    else {
                                        return -1;
                                    }
                                }
                            };
                            AbstractArrayTree.prototype.lookup = function (p_key) {
                                var n = this._root_index;
                                if (n == -1) {
                                    return org.kevoree.modeling.KConfig.NULL_LONG;
                                }
                                while (n != -1) {
                                    if (p_key == this.key(n)) {
                                        return this.key(n);
                                    }
                                    else {
                                        if (p_key < this.key(n)) {
                                            n = this.left(n);
                                        }
                                        else {
                                            n = this.right(n);
                                        }
                                    }
                                }
                                return n;
                            };
                            AbstractArrayTree.prototype.range = function (startKey, endKey, walker) {
                                var indexEnd = this.internal_previousOrEqual_index(endKey);
                                while (indexEnd != -1 && this.key(indexEnd) >= startKey) {
                                    walker(this.key(indexEnd));
                                    indexEnd = this.previous(indexEnd);
                                }
                            };
                            AbstractArrayTree.prototype.internal_previousOrEqual_index = function (p_key) {
                                var p = this._root_index;
                                if (p == -1) {
                                    return p;
                                }
                                while (p != -1) {
                                    if (p_key == this.key(p)) {
                                        return p;
                                    }
                                    if (p_key > this.key(p)) {
                                        if (this.right(p) != -1) {
                                            p = this.right(p);
                                        }
                                        else {
                                            return p;
                                        }
                                    }
                                    else {
                                        if (this.left(p) != -1) {
                                            p = this.left(p);
                                        }
                                        else {
                                            var parent = this.parent(p);
                                            var ch = p;
                                            while (parent != -1 && ch == this.left(parent)) {
                                                ch = parent;
                                                parent = this.parent(parent);
                                            }
                                            return parent;
                                        }
                                    }
                                }
                                return -1;
                            };
                            AbstractArrayTree.prototype.rotateLeft = function (n) {
                                var r = this.right(n);
                                this.replaceNode(n, r);
                                this.setRight(n, this.left(r));
                                if (this.left(r) != -1) {
                                    this.setParent(this.left(r), n);
                                }
                                this.setLeft(r, n);
                                this.setParent(n, r);
                            };
                            AbstractArrayTree.prototype.rotateRight = function (n) {
                                var l = this.left(n);
                                this.replaceNode(n, l);
                                this.setLeft(n, this.right(l));
                                if (this.right(l) != -1) {
                                    this.setParent(this.right(l), n);
                                }
                                this.setRight(l, n);
                                this.setParent(n, l);
                            };
                            AbstractArrayTree.prototype.replaceNode = function (oldn, newn) {
                                if (this.parent(oldn) == -1) {
                                    this._root_index = newn;
                                }
                                else {
                                    if (oldn == this.left(this.parent(oldn))) {
                                        this.setLeft(this.parent(oldn), newn);
                                    }
                                    else {
                                        this.setRight(this.parent(oldn), newn);
                                    }
                                }
                                if (newn != -1) {
                                    this.setParent(newn, this.parent(oldn));
                                }
                            };
                            AbstractArrayTree.prototype.insertCase1 = function (n) {
                                if (this.parent(n) == -1) {
                                    this.setColor(n, true);
                                }
                                else {
                                    this.insertCase2(n);
                                }
                            };
                            AbstractArrayTree.prototype.insertCase2 = function (n) {
                                if (!this.color(this.parent(n))) {
                                    this.insertCase3(n);
                                }
                            };
                            AbstractArrayTree.prototype.insertCase3 = function (n) {
                                if (!this.color(this.uncle(n))) {
                                    this.setColor(this.parent(n), true);
                                    this.setColor(this.uncle(n), true);
                                    this.setColor(this.grandParent(n), false);
                                    this.insertCase1(this.grandParent(n));
                                }
                                else {
                                    this.insertCase4(n);
                                }
                            };
                            AbstractArrayTree.prototype.insertCase4 = function (n_n) {
                                var n = n_n;
                                if (n == this.right(this.parent(n)) && this.parent(n) == this.left(this.grandParent(n))) {
                                    this.rotateLeft(this.parent(n));
                                    n = this.left(n);
                                }
                                else {
                                    if (n == this.left(this.parent(n)) && this.parent(n) == this.right(this.grandParent(n))) {
                                        this.rotateRight(this.parent(n));
                                        n = this.right(n);
                                    }
                                }
                                this.insertCase5(n);
                            };
                            AbstractArrayTree.prototype.insertCase5 = function (n) {
                                this.setColor(this.parent(n), true);
                                this.setColor(this.grandParent(n), false);
                                if (n == this.left(this.parent(n)) && this.parent(n) == this.left(this.grandParent(n))) {
                                    this.rotateRight(this.grandParent(n));
                                }
                                else {
                                    this.rotateLeft(this.grandParent(n));
                                }
                            };
                            AbstractArrayTree.prototype.serialize = function (metaModel) {
                                if (this._root_index == -1) {
                                    return "0";
                                }
                                var savedRoot = this._root_index;
                                var internalState = this.state;
                                var builder = new java.lang.StringBuilder();
                                var treeSize = 0;
                                for (var i = 0; i < internalState._back_meta.length / AbstractArrayTree.META_SIZE; i++) {
                                    var parentIndex = internalState._back_meta[(i * AbstractArrayTree.META_SIZE) + 2];
                                    if (parentIndex != -1 || i == savedRoot) {
                                        var isOnLeft = false;
                                        if (parentIndex != -1) {
                                            isOnLeft = internalState._back_meta[parentIndex * AbstractArrayTree.META_SIZE] == i;
                                        }
                                        if (!this.color(i)) {
                                            if (isOnLeft) {
                                                builder.append(AbstractArrayTree.BLACK_LEFT);
                                            }
                                            else {
                                                builder.append(AbstractArrayTree.BLACK_RIGHT);
                                            }
                                        }
                                        else {
                                            if (isOnLeft) {
                                                builder.append(AbstractArrayTree.RED_LEFT);
                                            }
                                            else {
                                                builder.append(AbstractArrayTree.RED_RIGHT);
                                            }
                                        }
                                        org.kevoree.modeling.util.Base64.encodeLongToBuffer(internalState._back_kv[i * this.kvSize], builder);
                                        builder.append(',');
                                        if (parentIndex != -1) {
                                            org.kevoree.modeling.util.Base64.encodeIntToBuffer(parentIndex, builder);
                                        }
                                        if (this.kvSize > 1) {
                                            builder.append(',');
                                            org.kevoree.modeling.util.Base64.encodeLongToBuffer(internalState._back_kv[(i * this.kvSize) + 1], builder);
                                        }
                                        treeSize++;
                                    }
                                }
                                return org.kevoree.modeling.util.Base64.encodeInt(treeSize) + "," + org.kevoree.modeling.util.Base64.encodeInt(savedRoot) + builder.toString();
                            };
                            AbstractArrayTree.prototype.init = function (payload, metaModel, metaClassIndex) {
                                if (payload == null || payload.length == 0) {
                                    return;
                                }
                                var initPos = 0;
                                var cursor = 0;
                                while (cursor < payload.length && payload.charAt(cursor) != ',' && payload.charAt(cursor) != AbstractArrayTree.BLACK_LEFT && payload.charAt(cursor) != AbstractArrayTree.BLACK_RIGHT && payload.charAt(cursor) != AbstractArrayTree.RED_LEFT && payload.charAt(cursor) != AbstractArrayTree.RED_RIGHT) {
                                    cursor++;
                                }
                                if (payload.charAt(cursor) == ',') {
                                    this._size = org.kevoree.modeling.util.Base64.decodeToIntWithBounds(payload, initPos, cursor);
                                    cursor++;
                                    initPos = cursor;
                                }
                                while (cursor < payload.length && payload.charAt(cursor) != AbstractArrayTree.BLACK_LEFT && payload.charAt(cursor) != AbstractArrayTree.BLACK_RIGHT && payload.charAt(cursor) != AbstractArrayTree.RED_LEFT && payload.charAt(cursor) != AbstractArrayTree.RED_RIGHT) {
                                    cursor++;
                                }
                                this._root_index = org.kevoree.modeling.util.Base64.decodeToIntWithBounds(payload, initPos, cursor);
                                this.allocate(this._size);
                                for (var i = 0; i < this._size; i++) {
                                    var offsetI = i * AbstractArrayTree.META_SIZE;
                                    this.state._back_meta[offsetI] = -1;
                                    this.state._back_meta[offsetI + 1] = -1;
                                    this.state._back_meta[offsetI + 2] = -1;
                                }
                                var currentLoopIndex = 0;
                                while (cursor < payload.length) {
                                    while (cursor < payload.length && payload.charAt(cursor) != AbstractArrayTree.BLACK_LEFT && payload.charAt(cursor) != AbstractArrayTree.BLACK_RIGHT && payload.charAt(cursor) != AbstractArrayTree.RED_LEFT && payload.charAt(cursor) != AbstractArrayTree.RED_RIGHT) {
                                        cursor++;
                                    }
                                    if (cursor < payload.length) {
                                        var elem = payload.charAt(cursor);
                                        var isOnLeft = false;
                                        if (elem == AbstractArrayTree.BLACK_LEFT || elem == AbstractArrayTree.RED_LEFT) {
                                            isOnLeft = true;
                                        }
                                        if (elem == AbstractArrayTree.BLACK_LEFT || elem == AbstractArrayTree.BLACK_RIGHT) {
                                            this.setColor(currentLoopIndex, false);
                                        }
                                        else {
                                            this.setColor(currentLoopIndex, true);
                                        }
                                        cursor++;
                                        var beginChunk = cursor;
                                        while (cursor < payload.length && payload.charAt(cursor) != ',') {
                                            cursor++;
                                        }
                                        var loopKey = org.kevoree.modeling.util.Base64.decodeToLongWithBounds(payload, beginChunk, cursor);
                                        this.setKey(currentLoopIndex, loopKey);
                                        cursor++;
                                        beginChunk = cursor;
                                        while (cursor < payload.length && payload.charAt(cursor) != ',' && payload.charAt(cursor) != AbstractArrayTree.BLACK_LEFT && payload.charAt(cursor) != AbstractArrayTree.BLACK_RIGHT && payload.charAt(cursor) != AbstractArrayTree.RED_LEFT && payload.charAt(cursor) != AbstractArrayTree.RED_RIGHT) {
                                            cursor++;
                                        }
                                        if (cursor > beginChunk) {
                                            var parentRaw = org.kevoree.modeling.util.Base64.decodeToIntWithBounds(payload, beginChunk, cursor);
                                            this.setParent(currentLoopIndex, parentRaw);
                                            if (isOnLeft) {
                                                this.setLeft(parentRaw, currentLoopIndex);
                                            }
                                            else {
                                                this.setRight(parentRaw, currentLoopIndex);
                                            }
                                        }
                                        if (cursor < payload.length && payload.charAt(cursor) == ',') {
                                            cursor++;
                                            beginChunk = cursor;
                                            while (cursor < payload.length && payload.charAt(cursor) != AbstractArrayTree.BLACK_LEFT && payload.charAt(cursor) != AbstractArrayTree.BLACK_RIGHT && payload.charAt(cursor) != AbstractArrayTree.RED_LEFT && payload.charAt(cursor) != AbstractArrayTree.RED_RIGHT) {
                                                cursor++;
                                            }
                                            if (cursor > beginChunk) {
                                                var currentValue = org.kevoree.modeling.util.Base64.decodeToLongWithBounds(payload, beginChunk, cursor);
                                                this.setValue(currentLoopIndex, currentValue);
                                            }
                                        }
                                        currentLoopIndex++;
                                    }
                                }
                            };
                            AbstractArrayTree.prototype.free = function (p_metaModel) {
                                this.state = null;
                                this._size = 0;
                                this._threshold = 0;
                            };
                            AbstractArrayTree.prototype.internal_insert = function (p_key, p_value) {
                                if ((this._size + 1) > this._threshold) {
                                    var length = (this._size == 0 ? 1 : this._size << 1);
                                    this.reallocate(length);
                                }
                                var newIndex = this._size;
                                if (newIndex == 0) {
                                    this.setKey(newIndex, p_key);
                                    if (this.kvSize == 2) {
                                        this.setValue(newIndex, p_value);
                                    }
                                    this.setColor(newIndex, false);
                                    this.setLeft(newIndex, -1);
                                    this.setRight(newIndex, -1);
                                    this.setParent(newIndex, -1);
                                    this._root_index = newIndex;
                                    this._size = 1;
                                }
                                else {
                                    var n = this._root_index;
                                    while (true) {
                                        if (p_key == this.key(n)) {
                                            return;
                                        }
                                        else {
                                            if (p_key < this.key(n)) {
                                                if (this.left(n) == -1) {
                                                    this.setKey(newIndex, p_key);
                                                    if (this.kvSize == 2) {
                                                        this.setValue(newIndex, p_value);
                                                    }
                                                    this.setColor(newIndex, false);
                                                    this.setLeft(newIndex, -1);
                                                    this.setRight(newIndex, -1);
                                                    this.setParent(newIndex, -1);
                                                    this.setLeft(n, newIndex);
                                                    this._size++;
                                                    break;
                                                }
                                                else {
                                                    n = this.left(n);
                                                }
                                            }
                                            else {
                                                if (this.right(n) == -1) {
                                                    this.setKey(newIndex, p_key);
                                                    if (this.kvSize == 2) {
                                                        this.setValue(newIndex, p_value);
                                                    }
                                                    this.setColor(newIndex, false);
                                                    this.setLeft(newIndex, -1);
                                                    this.setRight(newIndex, -1);
                                                    this.setParent(newIndex, -1);
                                                    this.setRight(n, newIndex);
                                                    this._size++;
                                                    break;
                                                }
                                                else {
                                                    n = this.right(n);
                                                }
                                            }
                                        }
                                    }
                                    this.setParent(newIndex, n);
                                }
                                this.insertCase1(newIndex);
                                this.internal_set_dirty();
                            };
                            AbstractArrayTree.prototype.internal_lookup_value = function (p_key) {
                                var n = this._root_index;
                                if (n == -1) {
                                    return org.kevoree.modeling.KConfig.NULL_LONG;
                                }
                                while (n != -1) {
                                    if (p_key == this.key(n)) {
                                        return this.value(n);
                                    }
                                    else {
                                        if (p_key < this.key(n)) {
                                            n = this.left(n);
                                        }
                                        else {
                                            n = this.right(n);
                                        }
                                    }
                                }
                                return n;
                            };
                            AbstractArrayTree.prototype.internal_set_dirty = function () {
                                if (this._space != null) {
                                    if ((this._flags.get() & org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) != org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) {
                                        this._space.declareDirty(this);
                                        this.setFlags(org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT, 0);
                                    }
                                }
                                else {
                                    this.setFlags(org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT, 0);
                                }
                            };
                            AbstractArrayTree.prototype.type = function () {
                                throw "Abstract method";
                            };
                            AbstractArrayTree.prototype.dependencies = function () {
                                return null;
                            };
                            AbstractArrayTree.prototype.addDependency = function (universe, time, uuid) {
                                throw new Error("Not implemented yet");
                            };
                            AbstractArrayTree.BLACK_LEFT = '{';
                            AbstractArrayTree.BLACK_RIGHT = '}';
                            AbstractArrayTree.RED_LEFT = '[';
                            AbstractArrayTree.RED_RIGHT = ']';
                            AbstractArrayTree.META_SIZE = 3;
                            AbstractArrayTree.LOAD_FACTOR = (75 / 100);
                            return AbstractArrayTree;
                        })();
                        impl.AbstractArrayTree = AbstractArrayTree;
                        var AbstractArrayTree;
                        (function (AbstractArrayTree) {
                            var InternalState = (function () {
                                function InternalState(_back_meta, _back_kv, _back_colors) {
                                    this._back_meta = _back_meta;
                                    this._back_kv = _back_kv;
                                    this._back_colors = _back_colors;
                                }
                                return InternalState;
                            })();
                            AbstractArrayTree.InternalState = InternalState;
                        })(AbstractArrayTree = impl.AbstractArrayTree || (impl.AbstractArrayTree = {}));
                        var ArrayIntMap = (function () {
                            function ArrayIntMap(initalCapacity, loadFactor) {
                            }
                            ArrayIntMap.prototype.clear = function () { for (var p in this) {
                                if (this.hasOwnProperty(p)) {
                                    delete this[p];
                                }
                            } };
                            ArrayIntMap.prototype.get = function (key) { return this[key]; };
                            ArrayIntMap.prototype.put = function (key, pval) { var previousVal = this[key]; this[key] = pval; return previousVal; };
                            ArrayIntMap.prototype.contains = function (key) { return this.hasOwnProperty(key); };
                            ArrayIntMap.prototype.remove = function (key) { var tmp = this[key]; delete this[key]; return tmp; };
                            ArrayIntMap.prototype.size = function () { return Object.keys(this).length; };
                            ArrayIntMap.prototype.each = function (callback) { for (var p in this) {
                                if (this.hasOwnProperty(p)) {
                                    callback(+p, this[p]);
                                }
                            } };
                            return ArrayIntMap;
                        })();
                        impl.ArrayIntMap = ArrayIntMap;
                        var ArrayLongLongMap = (function () {
                            function ArrayLongLongMap(p_universe, p_time, p_obj, p_space) {
                                this.state = null;
                                this.initialCapacity = 16;
                                this._metaClassIndex = -1;
                                this._universe = p_universe;
                                this._time = p_time;
                                this._obj = p_obj;
                                this._flags = new java.util.concurrent.atomic.AtomicLong(0);
                                this._counter = new java.util.concurrent.atomic.AtomicInteger(0);
                                this._space = p_space;
                                this.elementCount = 0;
                                this.droppedCount = 0;
                                var newstate = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap.InternalState(this.initialCapacity, new Float64Array(this.initialCapacity * 2), new Int32Array(this.initialCapacity), new Int32Array(this.initialCapacity));
                                for (var i = 0; i < this.initialCapacity; i++) {
                                    newstate.elementNext[i] = -1;
                                    newstate.elementHash[i] = -1;
                                }
                                this.state = newstate;
                                this.threshold = (newstate.elementDataSize * ArrayLongLongMap.loadFactor);
                            }
                            ArrayLongLongMap.prototype.counter = function () {
                                return this._counter.get();
                            };
                            ArrayLongLongMap.prototype.inc = function () {
                                return this._counter.incrementAndGet();
                            };
                            ArrayLongLongMap.prototype.dec = function () {
                                return this._counter.decrementAndGet();
                            };
                            ArrayLongLongMap.prototype.clear = function () {
                                if (this.elementCount > 0) {
                                    this.elementCount = 0;
                                    this.droppedCount = 0;
                                    var newstate = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap.InternalState(this.initialCapacity, new Float64Array(this.initialCapacity * 2), new Int32Array(this.initialCapacity), new Int32Array(this.initialCapacity));
                                    for (var i = 0; i < this.initialCapacity; i++) {
                                        newstate.elementNext[i] = -1;
                                        newstate.elementHash[i] = -1;
                                    }
                                    this.state = newstate;
                                    this.threshold = (newstate.elementDataSize * ArrayLongLongMap.loadFactor);
                                }
                            };
                            ArrayLongLongMap.prototype.rehashCapacity = function (capacity) {
                                var length = (capacity == 0 ? 1 : capacity << 1);
                                var newElementKV = new Float64Array(length * 2);
                                java.lang.System.arraycopy(this.state.elementKV, 0, newElementKV, 0, this.state.elementKV.length);
                                var newElementNext = new Int32Array(length);
                                var newElementHash = new Int32Array(length);
                                for (var i = 0; i < length; i++) {
                                    newElementNext[i] = -1;
                                    newElementHash[i] = -1;
                                }
                                for (var i = 0; i < this.state.elementNext.length; i++) {
                                    if (this.state.elementNext[i] != -1) {
                                        var index = (this.state.elementKV[i * 2] & 0x7FFFFFFF) % length;
                                        var currentHashedIndex = newElementHash[index];
                                        if (currentHashedIndex != -1) {
                                            newElementNext[i] = currentHashedIndex;
                                        }
                                        else {
                                            newElementNext[i] = -2;
                                        }
                                        newElementHash[index] = i;
                                    }
                                }
                                this.state = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap.InternalState(length, newElementKV, newElementNext, newElementHash);
                                this.threshold = (length * ArrayLongLongMap.loadFactor);
                            };
                            ArrayLongLongMap.prototype.each = function (callback) {
                                var internalState = this.state;
                                for (var i = 0; i < internalState.elementNext.length; i++) {
                                    if (internalState.elementNext[i] != -1) {
                                        callback(internalState.elementKV[i * 2], internalState.elementKV[i * 2 + 1]);
                                    }
                                }
                            };
                            ArrayLongLongMap.prototype.metaClassIndex = function () {
                                return this._metaClassIndex;
                            };
                            ArrayLongLongMap.prototype.contains = function (key) {
                                var internalState = this.state;
                                if (this.state.elementDataSize == 0) {
                                    return false;
                                }
                                var hash = (key);
                                var index = (hash & 0x7FFFFFFF) % internalState.elementDataSize;
                                var m = internalState.elementHash[index];
                                while (m >= 0) {
                                    if (key == internalState.elementKV[m * 2]) {
                                        return true;
                                    }
                                    m = internalState.elementNext[m];
                                }
                                return false;
                            };
                            ArrayLongLongMap.prototype.get = function (key) {
                                var internalState = this.state;
                                if (this.state.elementDataSize == 0) {
                                    return org.kevoree.modeling.KConfig.NULL_LONG;
                                }
                                var index = ((key) & 0x7FFFFFFF) % internalState.elementDataSize;
                                var m = internalState.elementHash[index];
                                while (m >= 0) {
                                    if (key == internalState.elementKV[m * 2]) {
                                        return internalState.elementKV[(m * 2) + 1];
                                    }
                                    else {
                                        m = internalState.elementNext[m];
                                    }
                                }
                                return org.kevoree.modeling.KConfig.NULL_LONG;
                            };
                            ArrayLongLongMap.prototype.put = function (key, value) {
                                var entry = -1;
                                var index = -1;
                                var hash = (key);
                                if (this.state.elementDataSize != 0) {
                                    index = (hash & 0x7FFFFFFF) % this.state.elementDataSize;
                                    entry = this.findNonNullKeyEntry(key, index);
                                }
                                if (entry == -1) {
                                    if (++this.elementCount > this.threshold) {
                                        this.rehashCapacity(this.state.elementDataSize);
                                        index = (hash & 0x7FFFFFFF) % this.state.elementDataSize;
                                    }
                                    var newIndex = (this.elementCount + this.droppedCount - 1);
                                    this.state.elementKV[newIndex * 2] = key;
                                    this.state.elementKV[newIndex * 2 + 1] = value;
                                    var currentHashedIndex = this.state.elementHash[index];
                                    if (currentHashedIndex != -1) {
                                        this.state.elementNext[newIndex] = currentHashedIndex;
                                    }
                                    else {
                                        this.state.elementNext[newIndex] = -2;
                                    }
                                    this.state.elementHash[index] = newIndex;
                                }
                                else {
                                    this.state.elementKV[entry + 1] = value;
                                }
                                this.internal_set_dirty();
                            };
                            ArrayLongLongMap.prototype.findNonNullKeyEntry = function (key, index) {
                                var m = this.state.elementHash[index];
                                while (m >= 0) {
                                    if (key == this.state.elementKV[m * 2]) {
                                        return m;
                                    }
                                    m = this.state.elementNext[m];
                                }
                                return -1;
                            };
                            ArrayLongLongMap.prototype.remove = function (key) {
                                var internalState = this.state;
                                if (this.state.elementDataSize == 0) {
                                    return;
                                }
                                var index = ((key) & 0x7FFFFFFF) % internalState.elementDataSize;
                                var m = this.state.elementHash[index];
                                var last = -1;
                                while (m >= 0) {
                                    if (key == this.state.elementKV[m * 2]) {
                                        break;
                                    }
                                    last = m;
                                    m = this.state.elementNext[m];
                                }
                                if (m == -1) {
                                    return;
                                }
                                if (last == -1) {
                                    if (this.state.elementNext[m] > 0) {
                                        this.state.elementHash[index] = m;
                                    }
                                    else {
                                        this.state.elementHash[index] = -1;
                                    }
                                }
                                else {
                                    this.state.elementNext[last] = this.state.elementNext[m];
                                }
                                this.state.elementNext[m] = -1;
                                this.elementCount--;
                                this.droppedCount++;
                            };
                            ArrayLongLongMap.prototype.size = function () {
                                return this.elementCount;
                            };
                            ArrayLongLongMap.prototype.init = function (payload, metaModel, metaClassIndex) {
                                this._metaClassIndex = metaClassIndex;
                                if (payload == null || payload.length == 0) {
                                    return;
                                }
                                var initPos = 0;
                                var cursor = 0;
                                while (cursor < payload.length && payload.charAt(cursor) != ',' && payload.charAt(cursor) != '/') {
                                    cursor++;
                                }
                                if (cursor >= payload.length) {
                                    return;
                                }
                                if (payload.charAt(cursor) == ',') {
                                    this._metaClassIndex = metaModel.metaClassByName(payload.substring(initPos, cursor)).index();
                                    cursor++;
                                    initPos = cursor;
                                }
                                while (cursor < payload.length && payload.charAt(cursor) != '/') {
                                    cursor++;
                                }
                                var nbElement = org.kevoree.modeling.util.Base64.decodeToIntWithBounds(payload, initPos, cursor);
                                var length = (nbElement == 0 ? 1 : nbElement << 1);
                                var newElementKV = new Float64Array(length * 2);
                                var newElementNext = new Int32Array(length);
                                var newElementHash = new Int32Array(length);
                                for (var i = 0; i < length; i++) {
                                    newElementNext[i] = -1;
                                    newElementHash[i] = -1;
                                }
                                var temp_state = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap.InternalState(length, newElementKV, newElementNext, newElementHash);
                                while (cursor < payload.length) {
                                    cursor++;
                                    var beginChunk = cursor;
                                    while (cursor < payload.length && payload.charAt(cursor) != ':') {
                                        cursor++;
                                    }
                                    var middleChunk = cursor;
                                    while (cursor < payload.length && payload.charAt(cursor) != ',') {
                                        cursor++;
                                    }
                                    var loopKey = org.kevoree.modeling.util.Base64.decodeToLongWithBounds(payload, beginChunk, middleChunk);
                                    var loopVal = org.kevoree.modeling.util.Base64.decodeToLongWithBounds(payload, middleChunk + 1, cursor);
                                    var index = ((loopKey) & 0x7FFFFFFF) % temp_state.elementDataSize;
                                    var newIndex = this.elementCount;
                                    temp_state.elementKV[newIndex * 2] = loopKey;
                                    temp_state.elementKV[newIndex * 2 + 1] = loopVal;
                                    var currentHashedIndex = temp_state.elementHash[index];
                                    if (currentHashedIndex != -1) {
                                        temp_state.elementNext[newIndex] = currentHashedIndex;
                                    }
                                    else {
                                        temp_state.elementNext[newIndex] = -2;
                                    }
                                    temp_state.elementHash[index] = newIndex;
                                    this.elementCount++;
                                }
                                this.elementCount = nbElement;
                                this.droppedCount = 0;
                                this.state = temp_state;
                                this.threshold = (length * ArrayLongLongMap.loadFactor);
                            };
                            ArrayLongLongMap.prototype.serialize = function (metaModel) {
                                var buffer = new java.lang.StringBuilder();
                                if (this._metaClassIndex != -1) {
                                    buffer.append(metaModel.metaClass(this._metaClassIndex).metaName());
                                    buffer.append(',');
                                }
                                org.kevoree.modeling.util.Base64.encodeIntToBuffer(this.elementCount, buffer);
                                buffer.append('/');
                                var isFirst = true;
                                var internalState = this.state;
                                for (var i = 0; i < internalState.elementNext.length; i++) {
                                    if (internalState.elementNext[i] != -1) {
                                        var loopKey = internalState.elementKV[i * 2];
                                        var loopValue = internalState.elementKV[i * 2 + 1];
                                        if (!isFirst) {
                                            buffer.append(",");
                                        }
                                        isFirst = false;
                                        org.kevoree.modeling.util.Base64.encodeLongToBuffer(loopKey, buffer);
                                        buffer.append(":");
                                        org.kevoree.modeling.util.Base64.encodeLongToBuffer(loopValue, buffer);
                                    }
                                }
                                return buffer.toString();
                            };
                            ArrayLongLongMap.prototype.free = function (metaModel) {
                                this.clear();
                            };
                            ArrayLongLongMap.prototype.type = function () {
                                return org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_MAP;
                            };
                            ArrayLongLongMap.prototype.space = function () {
                                return this._space;
                            };
                            ArrayLongLongMap.prototype.internal_set_dirty = function () {
                                if (this._space != null) {
                                    if ((this._flags.get() & org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) != org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) {
                                        this._space.declareDirty(this);
                                        this.setFlags(org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT, 0);
                                    }
                                }
                                else {
                                    this.setFlags(org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT, 0);
                                }
                            };
                            ArrayLongLongMap.prototype.getFlags = function () {
                                return this._flags.get();
                            };
                            ArrayLongLongMap.prototype.setFlags = function (bitsToEnable, bitsToDisable) {
                                var val;
                                var nval;
                                do {
                                    val = this._flags.get();
                                    nval = val & ~bitsToDisable | bitsToEnable;
                                } while (!this._flags.compareAndSet(val, nval));
                            };
                            ArrayLongLongMap.prototype.universe = function () {
                                return this._universe;
                            };
                            ArrayLongLongMap.prototype.time = function () {
                                return this._time;
                            };
                            ArrayLongLongMap.prototype.obj = function () {
                                return this._obj;
                            };
                            ArrayLongLongMap.prototype.dependencies = function () {
                                return null;
                            };
                            ArrayLongLongMap.prototype.addDependency = function (universe, time, uuid) {
                                throw new Error("Not implemented yet");
                            };
                            ArrayLongLongMap.loadFactor = (75 / 100);
                            return ArrayLongLongMap;
                        })();
                        impl.ArrayLongLongMap = ArrayLongLongMap;
                        var ArrayLongLongMap;
                        (function (ArrayLongLongMap) {
                            var InternalState = (function () {
                                function InternalState(elementDataSize, elementKV, elementNext, elementHash) {
                                    this.elementDataSize = elementDataSize;
                                    this.elementKV = elementKV;
                                    this.elementNext = elementNext;
                                    this.elementHash = elementHash;
                                }
                                return InternalState;
                            })();
                            ArrayLongLongMap.InternalState = InternalState;
                        })(ArrayLongLongMap = impl.ArrayLongLongMap || (impl.ArrayLongLongMap = {}));
                        var ArrayLongLongTree = (function (_super) {
                            __extends(ArrayLongLongTree, _super);
                            function ArrayLongLongTree(p_universe, p_time, p_obj, p_space) {
                                _super.call(this, p_universe, p_time, p_obj, p_space);
                                this.kvSize = 2;
                            }
                            ArrayLongLongTree.prototype.previousOrEqualValue = function (p_key) {
                                var result = this.internal_previousOrEqual_index(p_key);
                                if (result != -1) {
                                    return this.value(result);
                                }
                                else {
                                    return org.kevoree.modeling.KConfig.NULL_LONG;
                                }
                            };
                            ArrayLongLongTree.prototype.lookupValue = function (p_key) {
                                return this.internal_lookup_value(p_key);
                            };
                            ArrayLongLongTree.prototype.insert = function (p_key, p_value) {
                                this.internal_insert(p_key, p_value);
                            };
                            ArrayLongLongTree.prototype.type = function () {
                                return org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_TREE;
                            };
                            return ArrayLongLongTree;
                        })(org.kevoree.modeling.memory.chunk.impl.AbstractArrayTree);
                        impl.ArrayLongLongTree = ArrayLongLongTree;
                        var ArrayLongMap = (function () {
                            function ArrayLongMap(initalCapacity, loadFactor) {
                            }
                            ArrayLongMap.prototype.clear = function () { for (var p in this) {
                                if (this.hasOwnProperty(p)) {
                                    delete this[p];
                                }
                            } };
                            ArrayLongMap.prototype.get = function (key) { return this[key]; };
                            ArrayLongMap.prototype.put = function (key, pval) { var previousVal = this[key]; this[key] = pval; return previousVal; };
                            ArrayLongMap.prototype.contains = function (key) { return this.hasOwnProperty(key); };
                            ArrayLongMap.prototype.remove = function (key) { var tmp = this[key]; delete this[key]; return tmp; };
                            ArrayLongMap.prototype.size = function () { return Object.keys(this).length; };
                            ArrayLongMap.prototype.each = function (callback) { for (var p in this) {
                                if (this.hasOwnProperty(p)) {
                                    callback(+p, this[p]);
                                }
                            } };
                            return ArrayLongMap;
                        })();
                        impl.ArrayLongMap = ArrayLongMap;
                        var ArrayLongTree = (function (_super) {
                            __extends(ArrayLongTree, _super);
                            function ArrayLongTree(p_universe, p_time, p_obj, p_space) {
                                _super.call(this, p_universe, p_time, p_obj, p_space);
                            }
                            ArrayLongTree.prototype.previousOrEqual = function (key) {
                                var result = this.internal_previousOrEqual_index(key);
                                if (result != -1) {
                                    return this.key(result);
                                }
                                else {
                                    return org.kevoree.modeling.KConfig.NULL_LONG;
                                }
                            };
                            ArrayLongTree.prototype.insertKey = function (p_key) {
                                this.internal_insert(p_key, p_key);
                            };
                            ArrayLongTree.prototype.type = function () {
                                return org.kevoree.modeling.memory.space.KChunkTypes.LONG_TREE;
                            };
                            return ArrayLongTree;
                        })(org.kevoree.modeling.memory.chunk.impl.AbstractArrayTree);
                        impl.ArrayLongTree = ArrayLongTree;
                        var ArrayStringMap = (function () {
                            function ArrayStringMap(initalCapacity, loadFactor) {
                            }
                            ArrayStringMap.prototype.clear = function () { for (var p in this) {
                                if (this.hasOwnProperty(p)) {
                                    delete this[p];
                                }
                            } };
                            ArrayStringMap.prototype.get = function (key) { return this[key]; };
                            ArrayStringMap.prototype.put = function (key, pval) { var previousVal = this[key]; this[key] = pval; return previousVal; };
                            ArrayStringMap.prototype.contains = function (key) { return this.hasOwnProperty(key); };
                            ArrayStringMap.prototype.remove = function (key) { var tmp = this[key]; delete this[key]; return tmp; };
                            ArrayStringMap.prototype.size = function () { return Object.keys(this).length; };
                            ArrayStringMap.prototype.each = function (callback) { for (var p in this) {
                                if (this.hasOwnProperty(p)) {
                                    callback(p, this[p]);
                                }
                            } };
                            return ArrayStringMap;
                        })();
                        impl.ArrayStringMap = ArrayStringMap;
                        var HeapObjectChunk = (function () {
                            function HeapObjectChunk(p_universe, p_time, p_obj, p_space) {
                                this._metaClassIndex = -1;
                                this._universe = p_universe;
                                this._time = p_time;
                                this._obj = p_obj;
                                this._flags = new java.util.concurrent.atomic.AtomicLong(0);
                                this._counter = new java.util.concurrent.atomic.AtomicInteger(0);
                                this._dependencies = new java.util.concurrent.atomic.AtomicReference();
                                this._space = p_space;
                            }
                            HeapObjectChunk.prototype.space = function () {
                                return this._space;
                            };
                            HeapObjectChunk.prototype.metaClassIndex = function () {
                                return this._metaClassIndex;
                            };
                            HeapObjectChunk.prototype.serialize = function (metaModel) {
                                var metaClass = metaModel.metaClass(this._metaClassIndex);
                                var builder = new java.lang.StringBuilder();
                                var isFirst = true;
                                var metaElements = metaClass.metaElements();
                                if (this.raw != null && metaElements != null) {
                                    for (var i = 0; i < this.raw.length && i < metaElements.length; i++) {
                                        if (this.raw[i] != null) {
                                            if (isFirst) {
                                                isFirst = false;
                                            }
                                            else {
                                                builder.append(org.kevoree.modeling.KConfig.CHUNK_ELEM_SEP);
                                            }
                                            org.kevoree.modeling.util.Base64.encodeStringToBuffer(metaElements[i].metaName(), builder);
                                            builder.append(org.kevoree.modeling.KConfig.CHUNK_VAL_SEP);
                                            if (metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.ATTRIBUTE) {
                                                var metaAttribute = metaElements[i];
                                                var metaAttId = metaAttribute.attributeTypeId();
                                                switch (metaAttId) {
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.STRING_ID:
                                                        org.kevoree.modeling.util.Base64.encodeStringToBuffer(this.raw[i], builder);
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.LONG_ID:
                                                        org.kevoree.modeling.util.Base64.encodeLongToBuffer(this.raw[i], builder);
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID:
                                                        var castedArr = this.raw[i];
                                                        org.kevoree.modeling.util.Base64.encodeIntToBuffer(castedArr.length, builder);
                                                        for (var j = 0; j < castedArr.length; j++) {
                                                            builder.append(org.kevoree.modeling.KConfig.CHUNK_VAL_SEP);
                                                            org.kevoree.modeling.util.Base64.encodeDoubleToBuffer(castedArr[j], builder);
                                                        }
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.BOOL_ID:
                                                        if (this.raw[i]) {
                                                            builder.append("1");
                                                        }
                                                        else {
                                                            builder.append("0");
                                                        }
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE_ID:
                                                        org.kevoree.modeling.util.Base64.encodeDoubleToBuffer(this.raw[i], builder);
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.INT_ID:
                                                        org.kevoree.modeling.util.Base64.encodeIntToBuffer(this.raw[i], builder);
                                                        break;
                                                    default:
                                                        if (org.kevoree.modeling.meta.KPrimitiveTypes.isEnum(metaAttribute.attributeTypeId())) {
                                                            org.kevoree.modeling.util.Base64.encodeIntToBuffer(this.raw[i], builder);
                                                        }
                                                        break;
                                                }
                                            }
                                            else {
                                                if (metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.RELATION) {
                                                    var castedArr = this.raw[i];
                                                    org.kevoree.modeling.util.Base64.encodeIntToBuffer(castedArr.length, builder);
                                                    for (var j = 0; j < castedArr.length; j++) {
                                                        builder.append(org.kevoree.modeling.KConfig.CHUNK_VAL_SEP);
                                                        org.kevoree.modeling.util.Base64.encodeLongToBuffer(castedArr[j], builder);
                                                    }
                                                }
                                                else {
                                                    if (metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.DEPENDENCIES || metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.INPUT || metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.OUTPUT) {
                                                        var castedArr = this.raw[i];
                                                        org.kevoree.modeling.util.Base64.encodeIntToBuffer(castedArr.length, builder);
                                                        for (var j = 0; j < castedArr.length; j++) {
                                                            builder.append(org.kevoree.modeling.KConfig.CHUNK_VAL_SEP);
                                                            org.kevoree.modeling.util.Base64.encodeDoubleToBuffer(castedArr[j], builder);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                return builder.toString();
                            };
                            HeapObjectChunk.prototype.loadObject = function (metaAttribute, p_payload, p_start, p_end) {
                                var metaAttId = metaAttribute.attributeTypeId();
                                switch (metaAttId) {
                                    case org.kevoree.modeling.meta.KPrimitiveTypes.STRING_ID:
                                        return org.kevoree.modeling.util.Base64.decodeToStringWithBounds(p_payload, p_start, p_end);
                                    case org.kevoree.modeling.meta.KPrimitiveTypes.LONG_ID:
                                        return org.kevoree.modeling.util.Base64.decodeToLongWithBounds(p_payload, p_start, p_end);
                                    case org.kevoree.modeling.meta.KPrimitiveTypes.INT_ID:
                                        return org.kevoree.modeling.util.Base64.decodeToIntWithBounds(p_payload, p_start, p_end);
                                    case org.kevoree.modeling.meta.KPrimitiveTypes.BOOL_ID:
                                        if (p_payload.charAt(p_start) == '1') {
                                            return true;
                                        }
                                        else {
                                            return false;
                                        }
                                    case org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE_ID:
                                        return org.kevoree.modeling.util.Base64.decodeToDoubleWithBounds(p_payload, p_start, p_end);
                                    default:
                                        return null;
                                }
                            };
                            HeapObjectChunk.prototype.init = function (payload, metaModel, metaClassIndex) {
                                if (this._metaClassIndex == -1) {
                                    this._metaClassIndex = metaClassIndex;
                                }
                                if (this._metaClassIndex == -1) {
                                    return;
                                }
                                var metaClass = metaModel.metaClass(this._metaClassIndex);
                                this.raw = new Array();
                                if (payload != null) {
                                    var i = 0;
                                    var payloadSize = payload.length;
                                    var previousMeta = null;
                                    var previousValStart = 0;
                                    var doubleArray = null;
                                    var longArray = null;
                                    var currentArrayIndex = -1;
                                    while (i < payloadSize) {
                                        if (payload.charAt(i) == org.kevoree.modeling.KConfig.CHUNK_ELEM_SEP) {
                                            if (previousMeta != null) {
                                                if (previousMeta.metaType().equals(org.kevoree.modeling.meta.MetaType.ATTRIBUTE) && previousMeta.attributeTypeId() != org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID) {
                                                    this.raw[previousMeta.index()] = this.loadObject(previousMeta, payload, previousValStart, i);
                                                }
                                                else {
                                                    if (previousMeta.metaType().equals(org.kevoree.modeling.meta.MetaType.RELATION) && longArray != null) {
                                                        longArray[currentArrayIndex] = org.kevoree.modeling.util.Base64.decodeToLongWithBounds(payload, previousValStart, i);
                                                        this.raw[previousMeta.index()] = longArray;
                                                        longArray = null;
                                                    }
                                                    else {
                                                        if (doubleArray != null) {
                                                            doubleArray[currentArrayIndex] = org.kevoree.modeling.util.Base64.decodeToDoubleWithBounds(payload, previousValStart, i);
                                                            this.raw[previousMeta.index()] = doubleArray;
                                                            doubleArray = null;
                                                        }
                                                    }
                                                }
                                            }
                                            previousMeta = null;
                                            previousValStart = i + 1;
                                        }
                                        else {
                                            if (payload.charAt(i) == org.kevoree.modeling.KConfig.CHUNK_VAL_SEP) {
                                                if (previousMeta == null) {
                                                    previousMeta = metaClass.metaByName(org.kevoree.modeling.util.Base64.decodeToStringWithBounds(payload, previousValStart, i));
                                                }
                                                else {
                                                    if (previousMeta.metaType().equals(org.kevoree.modeling.meta.MetaType.RELATION)) {
                                                        if (longArray == null) {
                                                            longArray = new Float64Array(org.kevoree.modeling.util.Base64.decodeToIntWithBounds(payload, previousValStart, i));
                                                            currentArrayIndex = 0;
                                                        }
                                                        else {
                                                            longArray[currentArrayIndex] = org.kevoree.modeling.util.Base64.decodeToLongWithBounds(payload, previousValStart, i);
                                                            currentArrayIndex++;
                                                        }
                                                    }
                                                    else {
                                                        if (doubleArray == null) {
                                                            doubleArray = new Float64Array(org.kevoree.modeling.util.Base64.decodeToIntWithBounds(payload, previousValStart, i));
                                                            currentArrayIndex = 0;
                                                        }
                                                        else {
                                                            doubleArray[currentArrayIndex] = org.kevoree.modeling.util.Base64.decodeToDoubleWithBounds(payload, previousValStart, i);
                                                            currentArrayIndex++;
                                                        }
                                                    }
                                                }
                                                previousValStart = i + 1;
                                            }
                                        }
                                        i++;
                                    }
                                    if (previousMeta != null) {
                                        if (previousMeta.metaType().equals(org.kevoree.modeling.meta.MetaType.ATTRIBUTE) && previousMeta.attributeTypeId() != org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID) {
                                            this.raw[previousMeta.index()] = this.loadObject(previousMeta, payload, previousValStart, i);
                                        }
                                        else {
                                            if (previousMeta.metaType().equals(org.kevoree.modeling.meta.MetaType.RELATION) && longArray != null) {
                                                longArray[currentArrayIndex] = org.kevoree.modeling.util.Base64.decodeToLongWithBounds(payload, previousValStart, i);
                                                this.raw[previousMeta.index()] = longArray;
                                            }
                                            else {
                                                if (doubleArray != null) {
                                                    doubleArray[currentArrayIndex] = org.kevoree.modeling.util.Base64.decodeToDoubleWithBounds(payload, previousValStart, i);
                                                    this.raw[previousMeta.index()] = doubleArray;
                                                }
                                            }
                                        }
                                    }
                                }
                            };
                            HeapObjectChunk.prototype.counter = function () {
                                return this._counter.get();
                            };
                            HeapObjectChunk.prototype.inc = function () {
                                return this._counter.incrementAndGet();
                            };
                            HeapObjectChunk.prototype.dec = function () {
                                return this._counter.decrementAndGet();
                            };
                            HeapObjectChunk.prototype.free = function (metaModel) {
                                this.raw = null;
                            };
                            HeapObjectChunk.prototype.type = function () {
                                return org.kevoree.modeling.memory.space.KChunkTypes.OBJECT_CHUNK;
                            };
                            HeapObjectChunk.prototype.getPrimitiveType = function (index, p_metaClass) {
                                if (this.raw != null) {
                                    return this.raw[index];
                                }
                                else {
                                    return null;
                                }
                            };
                            HeapObjectChunk.prototype.getLongArraySize = function (index, metaClass) {
                                var existing = this.raw[index];
                                if (existing != null) {
                                    return existing.length;
                                }
                                return 0;
                            };
                            HeapObjectChunk.prototype.getLongArrayElem = function (index, refIndex, metaClass) {
                                var existing = this.raw[index];
                                if (existing != null) {
                                    return existing[refIndex];
                                }
                                else {
                                    return org.kevoree.modeling.KConfig.NULL_LONG;
                                }
                            };
                            HeapObjectChunk.prototype.getLongArray = function (index, p_metaClass) {
                                var previousObj = this.raw[index];
                                if (previousObj != null) {
                                    return previousObj;
                                }
                                return null;
                            };
                            HeapObjectChunk.prototype.addLongToArray = function (index, newRef, metaClass) {
                                if (this.raw != null) {
                                    var previous = this.raw[index];
                                    if (previous == null) {
                                        previous = new Float64Array(1);
                                        previous[0] = newRef;
                                    }
                                    else {
                                        for (var i = 0; i < previous.length; i++) {
                                            if (previous[i] == newRef) {
                                                return false;
                                            }
                                        }
                                        var incArray = new Float64Array(previous.length + 1);
                                        java.lang.System.arraycopy(previous, 0, incArray, 0, previous.length);
                                        incArray[previous.length] = newRef;
                                        previous = incArray;
                                    }
                                    this.raw[index] = previous;
                                    this.internal_set_dirty();
                                    return true;
                                }
                                return false;
                            };
                            HeapObjectChunk.prototype.removeLongToArray = function (index, refToRemove, metaClass) {
                                if (this.raw != null) {
                                    var previous = this.raw[index];
                                    if (previous != null) {
                                        var indexToRemove = -1;
                                        for (var i = 0; i < previous.length; i++) {
                                            if (previous[i] == refToRemove) {
                                                indexToRemove = i;
                                                break;
                                            }
                                        }
                                        if (indexToRemove != -1) {
                                            if ((previous.length - 1) == 0) {
                                                this.raw[index] = null;
                                            }
                                            else {
                                                var newArray = new Float64Array(previous.length - 1);
                                                java.lang.System.arraycopy(previous, 0, newArray, 0, indexToRemove);
                                                java.lang.System.arraycopy(previous, indexToRemove + 1, newArray, indexToRemove, previous.length - indexToRemove - 1);
                                                this.raw[index] = newArray;
                                            }
                                            this.internal_set_dirty();
                                            return true;
                                        }
                                    }
                                }
                                return false;
                            };
                            HeapObjectChunk.prototype.clearLongArray = function (index, metaClass) {
                                this.raw[index] = null;
                            };
                            HeapObjectChunk.prototype.getDoubleArray = function (index, metaClass) {
                                var previousObj = this.raw[index];
                                if (previousObj != null) {
                                    return previousObj;
                                }
                                return null;
                            };
                            HeapObjectChunk.prototype.getDoubleArraySize = function (index, metaClass) {
                                var previousObj = this.raw[index];
                                if (previousObj != null) {
                                    return previousObj.length;
                                }
                                return 0;
                            };
                            HeapObjectChunk.prototype.getDoubleArrayElem = function (index, arrayIndex, metaClass) {
                                var res = this.getDoubleArray(index, metaClass);
                                if (org.kevoree.modeling.util.Checker.isDefined(res)) {
                                    return res[arrayIndex];
                                }
                                return 0;
                            };
                            HeapObjectChunk.prototype.setDoubleArrayElem = function (index, arrayIndex, valueToInsert, metaClass) {
                                var res = this.getDoubleArray(index, metaClass);
                                if (org.kevoree.modeling.util.Checker.isDefined(res)) {
                                    res[arrayIndex] = valueToInsert;
                                    this.internal_set_dirty();
                                }
                            };
                            HeapObjectChunk.prototype.extendDoubleArray = function (index, newSize, metaClass) {
                                if (this.raw != null) {
                                    var previous = this.raw[index];
                                    if (previous == null) {
                                        previous = new Float64Array(newSize);
                                    }
                                    else {
                                        var incArray = new Float64Array(newSize);
                                        java.lang.System.arraycopy(previous, 0, incArray, 0, previous.length);
                                        previous = incArray;
                                    }
                                    this.raw[index] = previous;
                                    this.internal_set_dirty();
                                }
                            };
                            HeapObjectChunk.prototype.clearDoubleArray = function (index, metaClass) {
                                this.raw[index] = null;
                            };
                            HeapObjectChunk.prototype.setPrimitiveType = function (index, content, p_metaClass) {
                                this.raw[index] = content;
                                this.internal_set_dirty();
                            };
                            HeapObjectChunk.prototype.clone = function (p_universe, p_time, p_obj, p_metaClass) {
                                if (this.raw == null) {
                                    return new org.kevoree.modeling.memory.chunk.impl.HeapObjectChunk(p_universe, p_time, p_obj, this._space);
                                }
                                else {
                                    var cloned = new Array();
                                    java.lang.System.arraycopy(this.raw, 0, cloned, 0, this.raw.length);
                                    var clonedEntry = new org.kevoree.modeling.memory.chunk.impl.HeapObjectChunk(p_universe, p_time, p_obj, this._space);
                                    clonedEntry.raw = cloned;
                                    clonedEntry._metaClassIndex = this._metaClassIndex;
                                    clonedEntry.internal_set_dirty();
                                    return clonedEntry;
                                }
                            };
                            HeapObjectChunk.prototype.toJSON = function (metaModel) {
                                var metaClass = metaModel.metaClass(this._metaClassIndex);
                                var builder = new java.lang.StringBuilder();
                                builder.append("{");
                                var isFirst = true;
                                var metaElements = metaClass.metaElements();
                                if (this.raw != null && metaElements != null) {
                                    for (var i = 0; i < this.raw.length && i < metaElements.length; i++) {
                                        if (this.raw[i] != null) {
                                            if (isFirst) {
                                                builder.append("\"");
                                                isFirst = false;
                                            }
                                            else {
                                                builder.append(",\"");
                                            }
                                            builder.append(metaElements[i].metaName());
                                            builder.append("\":");
                                            if (metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.ATTRIBUTE) {
                                                var metaAttribute = metaElements[i];
                                                var metaAttId = metaAttribute.attributeTypeId();
                                                switch (metaAttId) {
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.STRING_ID:
                                                        builder.append("\"");
                                                        builder.append(org.kevoree.modeling.format.json.JsonString.encode(this.raw[i]));
                                                        builder.append("\"");
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.LONG_ID:
                                                        builder.append(this.raw[i]);
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID:
                                                        builder.append("[");
                                                        var castedArr = this.raw[i];
                                                        for (var j = 0; j < castedArr.length; j++) {
                                                            if (j != 0) {
                                                                builder.append(",");
                                                            }
                                                            builder.append(castedArr[j]);
                                                        }
                                                        builder.append("]");
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.BOOL_ID:
                                                        if (this.raw[i]) {
                                                            builder.append("1");
                                                        }
                                                        else {
                                                            builder.append("0");
                                                        }
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE_ID:
                                                        builder.append(this.raw[i]);
                                                        break;
                                                    case org.kevoree.modeling.meta.KPrimitiveTypes.INT_ID:
                                                        builder.append(this.raw[i]);
                                                        break;
                                                    default:
                                                        if (org.kevoree.modeling.meta.KPrimitiveTypes.isEnum(metaAttribute.attributeTypeId())) {
                                                            org.kevoree.modeling.util.Base64.encodeIntToBuffer(this.raw[i], builder);
                                                        }
                                                        break;
                                                }
                                            }
                                            else {
                                                if (metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.RELATION) {
                                                    builder.append("[");
                                                    var castedArr = this.raw[i];
                                                    for (var j = 0; j < castedArr.length; j++) {
                                                        if (j != 0) {
                                                            builder.append(",");
                                                        }
                                                        builder.append(castedArr[j]);
                                                    }
                                                    builder.append("]");
                                                }
                                                else {
                                                    if (metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.DEPENDENCIES || metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.INPUT || metaElements[i].metaType() == org.kevoree.modeling.meta.MetaType.OUTPUT) {
                                                        builder.append("[");
                                                        var castedArr = this.raw[i];
                                                        for (var j = 0; j < castedArr.length; j++) {
                                                            if (j != 0) {
                                                                builder.append(",");
                                                            }
                                                            builder.append(castedArr[j]);
                                                        }
                                                        builder.append("]");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                builder.append("}");
                                return builder.toString();
                            };
                            HeapObjectChunk.prototype.internal_set_dirty = function () {
                                if (this._space != null) {
                                    if ((this._flags.get() & org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) != org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) {
                                        this._space.declareDirty(this);
                                        this.setFlags(org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT, 0);
                                    }
                                }
                                else {
                                    this.setFlags(org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT, 0);
                                }
                            };
                            HeapObjectChunk.prototype.getFlags = function () {
                                return this._flags.get();
                            };
                            HeapObjectChunk.prototype.setFlags = function (bitsToEnable, bitsToDisable) {
                                var val;
                                var nval;
                                do {
                                    val = this._flags.get();
                                    nval = val & ~bitsToDisable | bitsToEnable;
                                } while (!this._flags.compareAndSet(val, nval));
                            };
                            HeapObjectChunk.prototype.universe = function () {
                                return this._universe;
                            };
                            HeapObjectChunk.prototype.time = function () {
                                return this._time;
                            };
                            HeapObjectChunk.prototype.obj = function () {
                                return this._obj;
                            };
                            HeapObjectChunk.prototype.dependencies = function () {
                                return this._dependencies.get();
                            };
                            HeapObjectChunk.prototype.addDependency = function (universe, time, uuid) {
                                var previousVal;
                                var newVal;
                                do {
                                    previousVal = this._dependencies.get();
                                    if (previousVal == null) {
                                        newVal = new Float64Array([universe, time, uuid]);
                                    }
                                    else {
                                        newVal = new Float64Array(previousVal.length + 3);
                                        var previousLength = previousVal.length;
                                        java.lang.System.arraycopy(previousVal, 0, newVal, 0, previousLength);
                                        newVal[previousLength] = universe;
                                        newVal[previousLength + 1] = time;
                                        newVal[previousLength + 2] = uuid;
                                    }
                                } while (!this._dependencies.compareAndSet(previousVal, newVal));
                            };
                            return HeapObjectChunk;
                        })();
                        impl.HeapObjectChunk = HeapObjectChunk;
                    })(impl = chunk.impl || (chunk.impl = {}));
                })(chunk = memory.chunk || (memory.chunk = {}));
                var manager;
                (function (manager) {
                    var DataManagerBuilder = (function () {
                        function DataManagerBuilder() {
                        }
                        DataManagerBuilder.prototype.driver = function () {
                            if (this._driver == null) {
                                this._driver = new org.kevoree.modeling.cdn.impl.MemoryContentDeliveryDriver();
                            }
                            return this._driver;
                        };
                        DataManagerBuilder.prototype.blas = function () {
                            if (this._blas == null) {
                                this._blas = new org.kevoree.modeling.util.maths.structure.blas.impl.JavaBlas();
                            }
                            return this._blas;
                        };
                        DataManagerBuilder.prototype.scheduler = function () {
                            if (this._scheduler == null) {
                                this._scheduler = new org.kevoree.modeling.scheduler.impl.DirectScheduler();
                            }
                            return this._scheduler;
                        };
                        DataManagerBuilder.prototype.strategy = function () {
                            if (this._strategy == null) {
                                this._strategy = new org.kevoree.modeling.memory.strategy.impl.HeapMemoryStrategy();
                            }
                            return this._strategy;
                        };
                        DataManagerBuilder.create = function () {
                            return new org.kevoree.modeling.memory.manager.DataManagerBuilder();
                        };
                        DataManagerBuilder.prototype.withContentDeliveryDriver = function (p_driver) {
                            this._driver = p_driver;
                            return this;
                        };
                        DataManagerBuilder.prototype.withScheduler = function (p_scheduler) {
                            this._scheduler = p_scheduler;
                            return this;
                        };
                        DataManagerBuilder.prototype.withMemoryStrategy = function (p_strategy) {
                            this._strategy = p_strategy;
                            return this;
                        };
                        DataManagerBuilder.prototype.withBlas = function (p_blas) {
                            this._blas = p_blas;
                            return this;
                        };
                        DataManagerBuilder.prototype.build = function () {
                            return new org.kevoree.modeling.memory.manager.impl.DataManager(this.driver(), this.scheduler(), this.strategy(), this.blas());
                        };
                        DataManagerBuilder.buildDefault = function () {
                            return org.kevoree.modeling.memory.manager.DataManagerBuilder.create().build();
                        };
                        return DataManagerBuilder;
                    })();
                    manager.DataManagerBuilder = DataManagerBuilder;
                    var impl;
                    (function (impl) {
                        var DataManager = (function () {
                            function DataManager(p_cdn, p_scheduler, p_factory, p_blas) {
                                this._objectKeyCalculator = null;
                                this._universeKeyCalculator = null;
                                this.isConnected = false;
                                this.currentCdnListener = -1;
                                this._space = p_factory.newSpace();
                                this._scheduler = p_scheduler;
                                this._spaceManager = p_factory.newSpaceManager(this._space, this._scheduler);
                                this._resolver = new org.kevoree.modeling.memory.resolver.impl.DistortedTimeResolver(this._spaceManager, this);
                                this._listenerManager = new org.kevoree.modeling.memory.manager.impl.ListenerManager();
                                this._modelKeyCalculator = new org.kevoree.modeling.memory.manager.impl.KeyCalculator(DataManager.zeroPrefix, 0);
                                this._db = p_cdn;
                                this.attachContentDeliveryDriver(new org.kevoree.modeling.cdn.impl.MemoryContentDeliveryDriver());
                                this._operationManager = new org.kevoree.modeling.operation.impl.HashOperationManager(this);
                                this._blas = p_blas;
                            }
                            DataManager.prototype.setModel = function (p_model) {
                                this._model = p_model;
                            };
                            DataManager.prototype.model = function () {
                                return this._model;
                            };
                            DataManager.prototype.blas = function () {
                                return this._blas;
                            };
                            DataManager.prototype.nextUniverseKey = function () {
                                if (this._universeKeyCalculator == null) {
                                    throw new Error(DataManager.UNIVERSE_NOT_CONNECTED_ERROR);
                                }
                                return this._universeKeyCalculator.nextKey();
                            };
                            DataManager.prototype.nextObjectKey = function () {
                                if (this._objectKeyCalculator == null) {
                                    throw new Error(DataManager.UNIVERSE_NOT_CONNECTED_ERROR);
                                }
                                return this._objectKeyCalculator.nextKey();
                            };
                            DataManager.prototype.nextModelKey = function () {
                                return this._modelKeyCalculator.nextKey();
                            };
                            DataManager.prototype.initUniverse = function (p_universe, p_parent) {
                                var cached = this._space.get(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG);
                                if (cached != null && !cached.contains(p_universe)) {
                                    cached.put(p_universe, p_parent);
                                }
                            };
                            DataManager.prototype.save = function (callback) {
                                var selfPointer = this;
                                this._scheduler.dispatch(function () {
                                    var dirtyIterator = selfPointer._space.detachDirties();
                                    if (dirtyIterator.size() == 0) {
                                        if (callback != null) {
                                            callback(null);
                                        }
                                        return;
                                    }
                                    var toSaveKeys = new Float64Array((dirtyIterator.size() + DataManager.PREFIX_TO_SAVE_SIZE) * DataManager.KEY_SIZE);
                                    var toSaveValues = new Array();
                                    var i = 0;
                                    var _mm = selfPointer._model.metaModel();
                                    while (dirtyIterator.hasNext()) {
                                        var loopChunkKeys = dirtyIterator.next();
                                        var loopChunk = selfPointer._spaceManager.getAndMark(loopChunkKeys[0], loopChunkKeys[1], loopChunkKeys[2]);
                                        if (loopChunk != null && (loopChunk.getFlags() & org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) == org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT && (loopChunk.getFlags() & org.kevoree.modeling.memory.KChunkFlags.REMOVED_BIT) != org.kevoree.modeling.memory.KChunkFlags.REMOVED_BIT) {
                                            toSaveKeys[i * DataManager.KEY_SIZE] = loopChunk.universe();
                                            toSaveKeys[i * DataManager.KEY_SIZE + 1] = loopChunk.time();
                                            toSaveKeys[i * DataManager.KEY_SIZE + 2] = loopChunk.obj();
                                            try {
                                                toSaveValues[i] = loopChunk.serialize(_mm);
                                                loopChunk.setFlags(0, org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT);
                                                i++;
                                            }
                                            catch ($ex$) {
                                                if ($ex$ instanceof Error) {
                                                    var e = $ex$;
                                                    console.error(e['stack']);
                                                    ;
                                                }
                                                else {
                                                    throw $ex$;
                                                }
                                            }
                                            selfPointer._spaceManager.unmarkMemoryElement(loopChunk);
                                        }
                                    }
                                    toSaveKeys[i * DataManager.KEY_SIZE] = org.kevoree.modeling.KConfig.BEGINNING_OF_TIME;
                                    toSaveKeys[i * DataManager.KEY_SIZE + 1] = org.kevoree.modeling.KConfig.NULL_LONG;
                                    toSaveKeys[i * DataManager.KEY_SIZE + 2] = selfPointer._objectKeyCalculator.prefix();
                                    toSaveValues[i] = "" + selfPointer._objectKeyCalculator.lastComputedIndex();
                                    i++;
                                    toSaveKeys[i * DataManager.KEY_SIZE] = org.kevoree.modeling.KConfig.END_OF_TIME;
                                    toSaveKeys[i * DataManager.KEY_SIZE + 1] = org.kevoree.modeling.KConfig.NULL_LONG;
                                    toSaveKeys[i * DataManager.KEY_SIZE + 2] = selfPointer._universeKeyCalculator.prefix();
                                    toSaveValues[i] = "" + selfPointer._universeKeyCalculator.lastComputedIndex();
                                    selfPointer._db.put(toSaveKeys, toSaveValues, callback, selfPointer.currentCdnListener);
                                });
                            };
                            DataManager.prototype.initKObject = function (obj) {
                                this._resolver.indexObject(obj);
                            };
                            DataManager.prototype.preciseChunk = function (universe, time, uuid, metaClass, previousResolution) {
                                var resolvedChunk = this._resolver.preciseChunk(universe, time, uuid, metaClass, previousResolution);
                                if (resolvedChunk != null) {
                                    return resolvedChunk;
                                }
                                else {
                                    throw new Error("Cache Miss, not implemented Yet " + universe + "," + time + "," + uuid);
                                }
                            };
                            DataManager.prototype.closestChunk = function (universe, time, uuid, metaClass, previousResolution) {
                                var resolvedChunk = this._resolver.closestChunk(universe, time, uuid, metaClass, previousResolution);
                                if (resolvedChunk != null) {
                                    return resolvedChunk;
                                }
                                else {
                                    throw new Error("Cache Miss, not implemented Yet " + universe + "," + time + "," + uuid);
                                }
                            };
                            DataManager.prototype.connect = function (connectCallback) {
                                if (this.isConnected) {
                                    if (connectCallback != null) {
                                        connectCallback(null);
                                    }
                                }
                                if (this._db == null) {
                                    if (connectCallback != null) {
                                        connectCallback(new Error("Please attach a KDataBase AND a KBroker first !"));
                                    }
                                }
                                else {
                                    var selfPointer = this;
                                    selfPointer._scheduler.start();
                                    selfPointer._scheduler.dispatch(function () {
                                        selfPointer._db.connect(function (throwable) {
                                            if (throwable == null) {
                                                var mappings = selfPointer._operationManager.mappings();
                                                if (mappings != null && mappings.length >= 1) {
                                                    var operationMapping = new org.kevoree.modeling.message.impl.Message();
                                                    operationMapping.setType(org.kevoree.modeling.message.impl.Message.OPERATION_MAPPING);
                                                    operationMapping.setValues(mappings);
                                                    selfPointer._db.sendToPeer(null, operationMapping, null);
                                                }
                                                selfPointer._db.atomicGetIncrement(new Float64Array([org.kevoree.modeling.KConfig.END_OF_TIME, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG]), function (newPrefix) {
                                                    selfPointer._prefix = newPrefix;
                                                    var connectionKeys = new Float64Array([org.kevoree.modeling.KConfig.BEGINNING_OF_TIME, org.kevoree.modeling.KConfig.NULL_LONG, newPrefix, org.kevoree.modeling.KConfig.END_OF_TIME, org.kevoree.modeling.KConfig.NULL_LONG, newPrefix, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG]);
                                                    selfPointer._db.get(connectionKeys, function (strings) {
                                                        if (strings.length == 3) {
                                                            var detected = null;
                                                            try {
                                                                var uniIndexPayload = strings[DataManager.UNIVERSE_INDEX];
                                                                if (uniIndexPayload == null || org.kevoree.modeling.util.PrimitiveHelper.equals(uniIndexPayload, "")) {
                                                                    uniIndexPayload = "0";
                                                                }
                                                                var objIndexPayload = strings[DataManager.OBJ_INDEX];
                                                                if (objIndexPayload == null || org.kevoree.modeling.util.PrimitiveHelper.equals(objIndexPayload, "")) {
                                                                    objIndexPayload = "0";
                                                                }
                                                                var globalUniverseTreePayload = strings[DataManager.GLO_TREE_INDEX];
                                                                var globalUniverseTree = selfPointer._spaceManager.createAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_MAP);
                                                                if (globalUniverseTreePayload != null) {
                                                                    try {
                                                                        globalUniverseTree.init(globalUniverseTreePayload, selfPointer.model().metaModel(), -1);
                                                                    }
                                                                    catch ($ex$) {
                                                                        if ($ex$ instanceof Error) {
                                                                            var e = $ex$;
                                                                            console.error(e['stack']);
                                                                            ;
                                                                        }
                                                                        else {
                                                                            throw $ex$;
                                                                        }
                                                                    }
                                                                }
                                                                var newUniIndex = org.kevoree.modeling.util.PrimitiveHelper.parseLong(uniIndexPayload);
                                                                var newObjIndex = org.kevoree.modeling.util.PrimitiveHelper.parseLong(objIndexPayload);
                                                                selfPointer._universeKeyCalculator = new org.kevoree.modeling.memory.manager.impl.KeyCalculator(selfPointer._prefix, newUniIndex);
                                                                selfPointer._objectKeyCalculator = new org.kevoree.modeling.memory.manager.impl.KeyCalculator(selfPointer._prefix, newObjIndex);
                                                                selfPointer.isConnected = true;
                                                            }
                                                            catch ($ex$) {
                                                                if ($ex$ instanceof Error) {
                                                                    var e = $ex$;
                                                                    detected = e;
                                                                }
                                                                else {
                                                                    throw $ex$;
                                                                }
                                                            }
                                                            if (connectCallback != null) {
                                                                connectCallback(detected);
                                                            }
                                                        }
                                                        else {
                                                            if (connectCallback != null) {
                                                                connectCallback(new Error("Error while connecting the KDataStore..."));
                                                            }
                                                        }
                                                    });
                                                });
                                            }
                                            else {
                                                if (connectCallback != null) {
                                                    connectCallback(throwable);
                                                }
                                            }
                                        });
                                    });
                                }
                            };
                            DataManager.prototype.close = function (callback) {
                                if (this.isConnected) {
                                    this._scheduler.stop();
                                    this.isConnected = false;
                                    if (this._db != null) {
                                        this._db.close(callback);
                                    }
                                    else {
                                        if (callback != null) {
                                            callback(null);
                                        }
                                    }
                                }
                                else {
                                    if (callback != null) {
                                        callback(null);
                                    }
                                }
                            };
                            DataManager.prototype.deleteUniverse = function (p_universe, callback) {
                                throw new Error("Not implemented yet !");
                            };
                            DataManager.prototype.lookup = function (universe, time, uuid, callback) {
                                this._scheduler.dispatch(this._resolver.lookup(universe, time, uuid, callback));
                            };
                            DataManager.prototype.lookupAllObjects = function (universe, time, uuids, callback) {
                                this._scheduler.dispatch(this._resolver.lookupAllObjects(universe, time, uuids, callback));
                            };
                            DataManager.prototype.lookupAllTimes = function (universe, times, uuid, callback) {
                                this._scheduler.dispatch(this._resolver.lookupAllTimes(universe, times, uuid, callback));
                            };
                            DataManager.prototype.createPreparedLookup = function (p_size) {
                                return new org.kevoree.modeling.memory.manager.impl.PreparedLookup(p_size);
                            };
                            DataManager.prototype.lookupPrepared = function (prepared, callback) {
                                this._scheduler.dispatch(this._resolver.lookupPrepared(prepared, callback));
                            };
                            DataManager.prototype.getRoot = function (universe, time, callback) {
                                this._resolver.getRoot(universe, time, callback);
                            };
                            DataManager.prototype.setRoot = function (newRoot, callback) {
                                this._resolver.setRoot(newRoot, callback);
                            };
                            DataManager.prototype.cdn = function () {
                                return this._db;
                            };
                            DataManager.prototype.scheduler = function () {
                                return this._scheduler;
                            };
                            DataManager.prototype.attachContentDeliveryDriver = function (p_dataBase) {
                                var selfPointer = this;
                                this.currentCdnListener = selfPointer._db.addUpdateListener({ onKeysUpdate: function (updatedKeys) {
                                        var toLoadKeys = new Float64Array(updatedKeys.length);
                                        var toInsertNotifyKey = 0;
                                        var toNotifyKeys = new Float64Array(updatedKeys.length);
                                        var nbElements = updatedKeys.length / DataManager.KEY_SIZE;
                                        var toInsertKey = 0;
                                        for (var i = 0; i < nbElements; i++) {
                                            var currentChunk = selfPointer._spaceManager.getAndMark(updatedKeys[i * 3], updatedKeys[i * 3 + 1], updatedKeys[i * 3 + 2]);
                                            if (currentChunk != null) {
                                                if ((currentChunk.getFlags() & org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) != org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) {
                                                    toLoadKeys[toInsertKey * DataManager.KEY_SIZE] = updatedKeys[i * DataManager.KEY_SIZE];
                                                    toLoadKeys[toInsertKey * DataManager.KEY_SIZE + 1] = updatedKeys[i * DataManager.KEY_SIZE + 1];
                                                    toLoadKeys[toInsertKey * DataManager.KEY_SIZE + 2] = updatedKeys[i * DataManager.KEY_SIZE + 2];
                                                    toInsertKey++;
                                                }
                                                selfPointer._spaceManager.unmarkMemoryElement(currentChunk);
                                            }
                                            if (selfPointer._listenerManager.isListened(updatedKeys[i * DataManager.KEY_SIZE + 2]) && updatedKeys[i * DataManager.KEY_SIZE] != org.kevoree.modeling.KConfig.NULL_LONG && updatedKeys[i * DataManager.KEY_SIZE + 1] != org.kevoree.modeling.KConfig.NULL_LONG && updatedKeys[i * DataManager.KEY_SIZE + 2] != org.kevoree.modeling.KConfig.NULL_LONG) {
                                                toNotifyKeys[toInsertNotifyKey * DataManager.KEY_SIZE] = updatedKeys[i * DataManager.KEY_SIZE];
                                                toNotifyKeys[toInsertNotifyKey * DataManager.KEY_SIZE + 1] = updatedKeys[i * DataManager.KEY_SIZE + 1];
                                                toNotifyKeys[toInsertNotifyKey * DataManager.KEY_SIZE + 2] = updatedKeys[i * DataManager.KEY_SIZE + 2];
                                                toInsertNotifyKey++;
                                            }
                                        }
                                        if (toInsertKey == 0 && toInsertNotifyKey == 0) {
                                            return;
                                        }
                                        var trimmedToLoad = new Float64Array(toInsertKey * 3);
                                        java.lang.System.arraycopy(toLoadKeys, 0, trimmedToLoad, 0, toInsertKey * 3);
                                        var trimmedToNotify = new Float64Array(toInsertNotifyKey * 3);
                                        java.lang.System.arraycopy(toNotifyKeys, 0, trimmedToNotify, 0, toInsertNotifyKey * 3);
                                        var mm = selfPointer._model.metaModel();
                                        selfPointer._db.get(trimmedToLoad, function (payloads) {
                                            for (var i = 0; i < payloads.length; i++) {
                                                if (payloads[i] != null) {
                                                    var currentChunk = selfPointer._spaceManager.getAndMark(trimmedToLoad[i * 3], trimmedToLoad[i * 3 + 1], trimmedToLoad[i * 3 + 2]);
                                                    if (currentChunk != null) {
                                                        currentChunk.init(payloads[i], mm, -1);
                                                        selfPointer._spaceManager.unmarkMemoryElement(currentChunk);
                                                    }
                                                }
                                            }
                                            selfPointer._resolver.lookupPreciseKeys(trimmedToNotify, function (updatedObjects) {
                                                selfPointer._listenerManager.dispatch(updatedObjects);
                                            })();
                                        });
                                    }, onOperationCall: function (operationCallMessage) {
                                        selfPointer._operationManager.dispatch(operationCallMessage);
                                    } });
                            };
                            DataManager.prototype.operationManager = function () {
                                return this._operationManager;
                            };
                            DataManager.prototype.createListener = function (p_universe) {
                                return this._listenerManager.createListener(p_universe);
                            };
                            DataManager.prototype.resolveTimes = function (currentUniverse, currentUuid, startTime, endTime, callback) {
                                this._resolver.resolveTimes(currentUniverse, currentUuid, startTime, endTime, callback);
                            };
                            DataManager.prototype.spaceSize = function () {
                                return this._space.size();
                            };
                            DataManager.prototype.printDebug = function () {
                                this._space.printDebug(this._model.metaModel());
                            };
                            DataManager.UNIVERSE_NOT_CONNECTED_ERROR = "Please connect your createModel prior to create a universe or an object";
                            DataManager.UNIVERSE_INDEX = 0;
                            DataManager.OBJ_INDEX = 1;
                            DataManager.GLO_TREE_INDEX = 2;
                            DataManager.zeroPrefix = 0;
                            DataManager.PREFIX_TO_SAVE_SIZE = 2;
                            DataManager.KEY_SIZE = 3;
                            return DataManager;
                        })();
                        impl.DataManager = DataManager;
                        var HeapListener = (function () {
                            function HeapListener(p_universe, p_listenerManager, p_id) {
                                this._universe = p_universe;
                                this._listenerManager = p_listenerManager;
                                this._id = p_id;
                            }
                            HeapListener.prototype.listenerID = function () {
                                return this._id;
                            };
                            HeapListener.prototype.universe = function () {
                                return 0;
                            };
                            HeapListener.prototype.listenObjects = function () {
                                return this._listenerManager._listener2Objects.get(this._id);
                            };
                            HeapListener.prototype.listen = function (obj) {
                                this._listenerManager.manageRegistration(this._id, obj);
                            };
                            HeapListener.prototype.destroy = function () {
                                this._listenerManager.manageRegistration(this._id, null);
                            };
                            HeapListener.prototype.then = function (p_cb) {
                                this.cb = p_cb;
                            };
                            return HeapListener;
                        })();
                        impl.HeapListener = HeapListener;
                        var KeyCalculator = (function () {
                            function KeyCalculator(prefix, currentIndex) {
                                this._prefix = "0x" + prefix.toString(org.kevoree.modeling.KConfig.PREFIX_SIZE);
                                this._currentIndex = currentIndex;
                            }
                            KeyCalculator.prototype.nextKey = function () {
                                if (this._currentIndex == org.kevoree.modeling.KConfig.KEY_PREFIX_MASK) {
                                    throw new Error("Object Index could not be created because it exceeded the capacity of the current prefix. Ask for a new prefix.");
                                }
                                this._currentIndex++;
                                var indexHex = this._currentIndex.toString(org.kevoree.modeling.KConfig.PREFIX_SIZE);
                                var objectKey = parseInt(this._prefix + "000000000".substring(0, 9 - indexHex.length) + indexHex, org.kevoree.modeling.KConfig.PREFIX_SIZE);
                                if (objectKey >= org.kevoree.modeling.KConfig.NULL_LONG) {
                                    throw new Error("Object Index exceeds teh maximum JavaScript number capacity. (2^" + org.kevoree.modeling.KConfig.LONG_SIZE + ")");
                                }
                                return objectKey;
                            };
                            KeyCalculator.prototype.lastComputedIndex = function () {
                                return this._currentIndex;
                            };
                            KeyCalculator.prototype.prefix = function () {
                                return parseInt(this._prefix, org.kevoree.modeling.KConfig.PREFIX_SIZE);
                            };
                            return KeyCalculator;
                        })();
                        impl.KeyCalculator = KeyCalculator;
                        var ListenerManager = (function () {
                            function ListenerManager() {
                                this._keyGen = new org.kevoree.modeling.memory.manager.impl.KeyCalculator(0, 0);
                                this._listeners = new org.kevoree.modeling.memory.chunk.impl.ArrayLongMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                this._obj2Listener = new org.kevoree.modeling.memory.chunk.impl.ArrayLongMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                this._listener2Objects = new org.kevoree.modeling.memory.chunk.impl.ArrayLongMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                            }
                            ListenerManager.prototype.clear = function () {
                                this._listeners.clear();
                                this._obj2Listener.clear();
                                this._listener2Objects.clear();
                            };
                            ListenerManager.prototype.createListener = function (p_universe) {
                                var newListener = new org.kevoree.modeling.memory.manager.impl.HeapListener(p_universe, this, this._keyGen.nextKey());
                                this._listeners.put(newListener.listenerID(), newListener);
                                return newListener;
                            };
                            ListenerManager.prototype.manageRegistration = function (listenerID, origin) {
                                if (origin != null) {
                                    if (!this._listener2Objects.contains(listenerID)) {
                                        var newRec = new Float64Array(1);
                                        newRec[0] = origin.uuid();
                                        this._listener2Objects.put(listenerID, newRec);
                                    }
                                    else {
                                        var previous = this._listener2Objects.get(listenerID);
                                        var newArrayRec = new Float64Array(previous.length + 1);
                                        java.lang.System.arraycopy(previous, 0, newArrayRec, 0, previous.length);
                                        newArrayRec[previous.length] = origin.uuid();
                                        this._listener2Objects.put(listenerID, newArrayRec);
                                    }
                                    if (!this._obj2Listener.contains(origin.uuid())) {
                                        var newRec = new Float64Array(1);
                                        newRec[0] = listenerID;
                                        this._obj2Listener.put(origin.uuid(), newRec);
                                    }
                                    else {
                                        var previous = this._obj2Listener.get(origin.uuid());
                                        var newArrayRec = new Float64Array(previous.length + 1);
                                        java.lang.System.arraycopy(previous, 0, newArrayRec, 0, previous.length);
                                        newArrayRec[previous.length] = listenerID;
                                        this._obj2Listener.put(origin.uuid(), newArrayRec);
                                    }
                                }
                                else {
                                    var objs = this._listener2Objects.get(listenerID);
                                    if (objs != null) {
                                        this._listener2Objects.remove(listenerID);
                                        for (var i = 0; i < objs.length; i++) {
                                            var registeredListener = this._obj2Listener.get(objs[i]);
                                            var foundIndex = -1;
                                            for (var j = 0; j < registeredListener.length; j++) {
                                                if (registeredListener[j] == listenerID) {
                                                    foundIndex = j;
                                                }
                                            }
                                            if (foundIndex != -1) {
                                                if (foundIndex == 0) {
                                                    var registeredListener2 = new Float64Array(registeredListener.length - 1);
                                                    java.lang.System.arraycopy(objs, foundIndex, registeredListener2, 0, registeredListener.length - 1);
                                                    this._obj2Listener.put(objs[i], registeredListener2);
                                                }
                                                else {
                                                    var registeredListener2 = new Float64Array(registeredListener.length - 1);
                                                    java.lang.System.arraycopy(objs, 0, registeredListener2, 0, foundIndex - 1);
                                                    java.lang.System.arraycopy(objs, foundIndex + 1, registeredListener2, foundIndex, registeredListener.length - foundIndex - 1);
                                                    this._obj2Listener.put(objs[i], registeredListener2);
                                                }
                                            }
                                        }
                                    }
                                }
                            };
                            ListenerManager.prototype.isListened = function (obj) {
                                var notifier = this._obj2Listener.get(obj);
                                if (notifier != null && notifier.length > 0) {
                                    return true;
                                }
                                return false;
                            };
                            ListenerManager.prototype.dispatch = function (objects) {
                                for (var i = 0; i < objects.length; i++) {
                                    if (objects[i] != null) {
                                        var notifier = this._obj2Listener.get(objects[i].uuid());
                                        if (notifier != null && notifier.length > 0) {
                                            for (var j = 0; j < notifier.length; j++) {
                                                var ll = this._listeners.get(notifier[j]);
                                                var cb = ll.cb;
                                                if (cb != null) {
                                                    cb(objects[i]);
                                                }
                                            }
                                        }
                                    }
                                }
                            };
                            return ListenerManager;
                        })();
                        impl.ListenerManager = ListenerManager;
                        var PreparedLookup = (function () {
                            function PreparedLookup(p_size) {
                                this._current = -1;
                                this._size = p_size;
                                this._flatStatement = new Float64Array(p_size * 3);
                                this._current = 0;
                            }
                            PreparedLookup.prototype.addLookupOperation = function (universe, time, uuid) {
                                if (this._current >= this._size) {
                                    throw new Error("PreparedLookup is full, prepared capacity:" + this._size);
                                }
                                this._flatStatement[this._current * 3] = universe;
                                this._flatStatement[this._current * 3 + 1] = time;
                                this._flatStatement[this._current * 3 + 2] = uuid;
                                this._current++;
                            };
                            PreparedLookup.prototype.flatLookup = function () {
                                return this._flatStatement;
                            };
                            return PreparedLookup;
                        })();
                        impl.PreparedLookup = PreparedLookup;
                    })(impl = manager.impl || (manager.impl = {}));
                })(manager = memory.manager || (memory.manager = {}));
                var resolver;
                (function (resolver) {
                    var impl;
                    (function (impl) {
                        var DistortedTimeResolver = (function () {
                            function DistortedTimeResolver(p_cache, p_manager) {
                                this._spaceManager = p_cache;
                                this._manager = p_manager;
                                this._spaceManager.setResolver(this);
                            }
                            DistortedTimeResolver.prototype.lookup = function (universe, time, uuid, callback) {
                                var selfPointer = this;
                                return function () {
                                    try {
                                        selfPointer.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, function (theGlobalUniverseOrderElement) {
                                            if (theGlobalUniverseOrderElement != null) {
                                                selfPointer.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, uuid, function (theObjectUniverseOrderElement) {
                                                    if (theObjectUniverseOrderElement == null) {
                                                        selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                        callback(null);
                                                    }
                                                    else {
                                                        var closestUniverse = org.kevoree.modeling.memory.resolver.impl.DistortedTimeResolver.resolve_universe(theGlobalUniverseOrderElement, theObjectUniverseOrderElement, time, universe);
                                                        selfPointer.getOrLoadAndMark(closestUniverse, org.kevoree.modeling.KConfig.NULL_LONG, uuid, function (theObjectTimeTreeElement) {
                                                            if (theObjectTimeTreeElement == null) {
                                                                selfPointer._spaceManager.unmarkMemoryElement(theObjectUniverseOrderElement);
                                                                selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                                callback(null);
                                                            }
                                                            else {
                                                                var closestTime = theObjectTimeTreeElement.previousOrEqual(time);
                                                                if (closestTime == org.kevoree.modeling.KConfig.NULL_LONG) {
                                                                    selfPointer._spaceManager.unmarkMemoryElement(theObjectTimeTreeElement);
                                                                    selfPointer._spaceManager.unmarkMemoryElement(theObjectUniverseOrderElement);
                                                                    selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                                    callback(null);
                                                                    return;
                                                                }
                                                                selfPointer.getOrLoadAndMark(closestUniverse, closestTime, uuid, function (theObjectChunk) {
                                                                    if (theObjectChunk == null) {
                                                                        selfPointer._spaceManager.unmarkMemoryElement(theObjectTimeTreeElement);
                                                                        selfPointer._spaceManager.unmarkMemoryElement(theObjectUniverseOrderElement);
                                                                        selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                                        callback(null);
                                                                    }
                                                                    else {
                                                                        var resolvedMetaClass = selfPointer._manager.model().metaModel().metaClass(theObjectChunk.metaClassIndex());
                                                                        var newProxy = selfPointer._manager.model().createProxy(universe, time, uuid, resolvedMetaClass, closestUniverse, closestTime);
                                                                        selfPointer._spaceManager.register(newProxy);
                                                                        callback(newProxy);
                                                                    }
                                                                });
                                                            }
                                                        });
                                                    }
                                                });
                                            }
                                        });
                                    }
                                    catch ($ex$) {
                                        if ($ex$ instanceof Error) {
                                            var e = $ex$;
                                            console.error(e['stack']);
                                            ;
                                        }
                                        else {
                                            throw $ex$;
                                        }
                                    }
                                };
                            };
                            DistortedTimeResolver.prototype.lookupAllObjects = function (universe, time, uuids, callback) {
                                var selfPointer = this;
                                return function () {
                                    try {
                                        selfPointer.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, function (theGlobalUniverseOrderElement) {
                                            if (theGlobalUniverseOrderElement != null) {
                                                var tempObjectUniverseKeys = new Float64Array(uuids.length * 3);
                                                for (var i = 0; i < uuids.length; i++) {
                                                    tempObjectUniverseKeys[i * 3] = org.kevoree.modeling.KConfig.NULL_LONG;
                                                    tempObjectUniverseKeys[i * 3 + 1] = org.kevoree.modeling.KConfig.NULL_LONG;
                                                    tempObjectUniverseKeys[i * 3 + 2] = uuids[i];
                                                }
                                                selfPointer.getOrLoadAndMarkAll(tempObjectUniverseKeys, function (objectUniverseOrderElements) {
                                                    if (objectUniverseOrderElements == null || objectUniverseOrderElements.length == 0) {
                                                        selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                        callback(new Array());
                                                        return;
                                                    }
                                                    var tempObjectTimeTreeKeys = new Float64Array(uuids.length * 3);
                                                    for (var i = 0; i < uuids.length; i++) {
                                                        var closestUniverse = org.kevoree.modeling.memory.resolver.impl.DistortedTimeResolver.resolve_universe(theGlobalUniverseOrderElement, objectUniverseOrderElements[i], time, universe);
                                                        tempObjectTimeTreeKeys[i * 3] = closestUniverse;
                                                        tempObjectTimeTreeKeys[i * 3 + 1] = org.kevoree.modeling.KConfig.NULL_LONG;
                                                        tempObjectTimeTreeKeys[i * 3 + 2] = uuids[i];
                                                    }
                                                    selfPointer.getOrLoadAndMarkAll(tempObjectTimeTreeKeys, function (objectTimeTreeElements) {
                                                        if (objectTimeTreeElements == null || objectTimeTreeElements.length == 0) {
                                                            selfPointer._spaceManager.unmarkAllMemoryElements(objectUniverseOrderElements);
                                                            selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                            callback(new Array());
                                                            return;
                                                        }
                                                        var tempObjectChunkKeys = new Float64Array(uuids.length * 3);
                                                        for (var i = 0; i < uuids.length; i++) {
                                                            var closestTime = objectTimeTreeElements[i].previousOrEqual(time);
                                                            if (closestTime != org.kevoree.modeling.KConfig.NULL_LONG) {
                                                                tempObjectChunkKeys[i * 3] = tempObjectTimeTreeKeys[i * 3];
                                                                tempObjectChunkKeys[i * 3 + 1] = closestTime;
                                                                tempObjectChunkKeys[i * 3 + 2] = uuids[i];
                                                            }
                                                            else {
                                                                java.lang.System.arraycopy(org.kevoree.modeling.KContentKey.NULL_KEY, 0, tempObjectChunkKeys, (i * 3), 3);
                                                            }
                                                        }
                                                        selfPointer.getOrLoadAndMarkAll(tempObjectChunkKeys, function (theObjectChunks) {
                                                            if (theObjectChunks == null || theObjectChunks.length == 0) {
                                                                selfPointer._spaceManager.unmarkAllMemoryElements(objectTimeTreeElements);
                                                                selfPointer._spaceManager.unmarkAllMemoryElements(objectUniverseOrderElements);
                                                                selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                                callback(new Array());
                                                            }
                                                            else {
                                                                var finalResult = new Array();
                                                                for (var h = 0; h < theObjectChunks.length; h++) {
                                                                    if (theObjectChunks[h] != null) {
                                                                        finalResult[h] = selfPointer._manager.model().createProxy(universe, time, uuids[h], selfPointer._manager.model().metaModel().metaClass(theObjectChunks[h].metaClassIndex()), tempObjectTimeTreeKeys[h * 3], tempObjectChunkKeys[h * 3 + 1]);
                                                                    }
                                                                    else {
                                                                        finalResult[h] = null;
                                                                    }
                                                                }
                                                                selfPointer._spaceManager.registerAll(finalResult);
                                                                callback(finalResult);
                                                            }
                                                        });
                                                    });
                                                });
                                            }
                                        });
                                    }
                                    catch ($ex$) {
                                        if ($ex$ instanceof Error) {
                                            var e = $ex$;
                                            console.error(e['stack']);
                                            ;
                                        }
                                        else {
                                            throw $ex$;
                                        }
                                    }
                                };
                            };
                            DistortedTimeResolver.prototype.lookupPreciseKeys = function (keys, callback) {
                                var selfPointer = this;
                                return function () {
                                    try {
                                        selfPointer.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, function (theGlobalUniverseOrderElement) {
                                            if (theGlobalUniverseOrderElement != null) {
                                                var allOrderedKeys = new Float64Array(keys.length * 3);
                                                var insertIndex = 0;
                                                var nbKeys = keys.length / 3;
                                                for (var i = 0; i < nbKeys; i++) {
                                                    allOrderedKeys[insertIndex] = org.kevoree.modeling.KConfig.NULL_LONG;
                                                    insertIndex++;
                                                    allOrderedKeys[insertIndex] = org.kevoree.modeling.KConfig.NULL_LONG;
                                                    insertIndex++;
                                                    allOrderedKeys[insertIndex] = keys[i * 3 + 2];
                                                    insertIndex++;
                                                    allOrderedKeys[insertIndex] = keys[i * 3];
                                                    insertIndex++;
                                                    allOrderedKeys[insertIndex] = org.kevoree.modeling.KConfig.NULL_LONG;
                                                    insertIndex++;
                                                    allOrderedKeys[insertIndex] = keys[i * 3 + 2];
                                                    insertIndex++;
                                                    allOrderedKeys[insertIndex] = keys[i * 3];
                                                    insertIndex++;
                                                    allOrderedKeys[insertIndex] = keys[i * 3 + 1];
                                                    insertIndex++;
                                                    allOrderedKeys[insertIndex] = keys[i * 3 + 2];
                                                    insertIndex++;
                                                }
                                                selfPointer.getOrLoadAndMarkAll(allOrderedKeys, function (kChunks) {
                                                    if (kChunks == null || kChunks.length == 0) {
                                                        selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                        callback(new Array());
                                                        return;
                                                    }
                                                    else {
                                                        var finalResult = new Array();
                                                        var insertIndex = 0;
                                                        var previousClassIndex = -1;
                                                        for (var h = 0; h < kChunks.length; h++) {
                                                            if (kChunks[h] != null && kChunks[h].type() == org.kevoree.modeling.memory.space.KChunkTypes.OBJECT_CHUNK) {
                                                                finalResult[insertIndex] = selfPointer._manager.model().createProxy(kChunks[h].universe(), kChunks[h].time(), kChunks[h].obj(), selfPointer._manager.model().metaModel().metaClass(previousClassIndex), kChunks[h].universe(), kChunks[h].time());
                                                                insertIndex++;
                                                            }
                                                            else {
                                                                if (kChunks[h] != null && kChunks[h].type() == org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_MAP) {
                                                                    var casted = kChunks[h];
                                                                    previousClassIndex = casted.metaClassIndex();
                                                                }
                                                            }
                                                        }
                                                        selfPointer._spaceManager.registerAll(finalResult);
                                                        callback(finalResult);
                                                    }
                                                });
                                            }
                                        });
                                    }
                                    catch ($ex$) {
                                        if ($ex$ instanceof Error) {
                                            var e = $ex$;
                                            console.error(e['stack']);
                                            ;
                                        }
                                        else {
                                            throw $ex$;
                                        }
                                    }
                                };
                            };
                            DistortedTimeResolver.prototype.lookupPrepared = function (preparedLookup, callback) {
                                var selfPointer = this;
                                var nbObjs = preparedLookup.flatLookup().length / 3;
                                var flat = preparedLookup.flatLookup();
                                return function () {
                                    try {
                                        selfPointer.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, function (theGlobalUniverseOrderElement) {
                                            if (theGlobalUniverseOrderElement != null) {
                                                var tempObjectUniverseKeys = new Float64Array(nbObjs * 3);
                                                for (var i = 0; i < nbObjs; i++) {
                                                    tempObjectUniverseKeys[i * 3] = org.kevoree.modeling.KConfig.NULL_LONG;
                                                    tempObjectUniverseKeys[i * 3 + 1] = org.kevoree.modeling.KConfig.NULL_LONG;
                                                    tempObjectUniverseKeys[i * 3 + 2] = flat[i * 3 + 2];
                                                }
                                                selfPointer.getOrLoadAndMarkAll(tempObjectUniverseKeys, function (objectUniverseOrderElements) {
                                                    if (objectUniverseOrderElements == null || objectUniverseOrderElements.length == 0) {
                                                        selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                        callback(new Array());
                                                        return;
                                                    }
                                                    var tempObjectTimeTreeKeys = new Float64Array(nbObjs * 3);
                                                    for (var i = 0; i < nbObjs; i++) {
                                                        var closestUniverse = org.kevoree.modeling.memory.resolver.impl.DistortedTimeResolver.resolve_universe(theGlobalUniverseOrderElement, objectUniverseOrderElements[i], flat[i * 3 + 1], flat[i * 3]);
                                                        tempObjectTimeTreeKeys[i * 3] = closestUniverse;
                                                        tempObjectTimeTreeKeys[i * 3 + 1] = org.kevoree.modeling.KConfig.NULL_LONG;
                                                        tempObjectTimeTreeKeys[i * 3 + 2] = flat[i * 3 + 2];
                                                    }
                                                    selfPointer.getOrLoadAndMarkAll(tempObjectTimeTreeKeys, function (objectTimeTreeElements) {
                                                        if (objectTimeTreeElements == null || objectTimeTreeElements.length == 0) {
                                                            selfPointer._spaceManager.unmarkAllMemoryElements(objectUniverseOrderElements);
                                                            selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                            callback(new Array());
                                                            return;
                                                        }
                                                        var tempObjectChunkKeys = new Float64Array(nbObjs * 3);
                                                        for (var i = 0; i < nbObjs; i++) {
                                                            var closestTime = objectTimeTreeElements[i].previousOrEqual(flat[i * 3 + 1]);
                                                            if (closestTime != org.kevoree.modeling.KConfig.NULL_LONG) {
                                                                tempObjectChunkKeys[i * 3] = tempObjectTimeTreeKeys[i * 3];
                                                                tempObjectChunkKeys[i * 3 + 1] = closestTime;
                                                                tempObjectChunkKeys[i * 3 + 2] = flat[i * 3 + 2];
                                                            }
                                                            else {
                                                                java.lang.System.arraycopy(org.kevoree.modeling.KContentKey.NULL_KEY, 0, tempObjectChunkKeys, (i * 3), 3);
                                                            }
                                                        }
                                                        selfPointer.getOrLoadAndMarkAll(tempObjectChunkKeys, function (theObjectChunks) {
                                                            if (theObjectChunks == null || theObjectChunks.length == 0) {
                                                                selfPointer._spaceManager.unmarkAllMemoryElements(objectTimeTreeElements);
                                                                selfPointer._spaceManager.unmarkAllMemoryElements(objectUniverseOrderElements);
                                                                selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                                callback(new Array());
                                                            }
                                                            else {
                                                                var finalResult = new Array();
                                                                for (var h = 0; h < theObjectChunks.length; h++) {
                                                                    if (theObjectChunks[h] != null) {
                                                                        finalResult[h] = selfPointer._manager.model().createProxy(flat[h * 3], flat[h * 3 + 1], flat[h * 3 + 2], selfPointer._manager.model().metaModel().metaClass(theObjectChunks[h].metaClassIndex()), tempObjectTimeTreeKeys[h * 3], tempObjectChunkKeys[h * 3 + 1]);
                                                                    }
                                                                    else {
                                                                        finalResult[h] = null;
                                                                    }
                                                                }
                                                                selfPointer._spaceManager.registerAll(finalResult);
                                                                callback(finalResult);
                                                            }
                                                        });
                                                    });
                                                });
                                            }
                                        });
                                    }
                                    catch ($ex$) {
                                        if ($ex$ instanceof Error) {
                                            var e = $ex$;
                                            console.error(e['stack']);
                                            ;
                                        }
                                        else {
                                            throw $ex$;
                                        }
                                    }
                                };
                            };
                            DistortedTimeResolver.prototype.lookupAllTimes = function (universe, times, uuid, callback) {
                                var selfPointer = this;
                                return function () {
                                    try {
                                        selfPointer.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, function (theGlobalUniverseOrderElement) {
                                            if (theGlobalUniverseOrderElement != null) {
                                                selfPointer.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, uuid, function (theObjectUniverseOrderElement) {
                                                    if (theObjectUniverseOrderElement == null) {
                                                        selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                        callback(null);
                                                    }
                                                    else {
                                                        var closestUniverses = new Float64Array(times.length);
                                                        var closestUnikUniverse = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                                                        var nbUniverseToload = 0;
                                                        for (var i = 0; i < times.length; i++) {
                                                            closestUniverses[i] = org.kevoree.modeling.memory.resolver.impl.DistortedTimeResolver.resolve_universe(theGlobalUniverseOrderElement, theObjectUniverseOrderElement, times[i], universe);
                                                            if (!closestUnikUniverse.contains(closestUniverses[i])) {
                                                                closestUnikUniverse.put(closestUniverses[i], nbUniverseToload);
                                                                nbUniverseToload++;
                                                            }
                                                        }
                                                        var toLoadUniverseKeys = new Float64Array(nbUniverseToload * 3);
                                                        closestUnikUniverse.each(function (key, value) {
                                                            var currentIndex = (value * 3);
                                                            toLoadUniverseKeys[currentIndex] = value;
                                                            toLoadUniverseKeys[currentIndex + 1] = org.kevoree.modeling.KConfig.NULL_LONG;
                                                            toLoadUniverseKeys[currentIndex + 2] = uuid;
                                                        });
                                                        selfPointer.getOrLoadAndMarkAll(toLoadUniverseKeys, function (objectTimeTreeElements) {
                                                            if (objectTimeTreeElements == null || objectTimeTreeElements.length == 0) {
                                                                selfPointer._spaceManager.unmarkMemoryElement(theObjectUniverseOrderElement);
                                                                selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                                callback(null);
                                                            }
                                                            else {
                                                                var closestTimes = new Float64Array(times.length);
                                                                var closestUnikTimes = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                                                                var reverseTimeUniverse = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                                                                var nbTimesToload = 0;
                                                                for (var i = 0; i < times.length; i++) {
                                                                    var alignedIndexOfUniverse = closestUnikUniverse.get(closestUniverses[i]);
                                                                    closestTimes[i] = objectTimeTreeElements[alignedIndexOfUniverse].previousOrEqual(times[i]);
                                                                    if (!closestUnikTimes.contains(closestTimes[i])) {
                                                                        closestUnikTimes.put(closestTimes[i], nbTimesToload);
                                                                        reverseTimeUniverse.put(closestTimes[i], closestUniverses[i]);
                                                                        nbTimesToload++;
                                                                    }
                                                                }
                                                                var toLoadTimesKeys = new Float64Array(nbTimesToload * 3);
                                                                closestUnikTimes.each(function (key, value) {
                                                                    var currentIndex = (value * 3);
                                                                    toLoadTimesKeys[currentIndex] = reverseTimeUniverse.get(key);
                                                                    toLoadTimesKeys[currentIndex + 1] = key;
                                                                    toLoadTimesKeys[currentIndex + 2] = uuid;
                                                                });
                                                                selfPointer.getOrLoadAndMarkAll(toLoadTimesKeys, function (objectChunks) {
                                                                    if (objectChunks == null || objectChunks.length == 0) {
                                                                        selfPointer._spaceManager.unmarkAllMemoryElements(objectTimeTreeElements);
                                                                        selfPointer._spaceManager.unmarkMemoryElement(theObjectUniverseOrderElement);
                                                                        selfPointer._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                                        callback(null);
                                                                    }
                                                                    else {
                                                                        var result = new Array();
                                                                        for (var i = 0; i < times.length; i++) {
                                                                            var resolvedUniverse = closestUniverses[i];
                                                                            var resolvedTime = closestTimes[i];
                                                                            var indexChunks = closestUnikTimes.get(closestTimes[i]);
                                                                            if (indexChunks != -1 && resolvedUniverse != org.kevoree.modeling.KConfig.NULL_LONG && resolvedTime != org.kevoree.modeling.KConfig.NULL_LONG) {
                                                                                result[i] = selfPointer._manager.model().createProxy(universe, times[i], uuid, selfPointer._manager.model().metaModel().metaClass(objectChunks[indexChunks].metaClassIndex()), resolvedUniverse, resolvedTime);
                                                                            }
                                                                            else {
                                                                                result[i] = null;
                                                                            }
                                                                        }
                                                                        selfPointer._spaceManager.registerAll(result);
                                                                        callback(result);
                                                                    }
                                                                });
                                                            }
                                                        });
                                                    }
                                                });
                                            }
                                        });
                                    }
                                    catch ($ex$) {
                                        if ($ex$ instanceof Error) {
                                            var e = $ex$;
                                            console.error(e['stack']);
                                            ;
                                        }
                                        else {
                                            throw $ex$;
                                        }
                                    }
                                };
                            };
                            DistortedTimeResolver.prototype.preciseChunk = function (universe, time, uuid, metaClass, previousResolution) {
                                return this.internal_chunk(universe, time, uuid, false, metaClass, previousResolution);
                            };
                            DistortedTimeResolver.prototype.closestChunk = function (universe, time, uuid, metaClass, previousResolution) {
                                return this.internal_chunk(universe, time, uuid, true, metaClass, previousResolution);
                            };
                            DistortedTimeResolver.prototype.internal_chunk = function (universe, requestedTime, uuid, useClosest, metaClass, previousResolution) {
                                var time = requestedTime;
                                if (metaClass.temporalResolution() != 1) {
                                    time = time - (time % metaClass.temporalResolution());
                                }
                                var currentEntry = this._spaceManager.getAndMark(universe, time, uuid);
                                if (currentEntry != null) {
                                    var previous;
                                    var current;
                                    var diff = false;
                                    do {
                                        previous = previousResolution.get();
                                        if (previous[org.kevoree.modeling.abs.AbstractKObject.UNIVERSE_PREVIOUS_INDEX] != universe || previous[org.kevoree.modeling.abs.AbstractKObject.TIME_PREVIOUS_INDEX] != time) {
                                            current = new Float64Array([universe, time]);
                                            diff = true;
                                        }
                                        else {
                                            current = previous;
                                        }
                                    } while (!previousResolution.compareAndSet(previous, current));
                                    if (diff) {
                                        this._spaceManager.unmark(previous[org.kevoree.modeling.abs.AbstractKObject.UNIVERSE_PREVIOUS_INDEX], previous[org.kevoree.modeling.abs.AbstractKObject.TIME_PREVIOUS_INDEX], uuid);
                                    }
                                    else {
                                        this._spaceManager.unmarkMemoryElement(currentEntry);
                                    }
                                    return currentEntry;
                                }
                                var objectUniverseTree = this._spaceManager.getAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, uuid);
                                if (objectUniverseTree == null) {
                                    return null;
                                }
                                var globalUniverseTree = this._spaceManager.getAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG);
                                if (globalUniverseTree == null) {
                                    this._spaceManager.unmarkMemoryElement(objectUniverseTree);
                                    return null;
                                }
                                var resolvedUniverse = org.kevoree.modeling.memory.resolver.impl.DistortedTimeResolver.resolve_universe(globalUniverseTree, objectUniverseTree, time, universe);
                                var timeTree = this._spaceManager.getAndMark(resolvedUniverse, org.kevoree.modeling.KConfig.NULL_LONG, uuid);
                                if (timeTree == null) {
                                    this._spaceManager.unmarkMemoryElement(globalUniverseTree);
                                    this._spaceManager.unmarkMemoryElement(objectUniverseTree);
                                    return null;
                                }
                                var resolvedTime = timeTree.previousOrEqual(time);
                                if (resolvedTime != org.kevoree.modeling.KConfig.NULL_LONG) {
                                    var needTimeCopy = !useClosest && (resolvedTime != time);
                                    var needUniverseCopy = !useClosest && (resolvedUniverse != universe);
                                    currentEntry = this._spaceManager.getAndMark(resolvedUniverse, resolvedTime, uuid);
                                    if (currentEntry == null) {
                                        console.error("DePhasing problem, null chunk unexpected");
                                        ;
                                        this._spaceManager.unmarkMemoryElement(timeTree);
                                        this._spaceManager.unmarkMemoryElement(globalUniverseTree);
                                        this._spaceManager.unmarkMemoryElement(objectUniverseTree);
                                        return null;
                                    }
                                    if (!needTimeCopy && !needUniverseCopy) {
                                        var previous;
                                        var current;
                                        var diff = false;
                                        do {
                                            previous = previousResolution.get();
                                            if (previous[org.kevoree.modeling.abs.AbstractKObject.UNIVERSE_PREVIOUS_INDEX] != resolvedUniverse || previous[org.kevoree.modeling.abs.AbstractKObject.TIME_PREVIOUS_INDEX] != resolvedTime) {
                                                current = new Float64Array([resolvedUniverse, resolvedTime]);
                                                diff = true;
                                            }
                                            else {
                                                current = previous;
                                            }
                                        } while (!previousResolution.compareAndSet(previous, current));
                                        if (diff) {
                                            this._spaceManager.unmark(previous[org.kevoree.modeling.abs.AbstractKObject.UNIVERSE_PREVIOUS_INDEX], previous[org.kevoree.modeling.abs.AbstractKObject.TIME_PREVIOUS_INDEX], uuid);
                                        }
                                        else {
                                            this._spaceManager.unmarkMemoryElement(currentEntry);
                                        }
                                        this._spaceManager.unmarkMemoryElement(timeTree);
                                        this._spaceManager.unmarkMemoryElement(globalUniverseTree);
                                        this._spaceManager.unmarkMemoryElement(objectUniverseTree);
                                        return currentEntry;
                                    }
                                    else {
                                        var previous;
                                        var current;
                                        var diff = false;
                                        do {
                                            previous = previousResolution.get();
                                            if (previous[org.kevoree.modeling.abs.AbstractKObject.UNIVERSE_PREVIOUS_INDEX] != universe || previous[org.kevoree.modeling.abs.AbstractKObject.TIME_PREVIOUS_INDEX] != time) {
                                                current = new Float64Array([universe, time]);
                                                diff = true;
                                            }
                                            else {
                                                current = previous;
                                            }
                                        } while (!previousResolution.compareAndSet(previous, current));
                                        if (diff) {
                                            var clonedChunk = this._spaceManager.cloneAndMark(currentEntry, universe, time, uuid, this._manager.model().metaModel());
                                            if (currentEntry.counter() > 2) {
                                                currentEntry.addDependency(universe, time, uuid);
                                                this._spaceManager.markMemoryElement(clonedChunk);
                                            }
                                            if (!needUniverseCopy) {
                                                timeTree.insertKey(time);
                                            }
                                            else {
                                                var newTemporalTree = this._spaceManager.createAndMark(universe, org.kevoree.modeling.KConfig.NULL_LONG, uuid, org.kevoree.modeling.memory.space.KChunkTypes.LONG_TREE);
                                                newTemporalTree.insertKey(time);
                                                this._spaceManager.unmarkMemoryElement(timeTree);
                                                objectUniverseTree.put(universe, time);
                                            }
                                            this._spaceManager.unmarkMemoryElement(currentEntry);
                                            this._spaceManager.unmarkMemoryElement(currentEntry);
                                            this._spaceManager.unmarkMemoryElement(timeTree);
                                            this._spaceManager.unmarkMemoryElement(globalUniverseTree);
                                            this._spaceManager.unmarkMemoryElement(objectUniverseTree);
                                            return clonedChunk;
                                        }
                                        else {
                                            console.error("Should not be here !!!!");
                                            ;
                                            this._spaceManager.unmarkMemoryElement(timeTree);
                                            this._spaceManager.unmarkMemoryElement(globalUniverseTree);
                                            this._spaceManager.unmarkMemoryElement(objectUniverseTree);
                                            var waitingChunk = this._spaceManager.getAndMark(universe, time, uuid);
                                            var i = 0;
                                            while (waitingChunk == null && i < org.kevoree.modeling.KConfig.CAS_MAX_TRY) {
                                                waitingChunk = this._spaceManager.getAndMark(universe, time, uuid);
                                                i++;
                                            }
                                            if (waitingChunk == null) {
                                                throw new Error("CAS synchronisation problem!");
                                            }
                                            else {
                                                this._spaceManager.unmarkMemoryElement(currentEntry);
                                                return waitingChunk;
                                            }
                                        }
                                    }
                                }
                                else {
                                    this._spaceManager.unmarkMemoryElement(timeTree);
                                    this._spaceManager.unmarkMemoryElement(globalUniverseTree);
                                    this._spaceManager.unmarkMemoryElement(objectUniverseTree);
                                    return null;
                                }
                            };
                            DistortedTimeResolver.prototype.indexObject = function (obj) {
                                var metaClassIndex = obj.metaClass().index();
                                var cacheEntry = this._spaceManager.createAndMark(obj.universe(), obj.now(), obj.uuid(), org.kevoree.modeling.memory.space.KChunkTypes.OBJECT_CHUNK);
                                cacheEntry.init(null, this._manager.model().metaModel(), metaClassIndex);
                                cacheEntry.setFlags(org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT, 0);
                                cacheEntry.space().declareDirty(cacheEntry);
                                var timeTree = this._spaceManager.createAndMark(obj.universe(), org.kevoree.modeling.KConfig.NULL_LONG, obj.uuid(), org.kevoree.modeling.memory.space.KChunkTypes.LONG_TREE);
                                timeTree.init(null, this._manager.model().metaModel(), metaClassIndex);
                                timeTree.insertKey(obj.now());
                                var universeTree = this._spaceManager.createAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, obj.uuid(), org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_MAP);
                                universeTree.init(null, this._manager.model().metaModel(), metaClassIndex);
                                universeTree.put(obj.universe(), obj.now());
                                this._spaceManager.register(obj);
                            };
                            DistortedTimeResolver.prototype.typeFromKey = function (universe, time, uuid) {
                                var isUniverseNotNull = universe != org.kevoree.modeling.KConfig.NULL_LONG;
                                var result;
                                if (org.kevoree.modeling.KConfig.END_OF_TIME == uuid) {
                                    if (isUniverseNotNull) {
                                        result = org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_TREE;
                                    }
                                    else {
                                        result = org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_MAP;
                                    }
                                }
                                else {
                                    var isTimeNotNull = time != org.kevoree.modeling.KConfig.NULL_LONG;
                                    var isObjNotNull = uuid != org.kevoree.modeling.KConfig.NULL_LONG;
                                    if (isUniverseNotNull && isTimeNotNull && isObjNotNull) {
                                        result = org.kevoree.modeling.memory.space.KChunkTypes.OBJECT_CHUNK;
                                    }
                                    else {
                                        if (isUniverseNotNull && !isTimeNotNull && isObjNotNull) {
                                            result = org.kevoree.modeling.memory.space.KChunkTypes.LONG_TREE;
                                        }
                                        else {
                                            result = org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_MAP;
                                        }
                                    }
                                }
                                return result;
                            };
                            DistortedTimeResolver.prototype.getOrLoadAndMark = function (universe, time, uuid, callback) {
                                if (universe == org.kevoree.modeling.KContentKey.NULL_KEY[0] && time == org.kevoree.modeling.KContentKey.NULL_KEY[1] && uuid == org.kevoree.modeling.KContentKey.NULL_KEY[2]) {
                                    callback(null);
                                    return;
                                }
                                var cached = this._spaceManager.getAndMark(universe, time, uuid);
                                if (cached != null) {
                                    callback(cached);
                                }
                                else {
                                    this.load(new Float64Array([universe, time, uuid]), function (loadedElements) {
                                        callback(loadedElements[0]);
                                    });
                                }
                            };
                            DistortedTimeResolver.prototype.getOrLoadAndMarkAll = function (keys, callback) {
                                var nbKeys = keys.length / DistortedTimeResolver.KEYS_SIZE;
                                var toLoadIndexes = new Array();
                                var nbElem = 0;
                                var result = new Array();
                                for (var i = 0; i < nbKeys; i++) {
                                    if (keys[i * DistortedTimeResolver.KEYS_SIZE] == org.kevoree.modeling.KContentKey.NULL_KEY[0] && keys[i * DistortedTimeResolver.KEYS_SIZE + 1] == org.kevoree.modeling.KContentKey.NULL_KEY[1] && keys[i * DistortedTimeResolver.KEYS_SIZE + 2] == org.kevoree.modeling.KContentKey.NULL_KEY[2]) {
                                        toLoadIndexes[i] = false;
                                        result[i] = null;
                                    }
                                    else {
                                        result[i] = this._spaceManager.getAndMark(keys[i * DistortedTimeResolver.KEYS_SIZE], keys[i * DistortedTimeResolver.KEYS_SIZE + 1], keys[i * DistortedTimeResolver.KEYS_SIZE + 2]);
                                        if (result[i] == null) {
                                            toLoadIndexes[i] = true;
                                            nbElem++;
                                        }
                                        else {
                                            toLoadIndexes[i] = false;
                                        }
                                    }
                                }
                                if (nbElem == 0) {
                                    callback(result);
                                }
                                else {
                                    var keysToLoad = new Float64Array(nbElem * 3);
                                    var lastInsertedIndex = 0;
                                    for (var i = 0; i < nbKeys; i++) {
                                        if (toLoadIndexes[i]) {
                                            keysToLoad[lastInsertedIndex] = keys[i * DistortedTimeResolver.KEYS_SIZE];
                                            lastInsertedIndex++;
                                            keysToLoad[lastInsertedIndex] = keys[i * DistortedTimeResolver.KEYS_SIZE + 1];
                                            lastInsertedIndex++;
                                            keysToLoad[lastInsertedIndex] = keys[i * DistortedTimeResolver.KEYS_SIZE + 2];
                                            lastInsertedIndex++;
                                        }
                                    }
                                    this.load(keysToLoad, function (loadedElements) {
                                        var currentIndexToMerge = 0;
                                        for (var i = 0; i < nbKeys; i++) {
                                            if (toLoadIndexes[i]) {
                                                result[i] = loadedElements[currentIndexToMerge];
                                                currentIndexToMerge++;
                                            }
                                        }
                                        callback(result);
                                    });
                                }
                            };
                            DistortedTimeResolver.prototype.getRoot = function (universe, time, callback) {
                                var _this = this;
                                var rootFixedKey = org.kevoree.modeling.KConfig.END_OF_TIME;
                                this.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, function (theGlobalUniverseOrderElement) {
                                    if (theGlobalUniverseOrderElement == null) {
                                        callback(null);
                                        return;
                                    }
                                    _this.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, rootFixedKey, function (rootGlobalUniverseOrderElement) {
                                        if (rootGlobalUniverseOrderElement == null) {
                                            _this._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                            callback(null);
                                            return;
                                        }
                                        var closestUniverse = org.kevoree.modeling.memory.resolver.impl.DistortedTimeResolver.resolve_universe(theGlobalUniverseOrderElement, rootGlobalUniverseOrderElement, time, universe);
                                        _this.getOrLoadAndMark(closestUniverse, org.kevoree.modeling.KConfig.NULL_LONG, rootFixedKey, function (theRootTimeTree) {
                                            var resolvedCurrentRootUUID = theRootTimeTree.previousOrEqualValue(time);
                                            _this._spaceManager.unmarkMemoryElement(theRootTimeTree);
                                            _this._spaceManager.unmarkMemoryElement(rootGlobalUniverseOrderElement);
                                            _this._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                            if (resolvedCurrentRootUUID == org.kevoree.modeling.KConfig.NULL_LONG) {
                                                callback(null);
                                            }
                                            else {
                                                _this._manager.lookup(universe, time, resolvedCurrentRootUUID, callback);
                                            }
                                        });
                                    });
                                });
                            };
                            DistortedTimeResolver.prototype.setRoot = function (newRoot, callback) {
                                var _this = this;
                                var rootFixedKey = org.kevoree.modeling.KConfig.END_OF_TIME;
                                this.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, function (theGlobalUniverseOrderElement) {
                                    if (theGlobalUniverseOrderElement == null) {
                                        callback(null);
                                        return;
                                    }
                                    _this.getOrLoadAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, rootFixedKey, function (rootGlobalUniverseOrderElement) {
                                        var rootGlobalUniverseOrder = rootGlobalUniverseOrderElement;
                                        if (rootGlobalUniverseOrderElement == null) {
                                            rootGlobalUniverseOrder = _this._spaceManager.createAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.END_OF_TIME, org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_MAP);
                                        }
                                        var closestUniverse = org.kevoree.modeling.memory.resolver.impl.DistortedTimeResolver.resolve_universe(theGlobalUniverseOrderElement, rootGlobalUniverseOrderElement, newRoot.now(), newRoot.universe());
                                        rootGlobalUniverseOrder.put(newRoot.universe(), newRoot.now());
                                        if (closestUniverse != newRoot.universe()) {
                                            var newTimeTree = _this._spaceManager.createAndMark(newRoot.universe(), org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.END_OF_TIME, org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_TREE);
                                            newTimeTree.insert(newRoot.now(), newRoot.uuid());
                                            _this._spaceManager.unmarkMemoryElement(newTimeTree);
                                            _this._spaceManager.unmarkMemoryElement(rootGlobalUniverseOrderElement);
                                            _this._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                            if (callback != null) {
                                                callback(null);
                                            }
                                        }
                                        else {
                                            _this.getOrLoadAndMark(closestUniverse, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.END_OF_TIME, function (resolvedRootTimeTree) {
                                                var initializedTree = resolvedRootTimeTree;
                                                if (initializedTree == null) {
                                                    initializedTree = _this._spaceManager.createAndMark(closestUniverse, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.END_OF_TIME, org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_TREE);
                                                }
                                                initializedTree.insert(newRoot.now(), newRoot.uuid());
                                                _this._spaceManager.unmarkMemoryElement(resolvedRootTimeTree);
                                                _this._spaceManager.unmarkMemoryElement(rootGlobalUniverseOrderElement);
                                                _this._spaceManager.unmarkMemoryElement(theGlobalUniverseOrderElement);
                                                if (callback != null) {
                                                    callback(null);
                                                }
                                            });
                                        }
                                    });
                                });
                            };
                            DistortedTimeResolver.prototype.resolveTimes = function (currentUniverse, currentUuid, startTime, endTime, callback) {
                                var _this = this;
                                var keys = new Float64Array([org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, currentUuid]);
                                this.getOrLoadAndMarkAll(keys, function (kMemoryChunks) {
                                    if (kMemoryChunks == null || kMemoryChunks.length == 0) {
                                        callback(new Float64Array(0));
                                        return;
                                    }
                                    var collectedUniverse = org.kevoree.modeling.memory.resolver.impl.DistortedTimeResolver.universeSelectByRange(kMemoryChunks[0], kMemoryChunks[1], startTime, endTime, currentUniverse);
                                    var nbKeys = collectedUniverse.length * 3;
                                    var timeTreeKeys = new Float64Array(nbKeys);
                                    for (var i = 0; i < collectedUniverse.length; i++) {
                                        timeTreeKeys[i * 3] = collectedUniverse[i];
                                        timeTreeKeys[i * 3 + 1] = org.kevoree.modeling.KConfig.NULL_LONG;
                                        timeTreeKeys[i * 3 + 2] = currentUuid;
                                    }
                                    var objUniverse = kMemoryChunks[1];
                                    _this.getOrLoadAndMarkAll(timeTreeKeys, function (timeTrees) {
                                        if (timeTrees == null || timeTrees.length == 0) {
                                            _this._spaceManager.unmarkAllMemoryElements(kMemoryChunks);
                                            callback(new Float64Array(0));
                                            return;
                                        }
                                        var collector = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                                        var previousDivergenceTime = endTime;
                                        for (var i = 0; i < collectedUniverse.length; i++) {
                                            var timeTree = timeTrees[i];
                                            if (timeTree != null) {
                                                var currentDivergenceTime = objUniverse.get(collectedUniverse[i]);
                                                currentDivergenceTime = currentDivergenceTime > startTime ? currentDivergenceTime : startTime;
                                                var finalPreviousDivergenceTime = previousDivergenceTime;
                                                timeTree.range(currentDivergenceTime, previousDivergenceTime, function (t) {
                                                    if (collector.size() == 0) {
                                                        collector.put(collector.size(), t);
                                                    }
                                                    else {
                                                        if (t != finalPreviousDivergenceTime) {
                                                            collector.put(collector.size(), t);
                                                        }
                                                    }
                                                });
                                                previousDivergenceTime = currentDivergenceTime;
                                            }
                                        }
                                        var orderedTime = new Float64Array(collector.size());
                                        for (var i = 0; i < collector.size(); i++) {
                                            orderedTime[i] = collector.get(i);
                                        }
                                        _this._spaceManager.unmarkAllMemoryElements(timeTrees);
                                        _this._spaceManager.unmarkAllMemoryElements(kMemoryChunks);
                                        callback(orderedTime);
                                    });
                                });
                            };
                            DistortedTimeResolver.resolve_universe = function (globalTree, objUniverseTree, timeToResolve, originUniverseId) {
                                if (globalTree == null || objUniverseTree == null) {
                                    return originUniverseId;
                                }
                                var currentUniverse = originUniverseId;
                                var previousUniverse = org.kevoree.modeling.KConfig.NULL_LONG;
                                var divergenceTime = objUniverseTree.get(currentUniverse);
                                while (currentUniverse != previousUniverse) {
                                    if (divergenceTime != org.kevoree.modeling.KConfig.NULL_LONG && divergenceTime <= timeToResolve) {
                                        return currentUniverse;
                                    }
                                    previousUniverse = currentUniverse;
                                    currentUniverse = globalTree.get(currentUniverse);
                                    divergenceTime = objUniverseTree.get(currentUniverse);
                                }
                                return originUniverseId;
                            };
                            DistortedTimeResolver.universeSelectByRange = function (globalTree, objUniverseTree, rangeMin, rangeMax, originUniverseId) {
                                var collected = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                                var currentUniverse = originUniverseId;
                                var previousUniverse = org.kevoree.modeling.KConfig.NULL_LONG;
                                var divergenceTime = objUniverseTree.get(currentUniverse);
                                while (currentUniverse != previousUniverse) {
                                    if (divergenceTime != org.kevoree.modeling.KConfig.NULL_LONG) {
                                        if (divergenceTime <= rangeMin) {
                                            collected.put(collected.size(), currentUniverse);
                                            break;
                                        }
                                        else {
                                            if (divergenceTime <= rangeMax) {
                                                collected.put(collected.size(), currentUniverse);
                                            }
                                        }
                                    }
                                    previousUniverse = currentUniverse;
                                    currentUniverse = globalTree.get(currentUniverse);
                                    divergenceTime = objUniverseTree.get(currentUniverse);
                                }
                                var trimmed = new Float64Array(collected.size());
                                for (var i = 0; i < collected.size(); i++) {
                                    trimmed[i] = collected.get(i);
                                }
                                return trimmed;
                            };
                            DistortedTimeResolver.prototype.load = function (keys, callback) {
                                var _this = this;
                                this._manager.cdn().get(keys, function (payloads) {
                                    var results = new Array();
                                    for (var i = 0; i < payloads.length; i++) {
                                        var loopUniverse = keys[i * 3];
                                        var loopTime = keys[i * 3 + 1];
                                        var loopUuid = keys[i * 3 + 2];
                                        results[i] = _this._spaceManager.createAndMark(loopUniverse, loopTime, loopUuid, _this.typeFromKey(loopUniverse, loopTime, loopUuid));
                                        var classIndex = -1;
                                        if (loopUniverse != org.kevoree.modeling.KConfig.NULL_LONG && loopTime != org.kevoree.modeling.KConfig.NULL_LONG && loopUuid != org.kevoree.modeling.KConfig.NULL_LONG) {
                                            var alreadyLoadedOrder = _this._spaceManager.getAndMark(org.kevoree.modeling.KConfig.NULL_LONG, org.kevoree.modeling.KConfig.NULL_LONG, loopUuid);
                                            if (alreadyLoadedOrder != null) {
                                                classIndex = alreadyLoadedOrder.metaClassIndex();
                                                _this._spaceManager.unmarkMemoryElement(alreadyLoadedOrder);
                                            }
                                        }
                                        results[i].init(payloads[i], _this._manager.model().metaModel(), classIndex);
                                    }
                                    callback(results);
                                });
                            };
                            DistortedTimeResolver.prototype.getRelatedKeysResultSize = function () {
                                return 4;
                            };
                            DistortedTimeResolver.prototype.getRelatedKeys = function (universe, time, uuid, result) {
                                result[0] = universe;
                                result[1] = time;
                                result[2] = uuid;
                                result[3] = universe;
                                result[4] = org.kevoree.modeling.KConfig.NULL_LONG;
                                result[5] = uuid;
                                result[6] = org.kevoree.modeling.KConfig.NULL_LONG;
                                result[7] = org.kevoree.modeling.KConfig.NULL_LONG;
                                result[8] = uuid;
                                result[9] = org.kevoree.modeling.KConfig.NULL_LONG;
                                result[10] = org.kevoree.modeling.KConfig.NULL_LONG;
                                result[11] = org.kevoree.modeling.KConfig.NULL_LONG;
                            };
                            DistortedTimeResolver.KEYS_SIZE = 3;
                            return DistortedTimeResolver;
                        })();
                        impl.DistortedTimeResolver = DistortedTimeResolver;
                    })(impl = resolver.impl || (resolver.impl = {}));
                })(resolver = memory.resolver || (memory.resolver = {}));
                var space;
                (function (space) {
                    var KChunkTypes = (function () {
                        function KChunkTypes() {
                        }
                        KChunkTypes.OBJECT_CHUNK = 0;
                        KChunkTypes.LONG_TREE = 1;
                        KChunkTypes.LONG_LONG_TREE = 2;
                        KChunkTypes.LONG_LONG_MAP = 3;
                        return KChunkTypes;
                    })();
                    space.KChunkTypes = KChunkTypes;
                    var impl;
                    (function (impl) {
                        var AbstractCountingChunkSpaceManager = (function () {
                            function AbstractCountingChunkSpaceManager(p_storage) {
                                this._space = p_storage;
                            }
                            AbstractCountingChunkSpaceManager.prototype.getAndMark = function (universe, time, obj) {
                                var resolvedElement = this._space.get(universe, time, obj);
                                if (resolvedElement != null && (resolvedElement.getFlags() & org.kevoree.modeling.memory.KChunkFlags.REMOVED_BIT) != org.kevoree.modeling.memory.KChunkFlags.REMOVED_BIT) {
                                    resolvedElement.inc();
                                }
                                return resolvedElement;
                            };
                            AbstractCountingChunkSpaceManager.prototype.unmark = function (universe, time, obj) {
                                var resolvedElement = this._space.get(universe, time, obj);
                                if (resolvedElement != null) {
                                    var newCount = resolvedElement.dec();
                                    if (newCount <= 0) {
                                        this.cleanDependenciesAndPotentiallyRemoveChunk(resolvedElement);
                                    }
                                }
                            };
                            AbstractCountingChunkSpaceManager.prototype.createAndMark = function (universe, time, obj, type) {
                                var newCreatedElement = this._space.create(universe, time, obj, type);
                                if (newCreatedElement != null) {
                                    newCreatedElement.inc();
                                }
                                return newCreatedElement;
                            };
                            AbstractCountingChunkSpaceManager.prototype.unmarkMemoryElement = function (element) {
                                var newCount = element.dec();
                                if (newCount <= 0) {
                                    this.cleanDependenciesAndPotentiallyRemoveChunk(element);
                                }
                            };
                            AbstractCountingChunkSpaceManager.prototype.markMemoryElement = function (element) {
                                element.inc();
                            };
                            AbstractCountingChunkSpaceManager.prototype.unmarkAllMemoryElements = function (elements) {
                                for (var i = 0; i < elements.length; i++) {
                                    var loopChunk = elements[i];
                                    var newCount = elements[i].dec();
                                    if (newCount <= 0) {
                                        this.cleanDependenciesAndPotentiallyRemoveChunk(loopChunk);
                                    }
                                }
                            };
                            AbstractCountingChunkSpaceManager.prototype.cleanDependenciesAndPotentiallyRemoveChunk = function (toRemoveChunk) {
                                var dependencies = toRemoveChunk.dependencies();
                                if (dependencies != null && dependencies.length > 0) {
                                    for (var i = 0; i < dependencies.length; i = i + 3) {
                                        this.unmark(dependencies[i], dependencies[i + 1], dependencies[i + 2]);
                                    }
                                }
                                if ((toRemoveChunk.getFlags() & org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) != org.kevoree.modeling.memory.KChunkFlags.DIRTY_BIT) {
                                    toRemoveChunk.setFlags(org.kevoree.modeling.memory.KChunkFlags.REMOVED_BIT, 0);
                                    this._space.remove(toRemoveChunk.universe(), toRemoveChunk.time(), toRemoveChunk.obj(), this._metaModel);
                                }
                            };
                            AbstractCountingChunkSpaceManager.prototype.cloneAndMark = function (previous, newUniverse, newTime, obj, metaModel) {
                                var newCreatedElement = this._space.clone(previous, newUniverse, newTime, obj, metaModel);
                                newCreatedElement.inc();
                                return newCreatedElement;
                            };
                            AbstractCountingChunkSpaceManager.prototype.clear = function () {
                            };
                            AbstractCountingChunkSpaceManager.prototype.register = function (object) {
                                throw "Abstract method";
                            };
                            AbstractCountingChunkSpaceManager.prototype.registerAll = function (objects) {
                                throw "Abstract method";
                            };
                            AbstractCountingChunkSpaceManager.prototype.setResolver = function (resolver) {
                                throw "Abstract method";
                            };
                            return AbstractCountingChunkSpaceManager;
                        })();
                        impl.AbstractCountingChunkSpaceManager = AbstractCountingChunkSpaceManager;
                        var ChunkIterator = (function () {
                            function ChunkIterator(p_dirties, p_origin) {
                                this.currentIndex = 0;
                                this.maxIndex = 0;
                                this._dirties = p_dirties;
                                this._origin = p_origin;
                                this.maxIndex = p_dirties.length / 3;
                                this.tempKeys = new Float64Array(3);
                            }
                            ChunkIterator.prototype.hasNext = function () {
                                return this.currentIndex < this.maxIndex;
                            };
                            ChunkIterator.prototype.next = function () {
                                if (this.currentIndex < this.maxIndex) {
                                    this.tempKeys[0] = this._dirties[this.currentIndex * 3];
                                    this.tempKeys[1] = this._dirties[this.currentIndex * 3 + 1];
                                    this.tempKeys[2] = this._dirties[this.currentIndex * 3 + 2];
                                }
                                this.currentIndex++;
                                return this.tempKeys;
                            };
                            ChunkIterator.prototype.size = function () {
                                return this.maxIndex;
                            };
                            return ChunkIterator;
                        })();
                        impl.ChunkIterator = ChunkIterator;
                        var HeapChunkSpace = (function () {
                            function HeapChunkSpace() {
                                this._dirtyState = new java.util.concurrent.atomic.AtomicReference();
                                this._state = new java.util.concurrent.atomic.AtomicReference();
                                this._dirtyState.set(new org.kevoree.modeling.memory.space.impl.HeapChunkSpace.InternalDirtyState());
                                var initialCapacity = org.kevoree.modeling.KConfig.CACHE_INIT_SIZE;
                                var newstate = new org.kevoree.modeling.memory.space.impl.HeapChunkSpace.InternalState(initialCapacity, new Float64Array(initialCapacity * 3), new Int32Array(initialCapacity), new Int32Array(initialCapacity), new Array());
                                for (var i = 0; i < initialCapacity; i++) {
                                    newstate.elementNext[i] = -1;
                                    newstate.elementHash.set(i, -1);
                                }
                                newstate._threshold = (newstate.elementDataSize * HeapChunkSpace.LOAD_FACTOR);
                                this._state.set(newstate);
                            }
                            HeapChunkSpace.prototype.get = function (universe, time, obj) {
                                var internalState = this._state.get();
                                if (internalState.elementDataSize == 0) {
                                    return null;
                                }
                                var index = ((universe ^ time ^ obj) & 0x7FFFFFFF) % internalState.elementDataSize;
                                var m = internalState.elementHash.get(index);
                                while (m != -1) {
                                    if (universe == internalState.elementK3[(m * 3)] && time == internalState.elementK3[((m * 3) + 1)] && obj == internalState.elementK3[((m * 3) + 2)]) {
                                        return internalState.values[m];
                                    }
                                    else {
                                        m = internalState.elementNext[m];
                                    }
                                }
                                return null;
                            };
                            HeapChunkSpace.prototype.create = function (universe, time, obj, type) {
                                var newElement = this.internal_createElement(universe, time, obj, type);
                                return this.internal_put(universe, time, obj, newElement);
                            };
                            HeapChunkSpace.prototype.clone = function (previousElement, newUniverse, newTime, newObj, metaModel) {
                                return this.internal_put(newUniverse, newTime, newObj, previousElement.clone(newUniverse, newTime, newObj, metaModel));
                            };
                            HeapChunkSpace.prototype.internal_createElement = function (p_universe, p_time, p_obj, type) {
                                switch (type) {
                                    case org.kevoree.modeling.memory.space.KChunkTypes.OBJECT_CHUNK:
                                        return new org.kevoree.modeling.memory.chunk.impl.HeapObjectChunk(p_universe, p_time, p_obj, this);
                                    case org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_MAP:
                                        return new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(p_universe, p_time, p_obj, this);
                                    case org.kevoree.modeling.memory.space.KChunkTypes.LONG_TREE:
                                        return new org.kevoree.modeling.memory.chunk.impl.ArrayLongTree(p_universe, p_time, p_obj, this);
                                    case org.kevoree.modeling.memory.space.KChunkTypes.LONG_LONG_TREE:
                                        return new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongTree(p_universe, p_time, p_obj, this);
                                    default:
                                        return null;
                                }
                            };
                            HeapChunkSpace.prototype.internal_put = function (universe, time, p_obj, payload) {
                                var currentState;
                                var nextState;
                                var result;
                                var nbTry = 0;
                                do {
                                    currentState = this._state.get();
                                    var entry = -1;
                                    var index = -1;
                                    var hash = (universe ^ time ^ p_obj);
                                    if (currentState.elementDataSize != 0) {
                                        index = (hash & 0x7FFFFFFF) % currentState.elementDataSize;
                                        entry = this.findNonNullKeyEntry(universe, time, p_obj, index, currentState);
                                    }
                                    if (entry == -1) {
                                        var nextValueIndex = currentState._valuesIndex.getAndIncrement();
                                        if (nextValueIndex > currentState._threshold) {
                                            return this.complex_insert(universe, time, p_obj, payload, hash, nextValueIndex);
                                        }
                                        else {
                                            nextState = currentState;
                                        }
                                        nextState.elementK3[(nextValueIndex * 3)] = universe;
                                        nextState.elementK3[((nextValueIndex * 3) + 1)] = time;
                                        nextState.elementK3[((nextValueIndex * 3) + 2)] = p_obj;
                                        nextState.values[nextValueIndex] = payload;
                                        nextState.elementNext[nextValueIndex] = nextState.elementHash.getAndSet(index, nextValueIndex);
                                        nextState._elementCount.incrementAndGet();
                                        result = payload;
                                    }
                                    else {
                                        nextState = currentState;
                                        result = nextState.values[entry];
                                    }
                                    nbTry++;
                                    if (nbTry == org.kevoree.modeling.KConfig.CAS_MAX_TRY) {
                                        throw new Error("CompareAndSwap error, failed to converge");
                                    }
                                } while (!this._state.compareAndSet(currentState, nextState));
                                return result;
                            };
                            HeapChunkSpace.prototype.complex_insert = function (universe, time, p_obj, payload, prehash, nextValueIndex) {
                                var currentState;
                                var nextState;
                                do {
                                    currentState = this._state.get();
                                    if (nextValueIndex > currentState._threshold) {
                                        nextState = this.rehashCapacity(currentState);
                                    }
                                    else {
                                        nextState = currentState;
                                    }
                                    var index = (prehash & 0x7FFFFFFF) % nextState.elementDataSize;
                                    nextState.elementK3[(nextValueIndex * 3)] = universe;
                                    nextState.elementK3[((nextValueIndex * 3) + 1)] = time;
                                    nextState.elementK3[((nextValueIndex * 3) + 2)] = p_obj;
                                    nextState.values[nextValueIndex] = payload;
                                    nextState.elementNext[nextValueIndex] = nextState.elementHash.getAndSet(index, nextValueIndex);
                                    nextState._elementCount.incrementAndGet();
                                } while (!this._state.compareAndSet(currentState, nextState));
                                return payload;
                            };
                            HeapChunkSpace.prototype.rehashCapacity = function (previousState) {
                                var length = (previousState.elementDataSize == 0 ? 1 : previousState.elementDataSize << 1);
                                var newElementKV = new Float64Array(length * 3);
                                var newValues = new Array();
                                var previousIsSparse = previousState.sparse;
                                if (!previousIsSparse) {
                                    java.lang.System.arraycopy(previousState.elementK3, 0, newElementKV, 0, previousState.elementDataSize * 3);
                                    java.lang.System.arraycopy(previousState.values, 0, newValues, 0, previousState.elementDataSize);
                                }
                                var newElementNext = new Int32Array(length);
                                var newElementHash = new Int32Array(length);
                                for (var i = 0; i < length; i++) {
                                    newElementNext[i] = -1;
                                    newElementHash[i] = -1;
                                }
                                var currentIndex = 0;
                                for (var i = 0; i < previousState.elementDataSize; i++) {
                                    if (previousState.values[i] != null) {
                                        var hash = (previousState.elementK3[(i * 3)] ^ previousState.elementK3[(i * 3) + 1] ^ previousState.elementK3[(i * 3) + 2]);
                                        var index = (hash & 0x7FFFFFFF) % length;
                                        newElementNext[i] = newElementHash[index];
                                        newElementHash[index] = i;
                                        if (previousIsSparse) {
                                            newValues[currentIndex] = previousState.values[i];
                                            newElementKV[(currentIndex * 3)] = previousState.elementK3[(i * 3)];
                                            newElementKV[(currentIndex * 3) + 1] = previousState.elementK3[(i * 3) + 1];
                                            newElementKV[(currentIndex * 3) + 2] = previousState.elementK3[(i * 3) + 2];
                                            currentIndex++;
                                        }
                                    }
                                }
                                var newState = new org.kevoree.modeling.memory.space.impl.HeapChunkSpace.InternalState(length, newElementKV, newElementNext, newElementHash, newValues);
                                newState._threshold = (length * HeapChunkSpace.LOAD_FACTOR);
                                newState._valuesIndex.set(previousState._valuesIndex.get());
                                if (previousIsSparse) {
                                    newState._elementCount.set(currentIndex);
                                    newState._valuesIndex.set(currentIndex);
                                }
                                else {
                                    newState._elementCount.set(previousState._elementCount.get());
                                    newState._valuesIndex.set(previousState._valuesIndex.get());
                                }
                                return newState;
                            };
                            HeapChunkSpace.prototype.findNonNullKeyEntry = function (universe, time, obj, index, internalState) {
                                var m = internalState.elementHash.get(index);
                                while (m >= 0) {
                                    if (universe == internalState.elementK3[m * 3] && time == internalState.elementK3[(m * 3) + 1] && obj == internalState.elementK3[(m * 3) + 2]) {
                                        return m;
                                    }
                                    m = internalState.elementNext[m];
                                }
                                return -1;
                            };
                            HeapChunkSpace.prototype.detachDirties = function () {
                                var detachedState = this._dirtyState.getAndSet(new org.kevoree.modeling.memory.space.impl.HeapChunkSpace.InternalDirtyState());
                                var maxIndex = detachedState._dirtyIndex.get();
                                var shrinked = new Float64Array(maxIndex * 3);
                                java.lang.System.arraycopy(detachedState._dirtyList, 0, shrinked, 0, maxIndex * 3);
                                return new org.kevoree.modeling.memory.space.impl.ChunkIterator(shrinked, this);
                            };
                            HeapChunkSpace.prototype.declareDirty = function (dirtyChunk) {
                                var nbTry = 0;
                                var current;
                                do {
                                    current = this._dirtyState.get();
                                    current.declareDirty(dirtyChunk.universe(), dirtyChunk.time(), dirtyChunk.obj());
                                    nbTry++;
                                    if (nbTry == org.kevoree.modeling.KConfig.CAS_MAX_TRY) {
                                        throw new Error("CompareAndSwap error, failed to converge");
                                    }
                                } while (!this._dirtyState.compareAndSet(current, current));
                            };
                            HeapChunkSpace.prototype.remove = function (universe, time, obj, p_metaModel) {
                                var previousState;
                                var nbTry = 0;
                                do {
                                    previousState = this._state.get();
                                    var hash = (universe ^ time ^ obj);
                                    var index = (hash & 0x7FFFFFFF) % previousState.elementDataSize;
                                    if (previousState.elementDataSize == 0) {
                                        return;
                                    }
                                    var m = previousState.elementHash.get(index);
                                    var last = -1;
                                    while (m >= 0) {
                                        if (universe == previousState.elementK3[m * 3] && time == previousState.elementK3[(m * 3) + 1] && obj == previousState.elementK3[(m * 3) + 2]) {
                                            break;
                                        }
                                        last = m;
                                        m = previousState.elementNext[m];
                                    }
                                    if (m == -1) {
                                        return;
                                    }
                                    if (last == -1) {
                                        var previousNext = previousState.elementNext[m];
                                        if (!previousState.elementHash.compareAndSet(index, m, previousNext)) {
                                        }
                                    }
                                    else {
                                        previousState.elementNext[last] = previousState.elementNext[m];
                                    }
                                    previousState.elementNext[m] = -1;
                                    var previousValue = previousState.values[m];
                                    previousState.values[m] = null;
                                    if (previousValue != null) {
                                        previousValue.free(p_metaModel);
                                    }
                                    previousState._elementCount.decrementAndGet();
                                    nbTry++;
                                    if (nbTry == org.kevoree.modeling.KConfig.CAS_MAX_TRY) {
                                        throw new Error("CompareAndSwap error, failed to converge");
                                    }
                                } while (!this._state.compareAndSet(previousState, previousState));
                            };
                            HeapChunkSpace.prototype.clear = function (metaModel) {
                                var previousState = this._state.get();
                                if (previousState._elementCount.get() > 0) {
                                    for (var i = 0; i < previousState.elementDataSize; i++) {
                                        if (previousState.values[i] != null) {
                                            previousState.values[i].free(metaModel);
                                        }
                                    }
                                    var initialCapacity = org.kevoree.modeling.KConfig.CACHE_INIT_SIZE;
                                    var newstate = new org.kevoree.modeling.memory.space.impl.HeapChunkSpace.InternalState(initialCapacity, new Float64Array(initialCapacity * 3), new Int32Array(initialCapacity), new Int32Array(initialCapacity), new Array());
                                    for (var i = 0; i < initialCapacity; i++) {
                                        newstate.elementNext[i] = -1;
                                        newstate.elementHash.set(i, -1);
                                    }
                                    newstate._elementCount.set(0);
                                    newstate._valuesIndex.set(0);
                                    newstate._threshold = (newstate.elementDataSize * HeapChunkSpace.LOAD_FACTOR);
                                    this._state.set(newstate);
                                }
                            };
                            HeapChunkSpace.prototype.free = function (metaModel) {
                                var internalState = this._state.getAndSet(null);
                                for (var i = 0; i < internalState.elementDataSize; i++) {
                                    if (internalState.values[i] != null) {
                                        internalState.values[i].free(metaModel);
                                    }
                                }
                                internalState._elementCount.set(0);
                                internalState._valuesIndex.set(0);
                                internalState._threshold = 0;
                            };
                            HeapChunkSpace.prototype.printDebug = function (p_metaModel) {
                                try {
                                    var state = this._state.get();
                                    for (var i = 0; i < state.values.length; i++) {
                                        var loopChunk = state.values[i];
                                        if (loopChunk != null) {
                                            var content = loopChunk.serialize(p_metaModel);
                                            console.log(state.elementK3[i * 3] + "," + state.elementK3[i * 3 + 1] + "," + state.elementK3[i * 3 + 2] + "=>" + loopChunk.type() + "(count:" + loopChunk.counter() + ",flag:" + loopChunk.getFlags() + ")" + "==>" + content);
                                            ;
                                        }
                                    }
                                }
                                catch ($ex$) {
                                    if ($ex$ instanceof Error) {
                                        var e = $ex$;
                                        console.error(e['stack']);
                                        ;
                                    }
                                    else {
                                        throw $ex$;
                                    }
                                }
                            };
                            HeapChunkSpace.prototype.size = function () {
                                return this._state.get()._elementCount.get();
                            };
                            HeapChunkSpace.LOAD_FACTOR = (75 / 100);
                            return HeapChunkSpace;
                        })();
                        impl.HeapChunkSpace = HeapChunkSpace;
                        var HeapChunkSpace;
                        (function (HeapChunkSpace) {
                            var InternalState = (function () {
                                function InternalState(p_elementDataSize, p_elementKE, p_elementNext, p_elementHash, p_values) {
                                    this.sparse = false;
                                    this.elementDataSize = p_elementDataSize;
                                    this.elementK3 = p_elementKE;
                                    this.elementNext = p_elementNext;
                                    this.elementHash = new java.util.concurrent.atomic.AtomicIntegerArray(p_elementHash);
                                    this.values = p_values;
                                    this._elementCount = new java.util.concurrent.atomic.AtomicInteger(0);
                                    this._valuesIndex = new java.util.concurrent.atomic.AtomicInteger(0);
                                }
                                return InternalState;
                            })();
                            HeapChunkSpace.InternalState = InternalState;
                            var InternalDirtyState = (function () {
                                function InternalDirtyState() {
                                    this._dirtyList = new Float64Array(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE * 3);
                                    this._dirtyIndex = new java.util.concurrent.atomic.AtomicInteger(0);
                                }
                                InternalDirtyState.prototype.declareDirty = function (universe, time, obj) {
                                    var nextIndex = this._dirtyIndex.getAndIncrement() * 3;
                                    if (nextIndex + 2 < this._dirtyList.length) {
                                        this._dirtyList[nextIndex] = universe;
                                        this._dirtyList[nextIndex + 1] = time;
                                        this._dirtyList[nextIndex + 2] = obj;
                                    }
                                    else {
                                        this.reallocate(nextIndex);
                                        this._dirtyList[nextIndex] = universe;
                                        this._dirtyList[nextIndex + 1] = time;
                                        this._dirtyList[nextIndex + 2] = obj;
                                    }
                                };
                                InternalDirtyState.prototype.reallocate = function (wantedIndex) {
                                    if (wantedIndex + 2 >= this._dirtyList.length) {
                                        var newlength = wantedIndex << 1;
                                        var previousList = this._dirtyList;
                                        this._dirtyList = new Float64Array(newlength);
                                        java.lang.System.arraycopy(previousList, 0, this._dirtyList, 0, wantedIndex);
                                    }
                                };
                                return InternalDirtyState;
                            })();
                            HeapChunkSpace.InternalDirtyState = InternalDirtyState;
                        })(HeapChunkSpace = impl.HeapChunkSpace || (impl.HeapChunkSpace = {}));
                        var NoopChunkSpaceManager = (function () {
                            function NoopChunkSpaceManager(p_space) {
                                this._space = p_space;
                            }
                            NoopChunkSpaceManager.prototype.getAndMark = function (universe, time, obj) {
                                return this._space.get(universe, time, obj);
                            };
                            NoopChunkSpaceManager.prototype.unmark = function (universe, time, obj) {
                            };
                            NoopChunkSpaceManager.prototype.createAndMark = function (universe, time, obj, type) {
                                return this._space.create(universe, time, obj, type);
                            };
                            NoopChunkSpaceManager.prototype.unmarkMemoryElement = function (element) {
                            };
                            NoopChunkSpaceManager.prototype.markMemoryElement = function (element) {
                            };
                            NoopChunkSpaceManager.prototype.unmarkAllMemoryElements = function (elements) {
                            };
                            NoopChunkSpaceManager.prototype.cloneAndMark = function (previous, newUniverse, newTime, obj, metaModel) {
                                return this._space.clone(previous, newUniverse, newTime, obj, metaModel);
                            };
                            NoopChunkSpaceManager.prototype.clear = function () {
                            };
                            NoopChunkSpaceManager.prototype.register = function (object) {
                            };
                            NoopChunkSpaceManager.prototype.registerAll = function (objects) {
                            };
                            NoopChunkSpaceManager.prototype.setResolver = function (resolver) {
                            };
                            return NoopChunkSpaceManager;
                        })();
                        impl.NoopChunkSpaceManager = NoopChunkSpaceManager;
                    })(impl = space.impl || (space.impl = {}));
                })(space = memory.space || (memory.space = {}));
                var strategy;
                (function (strategy) {
                    var impl;
                    (function (impl) {
                        var HeapMemoryStrategy = (function () {
                            function HeapMemoryStrategy() {
                            }
                            HeapMemoryStrategy.prototype.newSpace = function () {
                                return new org.kevoree.modeling.memory.space.impl.HeapChunkSpace();
                            };
                            HeapMemoryStrategy.prototype.newSpaceManager = function (p_space, p_scheduler) {
                                return new org.kevoree.modeling.memory.space.impl.NoopChunkSpaceManager(p_space);
                            };
                            return HeapMemoryStrategy;
                        })();
                        impl.HeapMemoryStrategy = HeapMemoryStrategy;
                    })(impl = strategy.impl || (strategy.impl = {}));
                })(strategy = memory.strategy || (memory.strategy = {}));
            })(memory = modeling.memory || (modeling.memory = {}));
            var message;
            (function (message) {
                var impl;
                (function (impl) {
                    var Message = (function () {
                        function Message() {
                            this.internal = new Array();
                        }
                        Message.prototype.id = function () {
                            return this.internal[Message.ID_INDEX];
                        };
                        Message.prototype.setID = function (val) {
                            this.internal[Message.ID_INDEX] = val;
                        };
                        Message.prototype.type = function () {
                            return this.internal[Message.TYPE_INDEX];
                        };
                        Message.prototype.setType = function (val) {
                            this.internal[Message.TYPE_INDEX] = val;
                        };
                        Message.prototype.operationName = function () {
                            return this.internal[Message.OPERATION_INDEX];
                        };
                        Message.prototype.setOperationName = function (val) {
                            this.internal[Message.OPERATION_INDEX] = val;
                        };
                        Message.prototype.className = function () {
                            return this.internal[Message.CLASS_INDEX];
                        };
                        Message.prototype.setClassName = function (val) {
                            this.internal[Message.CLASS_INDEX] = val;
                        };
                        Message.prototype.keys = function () {
                            return this.internal[Message.KEYS_INDEX];
                        };
                        Message.prototype.setKeys = function (val) {
                            this.internal[Message.KEYS_INDEX] = val;
                        };
                        Message.prototype.values = function () {
                            return this.internal[Message.VALUES_INDEX];
                        };
                        Message.prototype.setValues = function (val) {
                            this.internal[Message.VALUES_INDEX] = val;
                        };
                        Message.prototype.values2 = function () {
                            return this.internal[Message.VALUES2_INDEX];
                        };
                        Message.prototype.setValues2 = function (val) {
                            this.internal[Message.VALUES2_INDEX] = val;
                        };
                        Message.prototype.peer = function () {
                            return this.internal[Message.PEER_INDEX];
                        };
                        Message.prototype.setPeer = function (val) {
                            this.internal[Message.PEER_INDEX] = val;
                        };
                        Message.prototype.save = function () {
                            var buffer = new java.lang.StringBuilder();
                            var isFirst = true;
                            for (var i = 0; i < Message.NB_ELEM; i++) {
                                if (this.internal[i] != null) {
                                    if (!isFirst) {
                                        buffer.append(org.kevoree.modeling.KConfig.ELEM_SEP);
                                    }
                                    isFirst = false;
                                    buffer.append(Message.KEYS_NAME[i]);
                                    buffer.append(org.kevoree.modeling.KConfig.VAL_SEP);
                                    switch (i) {
                                        case 0:
                                            org.kevoree.modeling.util.Base64.encodeIntToBuffer(this.internal[i], buffer);
                                            break;
                                        case 1:
                                            org.kevoree.modeling.util.Base64.encodeIntToBuffer(this.internal[i], buffer);
                                            break;
                                        case 2:
                                            org.kevoree.modeling.util.Base64.encodeStringToBuffer(this.internal[i], buffer);
                                            break;
                                        case 3:
                                            org.kevoree.modeling.util.Base64.encodeStringToBuffer(this.internal[i], buffer);
                                            break;
                                        case 4:
                                            org.kevoree.modeling.util.Base64.encodeStringToBuffer(this.internal[i], buffer);
                                            break;
                                        case 5:
                                            var lkeys = this.internal[i];
                                            org.kevoree.modeling.util.Base64.encodeIntToBuffer(lkeys.length, buffer);
                                            for (var j = 0; j < lkeys.length; j++) {
                                                buffer.append(org.kevoree.modeling.KConfig.VAL_SEP);
                                                org.kevoree.modeling.util.Base64.encodeLongToBuffer(lkeys[j], buffer);
                                            }
                                            break;
                                        case 6:
                                            var lvalues = this.internal[i];
                                            org.kevoree.modeling.util.Base64.encodeIntToBuffer(lvalues.length, buffer);
                                            for (var j = 0; j < lvalues.length; j++) {
                                                buffer.append(org.kevoree.modeling.KConfig.VAL_SEP);
                                                if (lvalues[j] != null) {
                                                    org.kevoree.modeling.util.Base64.encodeStringToBuffer(lvalues[j], buffer);
                                                }
                                            }
                                            break;
                                        case 7:
                                            var lvalues2 = this.internal[i];
                                            org.kevoree.modeling.util.Base64.encodeIntToBuffer(lvalues2.length, buffer);
                                            for (var j = 0; j < lvalues2.length; j++) {
                                                buffer.append(org.kevoree.modeling.KConfig.VAL_SEP);
                                                if (lvalues2[j] != null) {
                                                    org.kevoree.modeling.util.Base64.encodeStringToBuffer(lvalues2[j], buffer);
                                                }
                                            }
                                            break;
                                    }
                                }
                            }
                            return buffer.toString();
                        };
                        Message.load = function (payload) {
                            var msg = new org.kevoree.modeling.message.impl.Message();
                            if (payload == null) {
                                return null;
                            }
                            var i = 0;
                            var readElemIndex = -1;
                            var previousValStart = -1;
                            var longArray = null;
                            var stringArray = null;
                            var currentArrayIndex = -1;
                            var payloadSize = payload.length;
                            while (i < payloadSize) {
                                if (payload.charAt(i) == org.kevoree.modeling.KConfig.ELEM_SEP) {
                                    if (readElemIndex != -1) {
                                        if (readElemIndex < 2) {
                                            msg.internal[readElemIndex] = org.kevoree.modeling.util.Base64.decodeToIntWithBounds(payload, previousValStart, i);
                                        }
                                        else {
                                            if (readElemIndex < 5) {
                                                msg.internal[readElemIndex] = org.kevoree.modeling.util.Base64.decodeToStringWithBounds(payload, previousValStart, i);
                                            }
                                            else {
                                                if (readElemIndex == 5 && longArray != null) {
                                                    longArray[currentArrayIndex] = org.kevoree.modeling.util.Base64.decodeToLongWithBounds(payload, previousValStart, i);
                                                    msg.internal[readElemIndex] = longArray;
                                                    longArray = null;
                                                }
                                                else {
                                                    if (stringArray != null) {
                                                        stringArray[currentArrayIndex] = org.kevoree.modeling.util.Base64.decodeToStringWithBounds(payload, previousValStart, i);
                                                        msg.internal[readElemIndex] = stringArray;
                                                        stringArray = null;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    previousValStart = -1;
                                    readElemIndex = -1;
                                }
                                else {
                                    if (payload.charAt(i) == org.kevoree.modeling.KConfig.VAL_SEP) {
                                        if (readElemIndex == -1) {
                                            var pastType = payload.charAt(i - 1);
                                            for (var h = 0; h < Message.NB_ELEM; h++) {
                                                if (pastType == Message.KEYS_NAME[h]) {
                                                    readElemIndex = h;
                                                }
                                            }
                                        }
                                        else {
                                            if (readElemIndex > 5) {
                                                if (stringArray == null) {
                                                    stringArray = new Array();
                                                    currentArrayIndex = 0;
                                                }
                                                else {
                                                    stringArray[currentArrayIndex] = org.kevoree.modeling.util.Base64.decodeToStringWithBounds(payload, previousValStart, i);
                                                    currentArrayIndex++;
                                                }
                                            }
                                            else {
                                                if (longArray == null) {
                                                    longArray = new Float64Array(org.kevoree.modeling.util.Base64.decodeToIntWithBounds(payload, previousValStart, i));
                                                    currentArrayIndex = 0;
                                                }
                                                else {
                                                    longArray[currentArrayIndex] = org.kevoree.modeling.util.Base64.decodeToLongWithBounds(payload, previousValStart, i);
                                                    currentArrayIndex++;
                                                }
                                            }
                                        }
                                        previousValStart = i + 1;
                                    }
                                }
                                i++;
                            }
                            if (readElemIndex != -1) {
                                if (readElemIndex < 2) {
                                    msg.internal[readElemIndex] = org.kevoree.modeling.util.Base64.decodeToInt(payload.substring(previousValStart, i));
                                }
                                else {
                                    if (readElemIndex < 5) {
                                        msg.internal[readElemIndex] = org.kevoree.modeling.util.Base64.decodeToStringWithBounds(payload, previousValStart, i);
                                    }
                                    else {
                                        if (readElemIndex == 5 && longArray != null) {
                                            longArray[currentArrayIndex] = org.kevoree.modeling.util.Base64.decodeToLong(payload.substring(previousValStart, i));
                                            msg.internal[readElemIndex] = longArray;
                                        }
                                        else {
                                            if (stringArray != null) {
                                                stringArray[currentArrayIndex] = org.kevoree.modeling.util.Base64.decodeToStringWithBounds(payload, previousValStart, i);
                                                msg.internal[readElemIndex] = stringArray;
                                            }
                                        }
                                    }
                                }
                            }
                            return msg;
                        };
                        Message.TYPE_INDEX = 0;
                        Message.ID_INDEX = 1;
                        Message.OPERATION_INDEX = 2;
                        Message.CLASS_INDEX = 3;
                        Message.PEER_INDEX = 4;
                        Message.KEYS_INDEX = 5;
                        Message.VALUES_INDEX = 6;
                        Message.VALUES2_INDEX = 7;
                        Message.KEYS_NAME = ['T', 'I', 'O', 'C', 'P', 'K', 'V', 'W'];
                        Message.EVENTS_TYPE = 0;
                        Message.GET_REQ_TYPE = 1;
                        Message.GET_RES_TYPE = 2;
                        Message.PUT_REQ_TYPE = 3;
                        Message.PUT_RES_TYPE = 4;
                        Message.OPERATION_CALL_TYPE = 5;
                        Message.OPERATION_RESULT_TYPE = 6;
                        Message.ATOMIC_GET_INC_REQUEST_TYPE = 7;
                        Message.ATOMIC_GET_INC_RESULT_TYPE = 8;
                        Message.OPERATION_MAPPING = 9;
                        Message.NB_ELEM = 8;
                        return Message;
                    })();
                    impl.Message = Message;
                })(impl = message.impl || (message.impl = {}));
            })(message = modeling.message || (modeling.message = {}));
            var meta;
            (function (meta) {
                var KPrimitiveTypes = (function () {
                    function KPrimitiveTypes() {
                    }
                    KPrimitiveTypes.isEnum = function (attributeTypeId) {
                        return attributeTypeId >= 0;
                    };
                    KPrimitiveTypes.BOOL_ID = -1;
                    KPrimitiveTypes.STRING_ID = -2;
                    KPrimitiveTypes.LONG_ID = -3;
                    KPrimitiveTypes.INT_ID = -4;
                    KPrimitiveTypes.DOUBLE_ID = -5;
                    KPrimitiveTypes.CONTINUOUS_ID = -6;
                    KPrimitiveTypes.BOOL = new org.kevoree.modeling.abs.AbstractDataType("BOOL", KPrimitiveTypes.BOOL_ID);
                    KPrimitiveTypes.STRING = new org.kevoree.modeling.abs.AbstractDataType("STRING", KPrimitiveTypes.STRING_ID);
                    KPrimitiveTypes.LONG = new org.kevoree.modeling.abs.AbstractDataType("LONG", KPrimitiveTypes.LONG_ID);
                    KPrimitiveTypes.INT = new org.kevoree.modeling.abs.AbstractDataType("INT", KPrimitiveTypes.INT_ID);
                    KPrimitiveTypes.DOUBLE = new org.kevoree.modeling.abs.AbstractDataType("DOUBLE", KPrimitiveTypes.DOUBLE_ID);
                    KPrimitiveTypes.CONTINUOUS = new org.kevoree.modeling.abs.AbstractDataType("CONTINUOUS", KPrimitiveTypes.CONTINUOUS_ID);
                    return KPrimitiveTypes;
                })();
                meta.KPrimitiveTypes = KPrimitiveTypes;
                var MetaType = (function () {
                    function MetaType() {
                    }
                    MetaType.prototype.equals = function (other) {
                        return this == other;
                    };
                    MetaType.values = function () {
                        return MetaType._MetaTypeVALUES;
                    };
                    MetaType.ATTRIBUTE = new MetaType();
                    MetaType.RELATION = new MetaType();
                    MetaType.DEPENDENCY = new MetaType();
                    MetaType.DEPENDENCIES = new MetaType();
                    MetaType.INPUT = new MetaType();
                    MetaType.OUTPUT = new MetaType();
                    MetaType.OPERATION = new MetaType();
                    MetaType.CLASS = new MetaType();
                    MetaType.MODEL = new MetaType();
                    MetaType.ENUM = new MetaType();
                    MetaType.LITERAL = new MetaType();
                    MetaType._MetaTypeVALUES = [
                        MetaType.ATTRIBUTE,
                        MetaType.RELATION,
                        MetaType.DEPENDENCY,
                        MetaType.DEPENDENCIES,
                        MetaType.INPUT,
                        MetaType.OUTPUT,
                        MetaType.OPERATION,
                        MetaType.CLASS,
                        MetaType.MODEL,
                        MetaType.ENUM,
                        MetaType.LITERAL
                    ];
                    return MetaType;
                })();
                meta.MetaType = MetaType;
                var impl;
                (function (impl) {
                    var GenericModel = (function (_super) {
                        __extends(GenericModel, _super);
                        function GenericModel(mm, p_manager) {
                            _super.call(this, p_manager);
                            this._p_metaModel = mm;
                        }
                        GenericModel.prototype.metaModel = function () {
                            return this._p_metaModel;
                        };
                        GenericModel.prototype.internalCreateUniverse = function (universe) {
                            return new org.kevoree.modeling.meta.impl.GenericUniverse(universe, this._manager);
                        };
                        GenericModel.prototype.internalCreateObject = function (universe, time, uuid, clazz, previousUniverse, previousTime) {
                            if (clazz.inferAlg() != null) {
                                return new org.kevoree.modeling.meta.impl.GenericObjectInfer(universe, time, uuid, clazz, this._manager, previousUniverse, previousTime);
                            }
                            else {
                                return new org.kevoree.modeling.meta.impl.GenericObject(universe, time, uuid, clazz, this._manager, previousUniverse, previousTime);
                            }
                        };
                        return GenericModel;
                    })(org.kevoree.modeling.abs.AbstractKModel);
                    impl.GenericModel = GenericModel;
                    var GenericObject = (function (_super) {
                        __extends(GenericObject, _super);
                        function GenericObject(p_universe, p_time, p_uuid, p_metaClass, p_manager, currentUniverse, currentTime) {
                            _super.call(this, p_universe, p_time, p_uuid, p_metaClass, p_manager, currentUniverse, currentTime);
                        }
                        return GenericObject;
                    })(org.kevoree.modeling.abs.AbstractKObject);
                    impl.GenericObject = GenericObject;
                    var GenericObjectInfer = (function (_super) {
                        __extends(GenericObjectInfer, _super);
                        function GenericObjectInfer(p_universe, p_time, p_uuid, p_metaClass, p_manager, currentUniverse, currentTime) {
                            _super.call(this, p_universe, p_time, p_uuid, p_metaClass, p_manager, currentUniverse, currentTime);
                        }
                        return GenericObjectInfer;
                    })(org.kevoree.modeling.abs.AbstractKObjectInfer);
                    impl.GenericObjectInfer = GenericObjectInfer;
                    var GenericUniverse = (function (_super) {
                        __extends(GenericUniverse, _super);
                        function GenericUniverse(p_key, p_manager) {
                            _super.call(this, p_key, p_manager);
                        }
                        GenericUniverse.prototype.internal_create = function (timePoint) {
                            return new org.kevoree.modeling.meta.impl.GenericView(this._universe, timePoint, this._manager);
                        };
                        return GenericUniverse;
                    })(org.kevoree.modeling.abs.AbstractKUniverse);
                    impl.GenericUniverse = GenericUniverse;
                    var GenericView = (function (_super) {
                        __extends(GenericView, _super);
                        function GenericView(p_universe, _time, p_manager) {
                            _super.call(this, p_universe, _time, p_manager);
                        }
                        return GenericView;
                    })(org.kevoree.modeling.abs.AbstractKView);
                    impl.GenericView = GenericView;
                    var MetaAttribute = (function () {
                        function MetaAttribute(p_name, p_index, p_precision, p_key, p_attributeTypeId, p_extrapolation) {
                            this._name = p_name;
                            this._index = p_index;
                            this._precision = p_precision;
                            this._key = p_key;
                            this._attributeTypeId = p_attributeTypeId;
                            this._extrapolation = p_extrapolation;
                            if (this._extrapolation == null) {
                                this._extrapolation = org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation.instance();
                            }
                        }
                        MetaAttribute.prototype.attributeTypeId = function () {
                            return this._attributeTypeId;
                        };
                        MetaAttribute.prototype.index = function () {
                            return this._index;
                        };
                        MetaAttribute.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaAttribute.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.ATTRIBUTE;
                        };
                        MetaAttribute.prototype.precision = function () {
                            return this._precision;
                        };
                        MetaAttribute.prototype.key = function () {
                            return this._key;
                        };
                        MetaAttribute.prototype.strategy = function () {
                            return this._extrapolation;
                        };
                        MetaAttribute.prototype.setExtrapolation = function (extrapolation) {
                            this._extrapolation = extrapolation;
                        };
                        MetaAttribute.prototype.setPrecision = function (p_precision) {
                            this._precision = p_precision;
                        };
                        return MetaAttribute;
                    })();
                    impl.MetaAttribute = MetaAttribute;
                    var MetaClass = (function () {
                        function MetaClass(p_name, p_index, p_alg, p_parents) {
                            this._indexes = null;
                            this._cachedInputs = null;
                            this._cachedOutputs = null;
                            this._parents = null;
                            this._temporalResolution = 1;
                            this._name = p_name;
                            this._index = p_index;
                            this._meta = new Array();
                            this._alg = p_alg;
                            this._parents = p_parents;
                            this._indexes = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                            if (this._alg != null) {
                                this.internal_add_meta(new org.kevoree.modeling.meta.impl.MetaDependencies(this._meta.length, this));
                            }
                        }
                        MetaClass.prototype.init = function (p_metaElements) {
                            this._indexes.clear();
                            this._meta = p_metaElements;
                            for (var i = 0; i < this._meta.length; i++) {
                                this._indexes.put(p_metaElements[i].metaName(), p_metaElements[i].index());
                            }
                            this.clearCached();
                        };
                        MetaClass.prototype.metaByName = function (name) {
                            if (this._indexes != null) {
                                var resolvedIndex = this._indexes.get(name);
                                if (resolvedIndex != null) {
                                    return this._meta[resolvedIndex];
                                }
                            }
                            return null;
                        };
                        MetaClass.prototype.metaParents = function () {
                            return this._parents;
                        };
                        MetaClass.prototype.attribute = function (name) {
                            var resolved = this.metaByName(name);
                            if (resolved != null && resolved.metaType() == org.kevoree.modeling.meta.MetaType.ATTRIBUTE) {
                                return resolved;
                            }
                            return null;
                        };
                        MetaClass.prototype.reference = function (name) {
                            var resolved = this.metaByName(name);
                            if (resolved != null && resolved.metaType() == org.kevoree.modeling.meta.MetaType.RELATION) {
                                return resolved;
                            }
                            return null;
                        };
                        MetaClass.prototype.operation = function (name) {
                            var resolved = this.metaByName(name);
                            if (resolved != null && resolved.metaType() == org.kevoree.modeling.meta.MetaType.OPERATION) {
                                return resolved;
                            }
                            return null;
                        };
                        MetaClass.prototype.metaElements = function () {
                            return this._meta;
                        };
                        MetaClass.prototype.index = function () {
                            return this._index;
                        };
                        MetaClass.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaClass.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.CLASS;
                        };
                        MetaClass.prototype.meta = function (index) {
                            if (index >= 0 && index < this._meta.length) {
                                return this._meta[index];
                            }
                            else {
                                return null;
                            }
                        };
                        MetaClass.prototype.addAttribute = function (attributeName, p_type) {
                            return this.internal_addatt(attributeName, p_type);
                        };
                        MetaClass.prototype.internal_addatt = function (attributeName, p_type) {
                            var precisionCleaned = -1;
                            var extrapolation;
                            if (p_type.id() == org.kevoree.modeling.meta.KPrimitiveTypes.CONTINUOUS_ID) {
                                extrapolation = org.kevoree.modeling.extrapolation.impl.PolynomialExtrapolation.instance();
                                precisionCleaned = 0.1;
                            }
                            else {
                                extrapolation = org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation.instance();
                            }
                            var tempAttribute = new org.kevoree.modeling.meta.impl.MetaAttribute(attributeName, this._meta.length, precisionCleaned, false, p_type.id(), extrapolation);
                            this.internal_add_meta(tempAttribute);
                            return tempAttribute;
                        };
                        MetaClass.prototype.addRelation = function (relationName, p_metaClass, oppositeName) {
                            return this.internal_addref(relationName, p_metaClass, oppositeName);
                        };
                        MetaClass.prototype.internal_addref = function (referenceName, p_metaClass, oppositeName) {
                            var tempOrigin = this;
                            var opName = oppositeName;
                            if (opName == null) {
                                opName = "op_" + referenceName;
                                p_metaClass.getOrCreate(opName, referenceName, this, false);
                            }
                            else {
                                p_metaClass.getOrCreate(opName, referenceName, this, true);
                            }
                            var tempReference = new org.kevoree.modeling.meta.impl.MetaRelation(referenceName, this._meta.length, true, p_metaClass.index(), opName, tempOrigin.index(), -1);
                            this.internal_add_meta(tempReference);
                            return tempReference;
                        };
                        MetaClass.prototype.getOrCreate = function (p_name, p_oppositeName, p_oppositeClass, p_visible) {
                            var previous = this.reference(p_name);
                            if (previous != null) {
                                return previous;
                            }
                            var tempOrigin = this;
                            var tempReference = new org.kevoree.modeling.meta.impl.MetaRelation(p_name, this._meta.length, p_visible, p_oppositeClass.index(), p_oppositeName, tempOrigin.index(), -1);
                            this.internal_add_meta(tempReference);
                            return tempReference;
                        };
                        MetaClass.prototype.addOperation = function (operationName) {
                            var tempOrigin = this;
                            var tempOperation = new org.kevoree.modeling.meta.impl.MetaOperation(operationName, this._meta.length, tempOrigin.index(), new Int32Array([]), -1, [], false);
                            this.internal_add_meta(tempOperation);
                            return tempOperation;
                        };
                        MetaClass.prototype.inferAlg = function () {
                            return this._alg;
                        };
                        MetaClass.prototype.addDependency = function (dependencyName, referredMetaClassIndex) {
                            var currentDeps = this.dependencies();
                            if (currentDeps != null) {
                                return currentDeps.addDependency(dependencyName, referredMetaClassIndex);
                            }
                            return null;
                        };
                        MetaClass.prototype.addInput = function (p_name, p_extractor) {
                            var newInput = new org.kevoree.modeling.meta.impl.MetaInferInput(p_name, this._meta.length, p_extractor);
                            this.internal_add_meta(newInput);
                            return newInput;
                        };
                        MetaClass.prototype.addOutput = function (p_name, p_type) {
                            var newOutput = new org.kevoree.modeling.meta.impl.MetaInferOutput(p_name, this._meta.length, p_type.id());
                            this.internal_add_meta(newOutput);
                            return newOutput;
                        };
                        MetaClass.prototype.dependencies = function () {
                            return this.metaByName(org.kevoree.modeling.meta.impl.MetaDependencies.DEPENDENCIES_NAME);
                        };
                        MetaClass.prototype.inputs = function () {
                            if (this._cachedInputs == null) {
                                this.cacheInputs();
                            }
                            return this._cachedInputs;
                        };
                        MetaClass.prototype.cacheInputs = function () {
                            var nb = 0;
                            for (var i = 0; i < this._meta.length; i++) {
                                if (this._meta[i].metaType().equals(org.kevoree.modeling.meta.MetaType.INPUT)) {
                                    nb++;
                                }
                            }
                            this._cachedInputs = new Array();
                            nb = 0;
                            for (var i = 0; i < this._meta.length; i++) {
                                if (this._meta[i].metaType().equals(org.kevoree.modeling.meta.MetaType.INPUT)) {
                                    this._cachedInputs[nb] = this._meta[i];
                                    nb++;
                                }
                            }
                        };
                        MetaClass.prototype.outputs = function () {
                            if (this._cachedOutputs == null) {
                                this.cacheOuputs();
                            }
                            return this._cachedOutputs;
                        };
                        MetaClass.prototype.temporalResolution = function () {
                            return this._temporalResolution;
                        };
                        MetaClass.prototype.setTemporalResolution = function (p_tempo) {
                            this._temporalResolution = p_tempo;
                        };
                        MetaClass.prototype.cacheOuputs = function () {
                            var nb = 0;
                            for (var i = 0; i < this._meta.length; i++) {
                                if (this._meta[i].metaType().equals(org.kevoree.modeling.meta.MetaType.OUTPUT)) {
                                    nb++;
                                }
                            }
                            this._cachedOutputs = new Array();
                            nb = 0;
                            for (var i = 0; i < this._meta.length; i++) {
                                if (this._meta[i].metaType().equals(org.kevoree.modeling.meta.MetaType.OUTPUT)) {
                                    this._cachedOutputs[nb] = this._meta[i];
                                    nb++;
                                }
                            }
                        };
                        MetaClass.prototype.clearCached = function () {
                            this._cachedOutputs = null;
                            this._cachedInputs = null;
                        };
                        MetaClass.prototype.internal_add_meta = function (p_new_meta) {
                            this.clearCached();
                            this._meta[p_new_meta.index()] = p_new_meta;
                            this._indexes.put(p_new_meta.metaName(), p_new_meta.index());
                        };
                        MetaClass.prototype.addParent = function (parentMetaClass) {
                            var newParents = new Int32Array(this._parents.length + 1);
                            java.lang.System.arraycopy(this._parents, 0, newParents, 0, this._parents.length);
                            newParents[this._parents.length] = parentMetaClass.index();
                            this._parents = newParents;
                        };
                        return MetaClass;
                    })();
                    impl.MetaClass = MetaClass;
                    var MetaDependencies = (function () {
                        function MetaDependencies(p_index, p_origin) {
                            this._indexes = null;
                            this._index = p_index;
                            this._origin = p_origin;
                            this._dependencies = new Array();
                            this._indexes = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                        }
                        MetaDependencies.prototype.origin = function () {
                            return this._origin;
                        };
                        MetaDependencies.prototype.allDependencies = function () {
                            return this._dependencies;
                        };
                        MetaDependencies.prototype.dependencyByName = function (dependencyName) {
                            var foundedIndex = this._indexes.get(dependencyName);
                            if (foundedIndex != null) {
                                return this._dependencies[foundedIndex];
                            }
                            else {
                                return null;
                            }
                        };
                        MetaDependencies.prototype.index = function () {
                            return this._index;
                        };
                        MetaDependencies.prototype.metaName = function () {
                            return MetaDependencies.DEPENDENCIES_NAME;
                        };
                        MetaDependencies.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.DEPENDENCIES;
                        };
                        MetaDependencies.prototype.addDependency = function (p_dependencyName, p_referredMetaClassIndex) {
                            var newDependency = new org.kevoree.modeling.meta.impl.MetaDependency(p_dependencyName, this._dependencies.length, this, p_referredMetaClassIndex);
                            this.internal_add_dep(newDependency);
                            return newDependency;
                        };
                        MetaDependencies.prototype.internal_add_dep = function (p_new_meta) {
                            this._dependencies[p_new_meta.index()] = p_new_meta;
                            this._indexes.put(p_new_meta.metaName(), p_new_meta.index());
                        };
                        MetaDependencies.DEPENDENCIES_NAME = "allDependencies";
                        return MetaDependencies;
                    })();
                    impl.MetaDependencies = MetaDependencies;
                    var MetaDependency = (function () {
                        function MetaDependency(p_name, p_index, p_origin, p_referredMetaClassIndex) {
                            this._name = p_name;
                            this._index = p_index;
                            this._referredMetaClassIndex = p_referredMetaClassIndex;
                        }
                        MetaDependency.prototype.referredMetaClassIndex = function () {
                            return this._referredMetaClassIndex;
                        };
                        MetaDependency.prototype.index = function () {
                            return this._index;
                        };
                        MetaDependency.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaDependency.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.DEPENDENCY;
                        };
                        return MetaDependency;
                    })();
                    impl.MetaDependency = MetaDependency;
                    var MetaEnum = (function () {
                        function MetaEnum(p_name, p_index) {
                            this._indexes = null;
                            this._name = p_name;
                            this._index = p_index;
                            this._literals = new Array();
                            this._indexes = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                        }
                        MetaEnum.prototype.init = function (lits) {
                            this._literals = lits;
                            for (var i = 0; i < lits.length; i++) {
                                this._indexes.put(lits[i].metaName(), lits[i].index());
                            }
                        };
                        MetaEnum.prototype.literals = function () {
                            return this._literals;
                        };
                        MetaEnum.prototype.literalByName = function (p_name) {
                            if (this._indexes != null) {
                                var resolvedIndex = this._indexes.get(p_name);
                                if (resolvedIndex != null) {
                                    return this._literals[resolvedIndex];
                                }
                            }
                            return null;
                        };
                        MetaEnum.prototype.literal = function (p_index) {
                            return this._literals[p_index];
                        };
                        MetaEnum.prototype.addLiteral = function (p_name) {
                            var newLiteral = new org.kevoree.modeling.meta.impl.MetaLiteral(p_name, this._literals.length, this._name);
                            this.internal_add_meta(newLiteral);
                            return newLiteral;
                        };
                        MetaEnum.prototype.name = function () {
                            return this._name;
                        };
                        MetaEnum.prototype.id = function () {
                            return this._index;
                        };
                        MetaEnum.prototype.index = function () {
                            return this._index;
                        };
                        MetaEnum.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaEnum.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.ENUM;
                        };
                        MetaEnum.prototype.internal_add_meta = function (p_new_meta) {
                            this._literals[p_new_meta.index()] = p_new_meta;
                            this._indexes.put(p_new_meta.metaName(), p_new_meta.index());
                        };
                        return MetaEnum;
                    })();
                    impl.MetaEnum = MetaEnum;
                    var MetaInferInput = (function () {
                        function MetaInferInput(p_name, p_index, p_extractor) {
                            this._name = p_name;
                            this._index = p_index;
                            this._extractor = p_extractor;
                        }
                        MetaInferInput.prototype.extractorQuery = function () {
                            return this._extractor;
                        };
                        MetaInferInput.prototype.extractor = function () {
                            if (this._cachedTraversal != null) {
                                return this._cachedTraversal;
                            }
                            else {
                                return this.cacheTraversal();
                            }
                        };
                        MetaInferInput.prototype.cacheTraversal = function () {
                            this._cachedTraversal = org.kevoree.modeling.traversal.query.impl.QueryEngine.getINSTANCE().buildTraversal(this._extractor);
                            return this._cachedTraversal;
                        };
                        MetaInferInput.prototype.index = function () {
                            return this._index;
                        };
                        MetaInferInput.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaInferInput.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.INPUT;
                        };
                        return MetaInferInput;
                    })();
                    impl.MetaInferInput = MetaInferInput;
                    var MetaInferOutput = (function () {
                        function MetaInferOutput(p_name, p_index, p_type) {
                            this._name = p_name;
                            this._index = p_index;
                            this._type = p_type;
                        }
                        MetaInferOutput.prototype.index = function () {
                            return this._index;
                        };
                        MetaInferOutput.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaInferOutput.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.OUTPUT;
                        };
                        MetaInferOutput.prototype.attributeTypeId = function () {
                            return this._type;
                        };
                        return MetaInferOutput;
                    })();
                    impl.MetaInferOutput = MetaInferOutput;
                    var MetaLiteral = (function () {
                        function MetaLiteral(p_name, p_index, p_className) {
                            this._name = p_name;
                            this._index = p_index;
                            this._className = p_className;
                        }
                        MetaLiteral.prototype.index = function () {
                            return this._index;
                        };
                        MetaLiteral.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaLiteral.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.LITERAL;
                        };
                        MetaLiteral.prototype.toString = function () {
                            return "KLiteral@" + this._className + "." + this._name;
                        };
                        return MetaLiteral;
                    })();
                    impl.MetaLiteral = MetaLiteral;
                    var MetaModel = (function () {
                        function MetaModel(p_name) {
                            this._metaClasses_indexes = null;
                            this._metaTypes_indexes = null;
                            this._name = p_name;
                            this._index = 0;
                            this._metaClasses = new Array();
                            this._metaTypes = new Array();
                            this._metaClasses_indexes = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                            this._metaTypes_indexes = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                        }
                        MetaModel.prototype.index = function () {
                            return this._index;
                        };
                        MetaModel.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaModel.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.MODEL;
                        };
                        MetaModel.prototype.init = function (p_metaClasses, p_metaEnums) {
                            this._metaClasses_indexes.clear();
                            this._metaTypes_indexes.clear();
                            this._metaClasses = p_metaClasses;
                            this._metaTypes = p_metaEnums;
                            for (var i = 0; i < this._metaClasses.length; i++) {
                                this._metaClasses_indexes.put(p_metaClasses[i].metaName(), p_metaClasses[i].index());
                            }
                            for (var i = 0; i < this._metaTypes.length; i++) {
                                this._metaTypes_indexes.put(p_metaEnums[i].metaName(), p_metaEnums[i].index());
                            }
                        };
                        MetaModel.prototype.metaClasses = function () {
                            return this._metaClasses;
                        };
                        MetaModel.prototype.metaClassByName = function (name) {
                            if (this._metaClasses_indexes == null) {
                                return null;
                            }
                            var resolved = this._metaClasses_indexes.get(name);
                            if (resolved == null) {
                                return null;
                            }
                            else {
                                return this._metaClasses[resolved];
                            }
                        };
                        MetaModel.prototype.metaClass = function (index) {
                            if (index >= 0 && index < this._metaClasses.length) {
                                return this._metaClasses[index];
                            }
                            return null;
                        };
                        MetaModel.prototype.addMetaClass = function (metaClassName) {
                            return this.internal_addmetaclass(metaClassName, null);
                        };
                        MetaModel.prototype.addInferMetaClass = function (metaClassName, inferAlg) {
                            return this.internal_addmetaclass(metaClassName, inferAlg);
                        };
                        MetaModel.prototype.metaTypes = function () {
                            return this._metaTypes;
                        };
                        MetaModel.prototype.metaTypeByName = function (p_name) {
                            if (this._metaTypes == null) {
                                return null;
                            }
                            var resolved = this._metaTypes_indexes.get(p_name);
                            if (resolved == null) {
                                return null;
                            }
                            else {
                                return this._metaTypes[resolved];
                            }
                        };
                        MetaModel.prototype.addMetaEnum = function (enumName) {
                            var newEnumType = new org.kevoree.modeling.meta.impl.MetaEnum(enumName, this._metaTypes.length);
                            this.internal_add_type(newEnumType);
                            return newEnumType;
                        };
                        MetaModel.prototype.internal_addmetaclass = function (metaClassName, alg) {
                            if (this._metaClasses_indexes.contains(metaClassName)) {
                                return this.metaClassByName(metaClassName);
                            }
                            else {
                                if (this._metaClasses == null) {
                                    this._metaClasses = new Array();
                                    this._metaClasses[0] = new org.kevoree.modeling.meta.impl.MetaClass(metaClassName, 0, alg, new Int32Array([]));
                                    this._metaClasses_indexes.put(metaClassName, this._metaClasses[0].index());
                                    return this._metaClasses[0];
                                }
                                else {
                                    var newMetaClass = new org.kevoree.modeling.meta.impl.MetaClass(metaClassName, this._metaClasses.length, alg, new Int32Array([]));
                                    this.internal_add_meta_class(newMetaClass);
                                    return newMetaClass;
                                }
                            }
                        };
                        MetaModel.prototype.internal_add_meta_class = function (p_newMetaClass) {
                            this._metaClasses[p_newMetaClass.index()] = p_newMetaClass;
                            this._metaClasses_indexes.put(p_newMetaClass.metaName(), p_newMetaClass.index());
                        };
                        MetaModel.prototype.internal_add_type = function (p_newType) {
                            this._metaTypes[p_newType.index()] = p_newType;
                            this._metaTypes_indexes.put(p_newType.metaName(), p_newType.index());
                        };
                        MetaModel.prototype.createModel = function (p_manager) {
                            return new org.kevoree.modeling.meta.impl.GenericModel(this, p_manager);
                        };
                        return MetaModel;
                    })();
                    impl.MetaModel = MetaModel;
                    var MetaOperation = (function () {
                        function MetaOperation(p_name, p_index, p_originMetaClassIndex, p_paramTypes, p_returnType, p_paramIsArray, p_returnIsArray) {
                            this._paramTypes = null;
                            this._paramIsArray = null;
                            this._returnIsArray = false;
                            this._name = p_name;
                            this._index = p_index;
                            this._originMetaClassIndex = p_originMetaClassIndex;
                            this._paramTypes = p_paramTypes;
                            this._returnType = p_returnType;
                            this._paramIsArray = p_paramIsArray;
                            this._returnIsArray = p_returnIsArray;
                        }
                        MetaOperation.prototype.index = function () {
                            return this._index;
                        };
                        MetaOperation.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaOperation.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.OPERATION;
                        };
                        MetaOperation.prototype.originMetaClassIndex = function () {
                            return this._originMetaClassIndex;
                        };
                        MetaOperation.prototype.paramTypes = function () {
                            return this._paramTypes;
                        };
                        MetaOperation.prototype.paramMultiplicities = function () {
                            return this._paramIsArray;
                        };
                        MetaOperation.prototype.returnType = function () {
                            return this._returnType;
                        };
                        MetaOperation.prototype.returnTypeIsArray = function () {
                            return this._returnIsArray;
                        };
                        MetaOperation.prototype.addParam = function (type, isArray) {
                            var newParam = new Int32Array(this._paramTypes.length + 1);
                            var newParamIsArray = new Array();
                            java.lang.System.arraycopy(this._paramTypes, 0, newParam, 0, this._paramTypes.length);
                            java.lang.System.arraycopy(this._paramIsArray, 0, newParamIsArray, 0, this._paramIsArray.length);
                            newParam[this._paramTypes.length] = type.id();
                            newParamIsArray[this._paramIsArray.length] = isArray;
                            this._paramTypes = newParam;
                            this._paramIsArray = newParamIsArray;
                        };
                        MetaOperation.prototype.setReturnType = function (type, isArray) {
                            this._returnType = type.id();
                            this._returnIsArray = isArray;
                        };
                        return MetaOperation;
                    })();
                    impl.MetaOperation = MetaOperation;
                    var MetaRelation = (function () {
                        function MetaRelation(p_name, p_index, p_visible, p_referredMetaClassIndex, op_name, p_originMetaClassIndex, p_maxBound) {
                            this._maxBound = -1;
                            this._name = p_name;
                            this._index = p_index;
                            this._visible = p_visible;
                            this._referredMetaClassIndex = p_referredMetaClassIndex;
                            this._op_name = op_name;
                            this._originMetaClassIndex = p_originMetaClassIndex;
                            this._maxBound = p_maxBound;
                        }
                        MetaRelation.prototype.referredMetaClassIndex = function () {
                            return this._referredMetaClassIndex;
                        };
                        MetaRelation.prototype.oppositeName = function () {
                            return this._op_name;
                        };
                        MetaRelation.prototype.originMetaClassIndex = function () {
                            return this._originMetaClassIndex;
                        };
                        MetaRelation.prototype.index = function () {
                            return this._index;
                        };
                        MetaRelation.prototype.metaName = function () {
                            return this._name;
                        };
                        MetaRelation.prototype.metaType = function () {
                            return org.kevoree.modeling.meta.MetaType.RELATION;
                        };
                        MetaRelation.prototype.visible = function () {
                            return this._visible;
                        };
                        MetaRelation.prototype.maxBound = function () {
                            return this._maxBound;
                        };
                        MetaRelation.prototype.setMaxBound = function (p_maxBound) {
                            this._maxBound = p_maxBound;
                        };
                        return MetaRelation;
                    })();
                    impl.MetaRelation = MetaRelation;
                })(impl = meta.impl || (meta.impl = {}));
            })(meta = modeling.meta || (modeling.meta = {}));
            var operation;
            (function (operation_1) {
                var OperationStrategies = (function () {
                    function OperationStrategies() {
                    }
                    OperationStrategies.serialize = function (type, elem, isArray) {
                        if (isArray) {
                            var elements = elem;
                            var builder = new java.lang.StringBuilder();
                            for (var i = 0; i < elements.length; i++) {
                                if (i != 0) {
                                    builder.append(org.kevoree.modeling.KConfig.KEY_SEP);
                                }
                                builder.append(org.kevoree.modeling.operation.OperationStrategies.serialize(type, elements[i], false));
                            }
                            return builder.toString();
                        }
                        else {
                            switch (type) {
                                case org.kevoree.modeling.meta.KPrimitiveTypes.BOOL_ID:
                                    if (elem) {
                                        return "1";
                                    }
                                    else {
                                        return "0";
                                    }
                                case org.kevoree.modeling.meta.KPrimitiveTypes.STRING_ID:
                                    return org.kevoree.modeling.format.json.JsonString.encode(elem.toString());
                                case org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE_ID:
                                    return org.kevoree.modeling.util.Base64.encodeDouble(elem);
                                case org.kevoree.modeling.meta.KPrimitiveTypes.INT_ID:
                                    return org.kevoree.modeling.util.Base64.encodeInt(elem);
                                case org.kevoree.modeling.meta.KPrimitiveTypes.LONG_ID:
                                    return org.kevoree.modeling.util.Base64.encodeLong(elem);
                                default:
                                    return org.kevoree.modeling.util.Base64.encodeInt(elem.index());
                            }
                        }
                    };
                    OperationStrategies.serializeParam = function (metaOperation, param) {
                        var paramTypes = metaOperation.paramTypes();
                        var paramIsArray = metaOperation.paramMultiplicities();
                        var stringParams = new Array();
                        for (var i = 0; i < paramTypes.length; i++) {
                            stringParams[i] = org.kevoree.modeling.operation.OperationStrategies.serialize(paramTypes[i], param[i], paramIsArray[i]);
                        }
                        return stringParams;
                    };
                    OperationStrategies.serializeReturn = function (metaOperation, result) {
                        return org.kevoree.modeling.operation.OperationStrategies.serialize(metaOperation.returnType(), result, metaOperation.returnTypeIsArray());
                    };
                    OperationStrategies.unserialize = function (metaModel, type, payload, isArray) {
                        if (isArray) {
                            var params = new java.util.ArrayList();
                            var i = 0;
                            var previous = 0;
                            while (i < payload.length) {
                                if (payload.charAt(i) == org.kevoree.modeling.KConfig.KEY_SEP) {
                                    if (i != previous) {
                                        params.add(payload.substring(previous, i));
                                    }
                                    previous = i + 1;
                                }
                                i++;
                            }
                            if (i != previous) {
                                params.add(payload.substring(previous, i));
                            }
                            var result;
                            switch (type) {
                                case org.kevoree.modeling.meta.KPrimitiveTypes.BOOL_ID:
                                    result = new Array();
                                    break;
                                case org.kevoree.modeling.meta.KPrimitiveTypes.STRING_ID:
                                    result = new Array();
                                    break;
                                case org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE_ID:
                                    result = new Array();
                                    break;
                                case org.kevoree.modeling.meta.KPrimitiveTypes.INT_ID:
                                    result = new Array();
                                    break;
                                case org.kevoree.modeling.meta.KPrimitiveTypes.LONG_ID:
                                    result = new Array();
                                    break;
                                default:
                                    result = new Array();
                            }
                            for (var j = 0; j < params.size(); j++) {
                                result[j] = org.kevoree.modeling.operation.OperationStrategies.unserialize(metaModel, type, params.get(j), false);
                            }
                            return result;
                        }
                        else {
                            switch (type) {
                                case org.kevoree.modeling.meta.KPrimitiveTypes.BOOL_ID:
                                    return org.kevoree.modeling.util.PrimitiveHelper.equals(payload, "1");
                                case org.kevoree.modeling.meta.KPrimitiveTypes.STRING_ID:
                                    return org.kevoree.modeling.format.json.JsonString.unescape(payload);
                                case org.kevoree.modeling.meta.KPrimitiveTypes.DOUBLE_ID:
                                    return org.kevoree.modeling.util.Base64.decodeToDouble(payload);
                                case org.kevoree.modeling.meta.KPrimitiveTypes.INT_ID:
                                    return org.kevoree.modeling.util.Base64.decodeToInt(payload);
                                case org.kevoree.modeling.meta.KPrimitiveTypes.LONG_ID:
                                    return org.kevoree.modeling.util.Base64.decodeToLong(payload);
                                default:
                                    var literalIndex = org.kevoree.modeling.util.Base64.decodeToInt(payload);
                                    return metaModel.metaTypes()[type].literal(literalIndex);
                            }
                        }
                    };
                    OperationStrategies.unserializeReturn = function (metaModel, metaOperation, resultString) {
                        if (resultString != null) {
                            return org.kevoree.modeling.operation.OperationStrategies.unserialize(metaModel, metaOperation.returnType(), resultString, metaOperation.returnTypeIsArray());
                        }
                        else {
                            return null;
                        }
                    };
                    OperationStrategies.unserializeParam = function (metaModel, metaOperation, param) {
                        var paramTypes = metaOperation.paramTypes();
                        var paramMultiplicities = metaOperation.paramMultiplicities();
                        var objParam = new Array();
                        for (var i = 0; i < paramTypes.length; i++) {
                            objParam[i] = org.kevoree.modeling.operation.OperationStrategies.unserialize(metaModel, paramTypes[i], param[i], paramMultiplicities[i]);
                        }
                        return objParam;
                    };
                    OperationStrategies.NAMED_PEER = function (peerName) {
                        return function (cdn, metaOperation, source, param, manager, callback, additionalClassNames) {
                            var operationCall = new org.kevoree.modeling.message.impl.Message();
                            operationCall.setType(org.kevoree.modeling.message.impl.Message.OPERATION_CALL_TYPE);
                            operationCall.setKeys(new Float64Array([source.universe(), source.now(), source.uuid()]));
                            operationCall.setClassName(source.metaClass().metaName());
                            operationCall.setOperationName(metaOperation.metaName());
                            operationCall.setValues(org.kevoree.modeling.operation.OperationStrategies.serializeParam(metaOperation, param));
                            operationCall.setValues2(additionalClassNames);
                            cdn.sendToPeer(peerName, operationCall, function (message) {
                                if (message.values() != null) {
                                    callback(org.kevoree.modeling.operation.OperationStrategies.unserializeReturn(source.manager().model().metaModel(), metaOperation, message.values()[0]));
                                }
                                else {
                                    callback(org.kevoree.modeling.operation.OperationStrategies.unserializeReturn(source.manager().model().metaModel(), metaOperation, null));
                                }
                            });
                        };
                    };
                    OperationStrategies.ONLY_ONE = function (cdn, metaOperation, source, param, manager, callback, additionalClassNames) {
                        var operationCall = new org.kevoree.modeling.message.impl.Message();
                        operationCall.setType(org.kevoree.modeling.message.impl.Message.OPERATION_CALL_TYPE);
                        operationCall.setKeys(new Float64Array([source.universe(), source.now(), source.uuid()]));
                        operationCall.setClassName(source.metaClass().metaName());
                        operationCall.setOperationName(metaOperation.metaName());
                        operationCall.setValues(org.kevoree.modeling.operation.OperationStrategies.serializeParam(metaOperation, param));
                        operationCall.setValues2(additionalClassNames);
                        cdn.sendToPeer(null, operationCall, function (message) {
                            if (message.values() != null) {
                                callback(org.kevoree.modeling.operation.OperationStrategies.unserializeReturn(source.manager().model().metaModel(), metaOperation, message.values()[0]));
                            }
                            else {
                                callback(org.kevoree.modeling.operation.OperationStrategies.unserializeReturn(source.manager().model().metaModel(), metaOperation, null));
                            }
                        });
                    };
                    return OperationStrategies;
                })();
                operation_1.OperationStrategies = OperationStrategies;
                var impl;
                (function (impl) {
                    var HashOperationManager = (function () {
                        function HashOperationManager(p_manager) {
                            this.staticOperations = new org.kevoree.modeling.memory.chunk.impl.ArrayIntMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                            this._manager = p_manager;
                        }
                        HashOperationManager.prototype.register = function (operation, callback) {
                            var clazzOperations = this.staticOperations.get(operation.originMetaClassIndex());
                            if (clazzOperations == null) {
                                clazzOperations = new org.kevoree.modeling.memory.chunk.impl.ArrayIntMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                this.staticOperations.put(operation.originMetaClassIndex(), clazzOperations);
                            }
                            clazzOperations.put(operation.index(), callback);
                        };
                        HashOperationManager.prototype.invoke = function (source, operation, param, strategy, callback) {
                            if (operation == null) {
                                throw new Error("Operation must be defined to invoke an operation");
                            }
                            var paramTypes = operation.paramTypes();
                            if (paramTypes.length != 0) {
                                if (paramTypes.length != param.length) {
                                    throw new Error("Bad Number of arguments for method " + operation.metaName());
                                }
                            }
                            var clazzOperations = this.staticOperations.get(operation.originMetaClassIndex());
                            var resolved = null;
                            if (clazzOperations != null) {
                                resolved = clazzOperations.get(operation.index());
                            }
                            if (resolved != null) {
                                resolved(source, param, callback);
                            }
                            else {
                                var mc = source.metaClass();
                                var mm = source.manager().model().metaModel();
                                var parentClasses = null;
                                parentClasses = new java.util.ArrayList();
                                while (resolved == null && mc != null && mc.metaParents().length > 0) {
                                    var metaParents = mc.metaParents();
                                    var foundParent = -1;
                                    var i = 0;
                                    var loopMetaClass = null;
                                    var loopMetaOperation = null;
                                    while (i < metaParents.length && foundParent == -1) {
                                        loopMetaClass = mm.metaClass(metaParents[i]);
                                        loopMetaOperation = loopMetaClass.operation(operation.metaName());
                                        if (loopMetaOperation != null) {
                                            foundParent = i;
                                        }
                                        i++;
                                    }
                                    if (foundParent == -1) {
                                        mc = null;
                                    }
                                    else {
                                        parentClasses.add(loopMetaClass.metaName());
                                        mc = loopMetaClass;
                                        clazzOperations = this.staticOperations.get(loopMetaOperation.originMetaClassIndex());
                                        resolved = clazzOperations.get(loopMetaOperation.index());
                                    }
                                }
                                if (resolved != null) {
                                    resolved(source, param, callback);
                                }
                                else {
                                    var flatted = parentClasses.toArray(new Array());
                                    strategy(this._manager.cdn(), operation, source, param, this, callback, flatted);
                                }
                            }
                        };
                        HashOperationManager.prototype.dispatch = function (message) {
                            var _this = this;
                            if (message.type() == org.kevoree.modeling.message.impl.Message.OPERATION_CALL_TYPE) {
                                var sourceKey = message.keys();
                                var mc = this._manager.model().metaModel().metaClassByName(message.className());
                                var mo = mc.operation(message.operationName());
                                var clazzOperations = this.staticOperations.get(mc.index());
                                var resolved = null;
                                if (clazzOperations != null) {
                                    resolved = clazzOperations.get(mo.index());
                                }
                                if (resolved != null) {
                                    var finalResolved = resolved;
                                    this._manager.lookup(sourceKey[0], sourceKey[1], sourceKey[2], function (kObject) {
                                        if (kObject != null) {
                                            finalResolved(kObject, org.kevoree.modeling.operation.OperationStrategies.unserializeParam(_this._manager.model().metaModel(), mo, message.values()), function (operationResult) {
                                                if (message.id() != null) {
                                                    var operationResultMessage = new org.kevoree.modeling.message.impl.Message();
                                                    operationResultMessage.setPeer(message.peer());
                                                    operationResultMessage.setID(message.id());
                                                    operationResultMessage.setType(org.kevoree.modeling.message.impl.Message.OPERATION_RESULT_TYPE);
                                                    operationResultMessage.setValues([org.kevoree.modeling.operation.OperationStrategies.serializeReturn(mo, operationResult)]);
                                                    _this._manager.cdn().sendToPeer(message.peer(), operationResultMessage, null);
                                                }
                                            });
                                        }
                                        else {
                                            if (message.id() != null) {
                                                var operationResultMessage = new org.kevoree.modeling.message.impl.Message();
                                                operationResultMessage.setID(message.id());
                                                operationResultMessage.setPeer(message.peer());
                                                operationResultMessage.setType(org.kevoree.modeling.message.impl.Message.OPERATION_RESULT_TYPE);
                                                operationResultMessage.setValues(null);
                                                _this._manager.cdn().sendToPeer(message.peer(), operationResultMessage, null);
                                            }
                                        }
                                    });
                                }
                                else {
                                    if (message.id() != null) {
                                        var operationResultMessage = new org.kevoree.modeling.message.impl.Message();
                                        operationResultMessage.setID(message.id());
                                        operationResultMessage.setPeer(message.peer());
                                        operationResultMessage.setType(org.kevoree.modeling.message.impl.Message.OPERATION_RESULT_TYPE);
                                        operationResultMessage.setValues(null);
                                        this._manager.cdn().sendToPeer(message.peer(), operationResultMessage, null);
                                    }
                                }
                            }
                        };
                        HashOperationManager.prototype.mappings = function () {
                            var _this = this;
                            var mappings = new java.util.ArrayList();
                            this.staticOperations.each(function (key, value) {
                                if (value != null) {
                                    var metaClass = _this._manager.model().metaModel().metaClass(key);
                                    var metaClassName = metaClass.metaName();
                                    value.each(function (key, value) {
                                        var metaOperation = metaClass.meta(key);
                                        mappings.add(metaClassName);
                                        mappings.add(metaOperation.metaName());
                                    });
                                }
                            });
                            return mappings.toArray(new Array());
                        };
                        return HashOperationManager;
                    })();
                    impl.HashOperationManager = HashOperationManager;
                })(impl = operation_1.impl || (operation_1.impl = {}));
            })(operation = modeling.operation || (modeling.operation = {}));
            var scheduler;
            (function (scheduler) {
                var impl;
                (function (impl) {
                    var AsyncScheduler = (function () {
                        function AsyncScheduler() {
                            this.dispatch = function (task) {
                                setTimeout(task, 0);
                            };
                            this.start = function () {
                                //NNOP
                            };
                            this.stop = function () {
                                //NOOP
                            };
                            this.run = function () {
                                //NOOP
                            };
                        }
                        return AsyncScheduler;
                    })();
                    impl.AsyncScheduler = AsyncScheduler;
                    var DirectScheduler = (function () {
                        function DirectScheduler() {
                        }
                        DirectScheduler.prototype.dispatch = function (task) {
                            task();
                        };
                        DirectScheduler.prototype.start = function () {
                        };
                        DirectScheduler.prototype.stop = function () {
                        };
                        return DirectScheduler;
                    })();
                    impl.DirectScheduler = DirectScheduler;
                })(impl = scheduler.impl || (scheduler.impl = {}));
            })(scheduler = modeling.scheduler || (modeling.scheduler = {}));
            var traversal;
            (function (traversal_1) {
                var impl;
                (function (impl) {
                    var Traversal = (function () {
                        function Traversal(p_roots) {
                            this._terminated = false;
                            this._initObjs = p_roots;
                        }
                        Traversal.prototype.internal_chain_action = function (p_action) {
                            if (this._terminated) {
                                throw new Error(Traversal.TERMINATED_MESSAGE);
                            }
                            if (this._initAction == null) {
                                this._initAction = p_action;
                            }
                            if (this._lastAction != null) {
                                this._lastAction.chain(p_action);
                            }
                            this._lastAction = p_action;
                            return this;
                        };
                        Traversal.prototype.traverse = function (p_metaReference) {
                            return this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.TraverseAction(p_metaReference));
                        };
                        Traversal.prototype.traverseQuery = function (p_metaReferenceQuery) {
                            return this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.TraverseQueryAction(p_metaReferenceQuery));
                        };
                        Traversal.prototype.withAttribute = function (p_attribute, p_expectedValue) {
                            return this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.FilterAttributeAction(p_attribute, p_expectedValue));
                        };
                        Traversal.prototype.withoutAttribute = function (p_attribute, p_expectedValue) {
                            return this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.FilterNotAttributeAction(p_attribute, p_expectedValue));
                        };
                        Traversal.prototype.attributeQuery = function (p_attributeQuery) {
                            return this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.FilterAttributeQueryAction(p_attributeQuery));
                        };
                        Traversal.prototype.filter = function (p_filter) {
                            return this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.FilterAction(p_filter));
                        };
                        Traversal.prototype.collect = function (metaReference, continueCondition) {
                            return this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.DeepCollectAction(metaReference, continueCondition));
                        };
                        Traversal.prototype.traverseIndex = function (p_indexName) {
                            return this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.TraverseIndexAction(p_indexName));
                        };
                        Traversal.prototype.traverseTime = function (timeOffset, steps, continueCondition) {
                            throw new Error("Not Implemented Yet!");
                        };
                        Traversal.prototype.traverseUniverse = function (universeOffset, continueCondition) {
                            throw new Error("Not Implemented Yet!");
                        };
                        Traversal.prototype.then = function (cb) {
                            if (this._initObjs != null) {
                                this._initAction.execute(new org.kevoree.modeling.traversal.impl.TraversalContext(this._initObjs, null, function (objects) {
                                    cb(objects);
                                }));
                            }
                        };
                        Traversal.prototype.eval = function (p_expression, callback) {
                            this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.MathExpressionAction(p_expression));
                            this._terminated = true;
                            if (this._initObjs != null) {
                                this._initAction.execute(new org.kevoree.modeling.traversal.impl.TraversalContext(this._initObjs, null, callback));
                            }
                        };
                        Traversal.prototype.map = function (attribute, cb) {
                            this.internal_chain_action(new org.kevoree.modeling.traversal.impl.actions.MapAction(attribute));
                            this._terminated = true;
                            if (this._initObjs != null) {
                                this._initAction.execute(new org.kevoree.modeling.traversal.impl.TraversalContext(this._initObjs, null, cb));
                            }
                        };
                        Traversal.prototype.exec = function (origins, resolver, callback) {
                            if (this._initObjs == null) {
                                this._initAction.execute(new org.kevoree.modeling.traversal.impl.TraversalContext(origins, resolver, callback));
                            }
                        };
                        Traversal.TERMINATED_MESSAGE = "Traversal is terminated by the call of done method, please create another promise";
                        return Traversal;
                    })();
                    impl.Traversal = Traversal;
                    var TraversalContext = (function () {
                        function TraversalContext(_inputs, _resolver, p_finalCallback) {
                            this._inputs = _inputs;
                            this._resolver = _resolver;
                            this._finalCallback = p_finalCallback;
                        }
                        TraversalContext.prototype.inputObjects = function () {
                            return this._inputs;
                        };
                        TraversalContext.prototype.setInputObjects = function (p_newSet) {
                            this._inputs = p_newSet;
                        };
                        TraversalContext.prototype.indexResolver = function () {
                            return this._resolver;
                        };
                        TraversalContext.prototype.finalCallback = function () {
                            return this._finalCallback;
                        };
                        return TraversalContext;
                    })();
                    impl.TraversalContext = TraversalContext;
                    var actions;
                    (function (actions) {
                        var DeepCollectAction = (function () {
                            function DeepCollectAction(p_reference, p_continueCondition) {
                                this._alreadyPassed = null;
                                this._finalElements = null;
                                this._reference = p_reference;
                                this._continueCondition = p_continueCondition;
                            }
                            DeepCollectAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            DeepCollectAction.prototype.execute = function (context) {
                                var _this = this;
                                if (context.inputObjects() == null || context.inputObjects().length == 0) {
                                    if (this._next != null) {
                                        this._next.execute(context);
                                    }
                                    else {
                                        context.finalCallback()(context.inputObjects());
                                    }
                                }
                                else {
                                    this._alreadyPassed = new org.kevoree.modeling.memory.chunk.impl.ArrayLongMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                    this._finalElements = new org.kevoree.modeling.memory.chunk.impl.ArrayLongMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                    var filtered_inputs = new Array();
                                    for (var i = 0; i < context.inputObjects().length; i++) {
                                        if (this._continueCondition == null || this._continueCondition(context.inputObjects()[i])) {
                                            filtered_inputs[i] = context.inputObjects()[i];
                                            this._alreadyPassed.put(context.inputObjects()[i].uuid(), context.inputObjects()[i]);
                                        }
                                    }
                                    var iterationCallbacks = new Array();
                                    iterationCallbacks[0] = function (traversed) {
                                        var filtered_inputs2 = new Array();
                                        var nbSize = 0;
                                        for (var i = 0; i < traversed.length; i++) {
                                            if ((_this._continueCondition == null || _this._continueCondition(traversed[i])) && !_this._alreadyPassed.contains(traversed[i].uuid())) {
                                                filtered_inputs2[i] = traversed[i];
                                                _this._alreadyPassed.put(traversed[i].uuid(), traversed[i]);
                                                _this._finalElements.put(traversed[i].uuid(), traversed[i]);
                                                nbSize++;
                                            }
                                        }
                                        if (nbSize > 0) {
                                            _this.executeStep(filtered_inputs2, iterationCallbacks[0]);
                                        }
                                        else {
                                            var trimmed = new Array();
                                            var nbInserted = new Int32Array([0]);
                                            _this._finalElements.each(function (key, value) {
                                                trimmed[nbInserted[0]] = value;
                                                nbInserted[0]++;
                                            });
                                            if (_this._next == null) {
                                                context.finalCallback()(trimmed);
                                            }
                                            else {
                                                context.setInputObjects(trimmed);
                                                _this._next.execute(context);
                                            }
                                        }
                                    };
                                    this.executeStep(filtered_inputs, iterationCallbacks[0]);
                                }
                            };
                            DeepCollectAction.prototype.executeStep = function (p_inputStep, private_callback) {
                                var currentObject = null;
                                var nextIds = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                                for (var i = 0; i < p_inputStep.length; i++) {
                                    if (p_inputStep[i] != null) {
                                        try {
                                            var loopObj = p_inputStep[i];
                                            currentObject = loopObj;
                                            var raw = loopObj._manager.closestChunk(loopObj.universe(), loopObj.now(), loopObj.uuid(), loopObj.metaClass(), loopObj.previousResolved());
                                            if (raw != null) {
                                                if (this._reference == null) {
                                                    var metaElements = loopObj.metaClass().metaElements();
                                                    for (var j = 0; j < metaElements.length; j++) {
                                                        if (metaElements[j] != null && metaElements[j].metaType() == org.kevoree.modeling.meta.MetaType.RELATION) {
                                                            var resolved = raw.getLongArray(metaElements[j].index(), loopObj.metaClass());
                                                            if (resolved != null) {
                                                                for (var k = 0; k < resolved.length; k++) {
                                                                    nextIds.put(resolved[k], resolved[k]);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    var translatedRef = loopObj.internal_transpose_ref(this._reference);
                                                    if (translatedRef != null) {
                                                        var resolved = raw.getLongArray(translatedRef.index(), loopObj.metaClass());
                                                        if (resolved != null) {
                                                            for (var j = 0; j < resolved.length; j++) {
                                                                nextIds.put(resolved[j], resolved[j]);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        catch ($ex$) {
                                            if ($ex$ instanceof Error) {
                                                var e = $ex$;
                                                console.error(e['stack']);
                                                ;
                                            }
                                            else {
                                                throw $ex$;
                                            }
                                        }
                                    }
                                }
                                var trimmed = new Float64Array(nextIds.size());
                                var inserted = new Int32Array([0]);
                                nextIds.each(function (key, value) {
                                    trimmed[inserted[0]] = key;
                                    inserted[0]++;
                                });
                                currentObject._manager.lookupAllObjects(currentObject.universe(), currentObject.now(), trimmed, function (kObjects) {
                                    private_callback(kObjects);
                                });
                            };
                            return DeepCollectAction;
                        })();
                        actions.DeepCollectAction = DeepCollectAction;
                        var FilterAction = (function () {
                            function FilterAction(p_filter) {
                                this._filter = p_filter;
                            }
                            FilterAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            FilterAction.prototype.execute = function (context) {
                                var selectedIndex = new Array();
                                var selected = 0;
                                for (var i = 0; i < context.inputObjects().length; i++) {
                                    try {
                                        if (this._filter(context.inputObjects()[i])) {
                                            selectedIndex[i] = true;
                                            selected++;
                                        }
                                    }
                                    catch ($ex$) {
                                        if ($ex$ instanceof Error) {
                                            var e = $ex$;
                                            console.error(e['stack']);
                                            ;
                                        }
                                        else {
                                            throw $ex$;
                                        }
                                    }
                                }
                                var nextStepElement = new Array();
                                var inserted = 0;
                                for (var i = 0; i < context.inputObjects().length; i++) {
                                    if (selectedIndex[i]) {
                                        nextStepElement[inserted] = context.inputObjects()[i];
                                        inserted++;
                                    }
                                }
                                if (this._next == null) {
                                    context.finalCallback()(nextStepElement);
                                }
                                else {
                                    context.setInputObjects(nextStepElement);
                                    this._next.execute(context);
                                }
                            };
                            return FilterAction;
                        })();
                        actions.FilterAction = FilterAction;
                        var FilterAttributeAction = (function () {
                            function FilterAttributeAction(p_attribute, p_expectedValue) {
                                this._attribute = p_attribute;
                                this._expectedValue = p_expectedValue;
                            }
                            FilterAttributeAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            FilterAttributeAction.prototype.execute = function (context) {
                                if (context.inputObjects() == null || context.inputObjects().length == 0) {
                                    if (this._next != null) {
                                        this._next.execute(context);
                                    }
                                    else {
                                        context.finalCallback()(context.inputObjects());
                                    }
                                }
                                else {
                                    var selectedIndexes = new Array();
                                    var nbSelected = 0;
                                    for (var i = 0; i < context.inputObjects().length; i++) {
                                        try {
                                            var loopObj = context.inputObjects()[i];
                                            var raw = (loopObj)._manager.closestChunk(loopObj.universe(), loopObj.now(), loopObj.uuid(), loopObj.metaClass(), loopObj.previousResolved());
                                            if (raw != null) {
                                                if (this._attribute == null) {
                                                    if (this._expectedValue == null) {
                                                        selectedIndexes[i] = true;
                                                        nbSelected++;
                                                    }
                                                    else {
                                                        var addToNext = false;
                                                        var metaElements = loopObj.metaClass().metaElements();
                                                        for (var j = 0; j < metaElements.length; j++) {
                                                            if (metaElements[j] instanceof org.kevoree.modeling.meta.impl.MetaAttribute) {
                                                                var resolved = raw.getPrimitiveType(metaElements[j].index(), loopObj.metaClass());
                                                                if (resolved == null) {
                                                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(this._expectedValue.toString(), "*")) {
                                                                        addToNext = true;
                                                                    }
                                                                }
                                                                else {
                                                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(resolved.toString(), this._expectedValue.toString())) {
                                                                        addToNext = true;
                                                                    }
                                                                    else {
                                                                        if (org.kevoree.modeling.util.PrimitiveHelper.matches(resolved.toString(), this._expectedValue.toString().replace("*", ".*"))) {
                                                                            addToNext = true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (addToNext) {
                                                            selectedIndexes[i] = true;
                                                            nbSelected++;
                                                        }
                                                    }
                                                }
                                                else {
                                                    var translatedAtt = loopObj.internal_transpose_att(this._attribute);
                                                    if (translatedAtt != null) {
                                                        var resolved = raw.getPrimitiveType(translatedAtt.index(), loopObj.metaClass());
                                                        if (this._expectedValue == null) {
                                                            if (resolved == null) {
                                                                selectedIndexes[i] = true;
                                                                nbSelected++;
                                                            }
                                                        }
                                                        else {
                                                            if (resolved == null) {
                                                                if (org.kevoree.modeling.util.PrimitiveHelper.equals(this._expectedValue.toString(), "*")) {
                                                                    selectedIndexes[i] = true;
                                                                    nbSelected++;
                                                                }
                                                            }
                                                            else {
                                                                if (org.kevoree.modeling.util.PrimitiveHelper.equals(resolved.toString(), this._expectedValue.toString())) {
                                                                    selectedIndexes[i] = true;
                                                                    nbSelected++;
                                                                }
                                                                else {
                                                                    if (org.kevoree.modeling.util.PrimitiveHelper.matches(resolved.toString(), this._expectedValue.toString().replace("*", ".*"))) {
                                                                        selectedIndexes[i] = true;
                                                                        nbSelected++;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                console.error("WARN: Empty KObject " + loopObj.uuid());
                                                ;
                                            }
                                        }
                                        catch ($ex$) {
                                            if ($ex$ instanceof Error) {
                                                var e = $ex$;
                                                console.error(e['stack']);
                                                ;
                                            }
                                            else {
                                                throw $ex$;
                                            }
                                        }
                                    }
                                    var nextStepElement = new Array();
                                    var inserted = 0;
                                    for (var i = 0; i < context.inputObjects().length; i++) {
                                        if (selectedIndexes[i]) {
                                            nextStepElement[inserted] = context.inputObjects()[i];
                                            inserted++;
                                        }
                                    }
                                    if (this._next == null) {
                                        context.finalCallback()(nextStepElement);
                                    }
                                    else {
                                        context.setInputObjects(nextStepElement);
                                        this._next.execute(context);
                                    }
                                }
                            };
                            return FilterAttributeAction;
                        })();
                        actions.FilterAttributeAction = FilterAttributeAction;
                        var FilterAttributeQueryAction = (function () {
                            function FilterAttributeQueryAction(p_attributeQuery) {
                                this._attributeQuery = p_attributeQuery;
                            }
                            FilterAttributeQueryAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            FilterAttributeQueryAction.prototype.execute = function (context) {
                                if (context.inputObjects() == null || context.inputObjects().length == 0) {
                                    if (this._next != null) {
                                        this._next.execute(context);
                                    }
                                    else {
                                        context.finalCallback()(context.inputObjects());
                                    }
                                }
                                else {
                                    var selectedIndexes = new Array();
                                    var nbSelected = 0;
                                    for (var i = 0; i < context.inputObjects().length; i++) {
                                        try {
                                            var loopObj = context.inputObjects()[i];
                                            if (this._attributeQuery == null) {
                                                selectedIndexes[i] = true;
                                                nbSelected++;
                                            }
                                            else {
                                                var metaElements = loopObj.metaClass().metaElements();
                                                var params = this.buildParams(this._attributeQuery);
                                                var selectedForNext = [true];
                                                params.each(function (key, param) {
                                                    for (var j = 0; j < metaElements.length; j++) {
                                                        if (metaElements[j] instanceof org.kevoree.modeling.meta.impl.MetaAttribute) {
                                                            var metaAttribute = metaElements[j];
                                                            if (org.kevoree.modeling.util.PrimitiveHelper.matches(metaAttribute.metaName(), "^" + param.name() + "$")) {
                                                                var o_raw = loopObj.get(metaAttribute);
                                                                if (o_raw != null) {
                                                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(param.value(), "null")) {
                                                                        if (!param.isNegative()) {
                                                                            selectedForNext[0] = false;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if (org.kevoree.modeling.util.PrimitiveHelper.matches(o_raw.toString(), "^" + param.value() + "$")) {
                                                                            if (param.isNegative()) {
                                                                                selectedForNext[0] = false;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if (!param.isNegative()) {
                                                                                selectedForNext[0] = false;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else {
                                                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(param.value(), "null") || org.kevoree.modeling.util.PrimitiveHelper.equals(param.value(), "*")) {
                                                                        if (param.isNegative()) {
                                                                            selectedForNext[0] = false;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                });
                                                if (selectedForNext[0]) {
                                                    selectedIndexes[i] = true;
                                                    nbSelected++;
                                                }
                                            }
                                        }
                                        catch ($ex$) {
                                            if ($ex$ instanceof Error) {
                                                var e = $ex$;
                                                console.error(e['stack']);
                                                ;
                                            }
                                            else {
                                                throw $ex$;
                                            }
                                        }
                                    }
                                    var nextStepElement = new Array();
                                    var inserted = 0;
                                    for (var i = 0; i < context.inputObjects().length; i++) {
                                        if (selectedIndexes[i]) {
                                            nextStepElement[inserted] = context.inputObjects()[i];
                                            inserted++;
                                        }
                                    }
                                    if (this._next == null) {
                                        context.finalCallback()(nextStepElement);
                                    }
                                    else {
                                        context.setInputObjects(nextStepElement);
                                        this._next.execute(context);
                                    }
                                }
                            };
                            FilterAttributeQueryAction.prototype.buildParams = function (p_paramString) {
                                var params = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                var iParam = 0;
                                var lastStart = iParam;
                                while (iParam < p_paramString.length) {
                                    if (p_paramString.charAt(iParam) == ',') {
                                        var p = p_paramString.substring(lastStart, iParam).trim();
                                        if (!org.kevoree.modeling.util.PrimitiveHelper.equals(p, "") && !org.kevoree.modeling.util.PrimitiveHelper.equals(p, "*")) {
                                            if (org.kevoree.modeling.util.PrimitiveHelper.endsWith(p, "=")) {
                                                p = p + "*";
                                            }
                                            var pArray = p.split("=");
                                            var pObject;
                                            if (pArray.length > 1) {
                                                var paramKey = pArray[0].trim();
                                                var negative = org.kevoree.modeling.util.PrimitiveHelper.endsWith(paramKey, "!");
                                                pObject = new org.kevoree.modeling.traversal.impl.actions.FilterAttributeQueryAction.QueryParam(paramKey.replace("!", "").replace("*", ".*"), pArray[1].trim().replace("*", ".*"), negative);
                                                params.put(pObject.name(), pObject);
                                            }
                                        }
                                        lastStart = iParam + 1;
                                    }
                                    iParam = iParam + 1;
                                }
                                var lastParam = p_paramString.substring(lastStart, iParam).trim();
                                if (!org.kevoree.modeling.util.PrimitiveHelper.equals(lastParam, "") && !org.kevoree.modeling.util.PrimitiveHelper.equals(lastParam, "*")) {
                                    if (org.kevoree.modeling.util.PrimitiveHelper.endsWith(lastParam, "=")) {
                                        lastParam = lastParam + "*";
                                    }
                                    var pArray = lastParam.split("=");
                                    var pObject;
                                    if (pArray.length > 1) {
                                        var paramKey = pArray[0].trim();
                                        var negative = org.kevoree.modeling.util.PrimitiveHelper.endsWith(paramKey, "!");
                                        pObject = new org.kevoree.modeling.traversal.impl.actions.FilterAttributeQueryAction.QueryParam(paramKey.replace("!", "").replace("*", ".*"), pArray[1].trim().replace("*", ".*"), negative);
                                        params.put(pObject.name(), pObject);
                                    }
                                }
                                return params;
                            };
                            return FilterAttributeQueryAction;
                        })();
                        actions.FilterAttributeQueryAction = FilterAttributeQueryAction;
                        var FilterAttributeQueryAction;
                        (function (FilterAttributeQueryAction) {
                            var QueryParam = (function () {
                                function QueryParam(p_name, p_value, p_negative) {
                                    this._name = p_name;
                                    this._value = p_value;
                                    this._negative = p_negative;
                                }
                                QueryParam.prototype.name = function () {
                                    return this._name;
                                };
                                QueryParam.prototype.value = function () {
                                    return this._value;
                                };
                                QueryParam.prototype.isNegative = function () {
                                    return this._negative;
                                };
                                return QueryParam;
                            })();
                            FilterAttributeQueryAction.QueryParam = QueryParam;
                        })(FilterAttributeQueryAction = actions.FilterAttributeQueryAction || (actions.FilterAttributeQueryAction = {}));
                        var FilterNotAttributeAction = (function () {
                            function FilterNotAttributeAction(p_attribute, p_expectedValue) {
                                this._attribute = p_attribute;
                                this._expectedValue = p_expectedValue;
                            }
                            FilterNotAttributeAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            FilterNotAttributeAction.prototype.execute = function (context) {
                                if (context.inputObjects() == null || context.inputObjects().length == 0) {
                                    if (this._next != null) {
                                        this._next.execute(context);
                                    }
                                    else {
                                        context.finalCallback()(context.inputObjects());
                                    }
                                }
                                else {
                                    var selectedIndexes = new Array();
                                    var nbSelected = 0;
                                    for (var i = 0; i < context.inputObjects().length; i++) {
                                        try {
                                            var loopObj = context.inputObjects()[i];
                                            var raw = loopObj._manager.closestChunk(loopObj.universe(), loopObj.now(), loopObj.uuid(), loopObj.metaClass(), loopObj.previousResolved());
                                            if (raw != null) {
                                                if (this._attribute == null) {
                                                    if (this._expectedValue == null) {
                                                        selectedIndexes[i] = true;
                                                        nbSelected++;
                                                    }
                                                    else {
                                                        var addToNext = true;
                                                        var metaElements = loopObj.metaClass().metaElements();
                                                        for (var j = 0; j < metaElements.length; j++) {
                                                            if (metaElements[j] instanceof org.kevoree.modeling.meta.impl.MetaAttribute) {
                                                                var ref = metaElements[j];
                                                                var resolved = raw.getPrimitiveType(ref.index(), loopObj.metaClass());
                                                                if (resolved == null) {
                                                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(this._expectedValue.toString(), "*")) {
                                                                        addToNext = false;
                                                                    }
                                                                }
                                                                else {
                                                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(resolved.toString(), this._expectedValue.toString())) {
                                                                        addToNext = false;
                                                                    }
                                                                    else {
                                                                        if (org.kevoree.modeling.util.PrimitiveHelper.matches(resolved.toString(), this._expectedValue.toString().replace("*", ".*"))) {
                                                                            addToNext = false;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (addToNext) {
                                                            selectedIndexes[i] = true;
                                                            nbSelected++;
                                                        }
                                                    }
                                                }
                                                else {
                                                    var translatedAtt = loopObj.internal_transpose_att(this._attribute);
                                                    if (translatedAtt != null) {
                                                        var resolved = raw.getPrimitiveType(translatedAtt.index(), loopObj.metaClass());
                                                        if (this._expectedValue == null) {
                                                            if (resolved != null) {
                                                                selectedIndexes[i] = true;
                                                                nbSelected++;
                                                            }
                                                        }
                                                        else {
                                                            if (resolved == null) {
                                                                if (!org.kevoree.modeling.util.PrimitiveHelper.equals(this._expectedValue.toString(), "*")) {
                                                                    selectedIndexes[i] = true;
                                                                    nbSelected++;
                                                                }
                                                            }
                                                            else {
                                                                if (org.kevoree.modeling.util.PrimitiveHelper.equals(resolved.toString(), this._expectedValue.toString())) {
                                                                }
                                                                else {
                                                                    if (org.kevoree.modeling.util.PrimitiveHelper.matches(resolved.toString(), this._expectedValue.toString().replace("*", ".*"))) {
                                                                    }
                                                                    else {
                                                                        selectedIndexes[i] = true;
                                                                        nbSelected++;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                console.error("WARN: Empty KObject " + loopObj.uuid());
                                                ;
                                            }
                                        }
                                        catch ($ex$) {
                                            if ($ex$ instanceof Error) {
                                                var e = $ex$;
                                                console.error(e['stack']);
                                                ;
                                            }
                                            else {
                                                throw $ex$;
                                            }
                                        }
                                    }
                                    var nextStepElement = new Array();
                                    var inserted = 0;
                                    for (var i = 0; i < context.inputObjects().length; i++) {
                                        if (selectedIndexes[i]) {
                                            nextStepElement[inserted] = context.inputObjects()[i];
                                            inserted++;
                                        }
                                    }
                                    if (this._next == null) {
                                        context.finalCallback()(nextStepElement);
                                    }
                                    else {
                                        context.setInputObjects(nextStepElement);
                                        this._next.execute(context);
                                    }
                                }
                            };
                            return FilterNotAttributeAction;
                        })();
                        actions.FilterNotAttributeAction = FilterNotAttributeAction;
                        var MapAction = (function () {
                            function MapAction(p_attribute) {
                                this._attribute = p_attribute;
                            }
                            MapAction.prototype.chain = function (next) {
                            };
                            MapAction.prototype.execute = function (context) {
                                var selected = new Array();
                                var nbElem = 0;
                                for (var i = 0; i < context.inputObjects().length; i++) {
                                    if (context.inputObjects()[i] != null) {
                                        var resolved = context.inputObjects()[i].get(this._attribute);
                                        if (resolved != null) {
                                            selected[i] = resolved;
                                            nbElem++;
                                        }
                                    }
                                }
                                var trimmed = new Array();
                                var nbInserted = 0;
                                for (var i = 0; i < context.inputObjects().length; i++) {
                                    if (selected[i] != null) {
                                        trimmed[nbInserted] = selected[i];
                                        nbInserted++;
                                    }
                                }
                                if (context.finalCallback() != null) {
                                    context.finalCallback()(trimmed);
                                }
                            };
                            return MapAction;
                        })();
                        actions.MapAction = MapAction;
                        var MathExpressionAction = (function () {
                            function MathExpressionAction(p_expression) {
                                this._expression = p_expression;
                                this._engine = new org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine();
                                this._engine.parse(p_expression);
                            }
                            MathExpressionAction.prototype.chain = function (next) {
                            };
                            MathExpressionAction.prototype.execute = function (context) {
                                var selected = new Array();
                                for (var i = 0; i < context.inputObjects().length; i++) {
                                    if (context.inputObjects()[i] != null) {
                                        selected[i] = this._engine.eval(context.inputObjects()[i]);
                                    }
                                }
                                if (context.finalCallback() != null) {
                                    context.finalCallback()(selected);
                                }
                            };
                            return MathExpressionAction;
                        })();
                        actions.MathExpressionAction = MathExpressionAction;
                        var RemoveDuplicateAction = (function () {
                            function RemoveDuplicateAction() {
                            }
                            RemoveDuplicateAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            RemoveDuplicateAction.prototype.execute = function (context) {
                                var elems = new org.kevoree.modeling.memory.chunk.impl.ArrayLongMap(context.inputObjects().length, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                for (var i = 0; i < context.inputObjects().length; i++) {
                                    elems.put(context.inputObjects()[i].uuid(), context.inputObjects()[i]);
                                }
                                var trimmed = new Array();
                                var nbInserted = new Int32Array([0]);
                                elems.each(function (key, value) {
                                    trimmed[nbInserted[0]] = value;
                                    nbInserted[0]++;
                                });
                                if (this._next == null) {
                                    context.finalCallback()(trimmed);
                                }
                                else {
                                    context.setInputObjects(trimmed);
                                    this._next.execute(context);
                                }
                            };
                            return RemoveDuplicateAction;
                        })();
                        actions.RemoveDuplicateAction = RemoveDuplicateAction;
                        var TraverseAction = (function () {
                            function TraverseAction(p_reference) {
                                this._reference = p_reference;
                            }
                            TraverseAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            TraverseAction.prototype.execute = function (context) {
                                var _this = this;
                                if (context.inputObjects() == null || context.inputObjects().length == 0) {
                                    if (this._next != null) {
                                        this._next.execute(context);
                                    }
                                    else {
                                        context.finalCallback()(context.inputObjects());
                                    }
                                }
                                else {
                                    var currentObject = context.inputObjects()[0];
                                    var nextIds = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                                    for (var i = 0; i < context.inputObjects().length; i++) {
                                        try {
                                            var loopObj = context.inputObjects()[i];
                                            var raw = currentObject._manager.closestChunk(loopObj.universe(), loopObj.now(), loopObj.uuid(), loopObj.metaClass(), loopObj.previousResolved());
                                            if (raw != null) {
                                                if (this._reference == null) {
                                                    var metaElements = loopObj.metaClass().metaElements();
                                                    for (var j = 0; j < metaElements.length; j++) {
                                                        if (metaElements[j] != null && metaElements[j].metaType() == org.kevoree.modeling.meta.MetaType.RELATION) {
                                                            var ref = metaElements[j];
                                                            var resolved = raw.getLongArray(ref.index(), currentObject.metaClass());
                                                            if (resolved != null) {
                                                                for (var k = 0; k < resolved.length; k++) {
                                                                    nextIds.put(resolved[k], resolved[k]);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    var translatedRef = loopObj.internal_transpose_ref(this._reference);
                                                    if (translatedRef != null) {
                                                        var resolved = raw.getLongArray(translatedRef.index(), currentObject.metaClass());
                                                        if (resolved != null) {
                                                            for (var j = 0; j < resolved.length; j++) {
                                                                nextIds.put(resolved[j], resolved[j]);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        catch ($ex$) {
                                            if ($ex$ instanceof Error) {
                                                var e = $ex$;
                                                console.error(e['stack']);
                                                ;
                                            }
                                            else {
                                                throw $ex$;
                                            }
                                        }
                                    }
                                    var trimmed = new Float64Array(nextIds.size());
                                    var inserted = new Int32Array([0]);
                                    nextIds.each(function (key, value) {
                                        trimmed[inserted[0]] = key;
                                        inserted[0]++;
                                    });
                                    currentObject._manager.lookupAllObjects(currentObject.universe(), currentObject.now(), trimmed, function (kObjects) {
                                        if (_this._next == null) {
                                            context.finalCallback()(kObjects);
                                        }
                                        else {
                                            context.setInputObjects(kObjects);
                                            _this._next.execute(context);
                                        }
                                    });
                                }
                            };
                            return TraverseAction;
                        })();
                        actions.TraverseAction = TraverseAction;
                        var TraverseIndexAction = (function () {
                            function TraverseIndexAction(p_indexName) {
                                this._indexName = p_indexName;
                            }
                            TraverseIndexAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            TraverseIndexAction.prototype.execute = function (context) {
                                var _this = this;
                                if (org.kevoree.modeling.util.PrimitiveHelper.equals(this._indexName, "root")) {
                                    if (context.inputObjects().length > 0) {
                                        context.inputObjects()[0].manager().getRoot(context.inputObjects()[0].universe(), context.inputObjects()[0].now(), function (root) {
                                            var selectedElems = new Array();
                                            selectedElems[0] = root;
                                            if (_this._next == null) {
                                                context.finalCallback()(selectedElems);
                                            }
                                            else {
                                                context.setInputObjects(selectedElems);
                                                _this._next.execute(context);
                                            }
                                        });
                                    }
                                }
                                else {
                                    var resolver = context.indexResolver();
                                    if (resolver != null) {
                                        var resolved = resolver(this._indexName);
                                        if (resolved != null) {
                                            if (this._next == null) {
                                                context.finalCallback()(resolved);
                                            }
                                            else {
                                                context.setInputObjects(resolved);
                                                this._next.execute(context);
                                            }
                                        }
                                        else {
                                            context.setInputObjects(new Array());
                                            this._next.execute(context);
                                        }
                                    }
                                    else {
                                        if (this._next == null) {
                                            context.finalCallback()(context.inputObjects());
                                        }
                                        else {
                                            this._next.execute(context);
                                        }
                                    }
                                }
                            };
                            return TraverseIndexAction;
                        })();
                        actions.TraverseIndexAction = TraverseIndexAction;
                        var TraverseQueryAction = (function () {
                            function TraverseQueryAction(p_referenceQuery) {
                                this.SEP = ",";
                                this._referenceQuery = p_referenceQuery;
                            }
                            TraverseQueryAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            TraverseQueryAction.prototype.execute = function (context) {
                                var _this = this;
                                if (context.inputObjects() == null || context.inputObjects().length == 0) {
                                    if (this._next != null) {
                                        this._next.execute(context);
                                    }
                                    else {
                                        context.finalCallback()(context.inputObjects());
                                    }
                                }
                                else {
                                    var currentFirstObject = context.inputObjects()[0];
                                    var nextIds = new org.kevoree.modeling.memory.chunk.impl.ArrayLongLongMap(-1, -1, -1, null);
                                    for (var i = 0; i < context.inputObjects().length; i++) {
                                        try {
                                            var loopObj = context.inputObjects()[i];
                                            var raw = loopObj._manager.closestChunk(loopObj.universe(), loopObj.now(), loopObj.uuid(), loopObj.metaClass(), loopObj.previousResolved());
                                            var metaElements = loopObj.metaClass().metaElements();
                                            if (raw != null) {
                                                if (this._referenceQuery == null) {
                                                    for (var j = 0; j < metaElements.length; j++) {
                                                        if (metaElements[j] != null && metaElements[j].metaType() == org.kevoree.modeling.meta.MetaType.RELATION) {
                                                            var resolved = raw.getLongArray(metaElements[j].index(), loopObj.metaClass());
                                                            if (resolved != null) {
                                                                for (var k = 0; k < resolved.length; k++) {
                                                                    var idResolved = resolved[k];
                                                                    nextIds.put(idResolved, idResolved);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    var queries = this._referenceQuery.split(this.SEP);
                                                    for (var k = 0; k < queries.length; k++) {
                                                        queries[k] = queries[k].replace("*", ".*");
                                                    }
                                                    for (var h = 0; h < metaElements.length; h++) {
                                                        if (metaElements[h] != null && metaElements[h].metaType() == org.kevoree.modeling.meta.MetaType.RELATION) {
                                                            var metaReference = metaElements[h];
                                                            var selected = false;
                                                            for (var k = 0; k < queries.length; k++) {
                                                                if (queries[k] != null && org.kevoree.modeling.util.PrimitiveHelper.startsWith(queries[k].trim(), "<<")) {
                                                                    if (org.kevoree.modeling.util.PrimitiveHelper.matches(metaReference.oppositeName(), queries[k].trim().substring(2))) {
                                                                        selected = true;
                                                                        break;
                                                                    }
                                                                }
                                                                else {
                                                                    if (org.kevoree.modeling.util.PrimitiveHelper.matches(metaReference.metaName(), "^" + queries[k] + "$")) {
                                                                        selected = true;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            if (selected) {
                                                                var resolved = raw.getLongArray(metaElements[h].index(), loopObj.metaClass());
                                                                if (resolved != null) {
                                                                    for (var j = 0; j < resolved.length; j++) {
                                                                        nextIds.put(resolved[j], resolved[j]);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        catch ($ex$) {
                                            if ($ex$ instanceof Error) {
                                                var e = $ex$;
                                                console.error(e['stack']);
                                                ;
                                            }
                                            else {
                                                throw $ex$;
                                            }
                                        }
                                    }
                                    var trimmed = new Float64Array(nextIds.size());
                                    var inserted = new Int32Array([0]);
                                    nextIds.each(function (key, value) {
                                        trimmed[inserted[0]] = key;
                                        inserted[0]++;
                                    });
                                    currentFirstObject._manager.lookupAllObjects(currentFirstObject.universe(), currentFirstObject.now(), trimmed, function (nextStepElement) {
                                        if (_this._next == null) {
                                            context.finalCallback()(nextStepElement);
                                        }
                                        else {
                                            context.setInputObjects(nextStepElement);
                                            _this._next.execute(context);
                                        }
                                    });
                                }
                            };
                            return TraverseQueryAction;
                        })();
                        actions.TraverseQueryAction = TraverseQueryAction;
                        var TraverseTimeAction = (function () {
                            function TraverseTimeAction(p_timeOffset, p_steps, p_continueCondition) {
                                this._timeOffset = p_timeOffset;
                                this._steps = p_steps;
                                this._continueContition = p_continueCondition;
                            }
                            TraverseTimeAction.prototype.chain = function (p_next) {
                                this._next = p_next;
                            };
                            TraverseTimeAction.prototype.execute = function (context) {
                                throw new Error("Not implemented Yet!");
                            };
                            return TraverseTimeAction;
                        })();
                        actions.TraverseTimeAction = TraverseTimeAction;
                    })(actions = impl.actions || (impl.actions = {}));
                })(impl = traversal_1.impl || (traversal_1.impl = {}));
                var query;
                (function (query_1) {
                    var impl;
                    (function (impl) {
                        var QueryEngine = (function () {
                            function QueryEngine() {
                            }
                            QueryEngine.getINSTANCE = function () {
                                if (QueryEngine.INSTANCE == null) {
                                    QueryEngine.INSTANCE = new org.kevoree.modeling.traversal.query.impl.QueryEngine();
                                }
                                return QueryEngine.INSTANCE;
                            };
                            QueryEngine.prototype.eval = function (query, origins, callback) {
                                if (callback != null) {
                                    this.buildTraversal(query).exec(origins, null, callback);
                                }
                            };
                            QueryEngine.prototype.buildTraversal = function (query) {
                                if (query == null || query.length == 0) {
                                    return null;
                                }
                                else {
                                    var traversal = new org.kevoree.modeling.traversal.impl.Traversal(null);
                                    var i = 0;
                                    var escaped = false;
                                    var previousKQueryStart = 0;
                                    var previousKQueryNameEnd = -1;
                                    var previousKQueryAttributesEnd = -1;
                                    var previousKQueryAttributesStart = 0;
                                    var endEval = false;
                                    while (i < query.length && !endEval) {
                                        var notLastElem = (i + 1) != query.length;
                                        if (escaped && notLastElem) {
                                            escaped = false;
                                        }
                                        else {
                                            var currentChar = query.charAt(i);
                                            if (currentChar == QueryEngine.CLOSE_BRACKET && notLastElem) {
                                                previousKQueryAttributesEnd = i;
                                            }
                                            else {
                                                if (currentChar == '\\' && notLastElem) {
                                                    escaped = true;
                                                }
                                                else {
                                                    if (currentChar == QueryEngine.OPEN_BRACKET && notLastElem) {
                                                        previousKQueryNameEnd = i;
                                                        previousKQueryAttributesStart = i + 1;
                                                    }
                                                    else {
                                                        if (currentChar == QueryEngine.PIPE_SEP || !notLastElem) {
                                                            var relationName;
                                                            var atts = null;
                                                            if (previousKQueryNameEnd == -1) {
                                                                if (notLastElem) {
                                                                    previousKQueryNameEnd = i;
                                                                }
                                                                else {
                                                                    previousKQueryNameEnd = i + 1;
                                                                }
                                                            }
                                                            else {
                                                                if (previousKQueryAttributesStart != -1) {
                                                                    if (previousKQueryAttributesEnd == -1) {
                                                                        if (notLastElem || currentChar == QueryEngine.PIPE_SEP || currentChar == QueryEngine.CLOSE_BRACKET) {
                                                                            previousKQueryAttributesEnd = i;
                                                                        }
                                                                        else {
                                                                            previousKQueryAttributesEnd = i + 1;
                                                                        }
                                                                    }
                                                                    atts = query.substring(previousKQueryAttributesStart, previousKQueryAttributesEnd);
                                                                    if (atts.length == 0) {
                                                                        atts = null;
                                                                    }
                                                                }
                                                            }
                                                            relationName = query.substring(previousKQueryStart, previousKQueryNameEnd).trim();
                                                            if (org.kevoree.modeling.util.PrimitiveHelper.startsWith(relationName, "@")) {
                                                                traversal = traversal.traverseIndex(relationName.substring(1));
                                                            }
                                                            else {
                                                                if (org.kevoree.modeling.util.PrimitiveHelper.startsWith(relationName, "=")) {
                                                                    traversal.eval(relationName.substring(1), null);
                                                                    endEval = true;
                                                                }
                                                                else {
                                                                    if (org.kevoree.modeling.util.PrimitiveHelper.startsWith(relationName, ">>")) {
                                                                        traversal = traversal.traverseQuery(relationName.substring(2));
                                                                        if (atts != null) {
                                                                            traversal = traversal.attributeQuery(atts);
                                                                        }
                                                                    }
                                                                    else {
                                                                        if (org.kevoree.modeling.util.PrimitiveHelper.startsWith(relationName, "<<")) {
                                                                            traversal = traversal.traverseQuery(relationName);
                                                                            if (atts != null) {
                                                                                traversal = traversal.attributeQuery(atts);
                                                                            }
                                                                        }
                                                                        else {
                                                                            traversal = traversal.traverseQuery(relationName);
                                                                            if (atts != null) {
                                                                                traversal = traversal.attributeQuery(atts);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            previousKQueryStart = i + 1;
                                                            previousKQueryNameEnd = -1;
                                                            previousKQueryAttributesEnd = -1;
                                                            previousKQueryAttributesStart = -1;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        i = i + 1;
                                    }
                                    return traversal;
                                }
                            };
                            QueryEngine.INSTANCE = null;
                            QueryEngine.OPEN_BRACKET = '[';
                            QueryEngine.CLOSE_BRACKET = ']';
                            QueryEngine.PIPE_SEP = '|';
                            return QueryEngine;
                        })();
                        impl.QueryEngine = QueryEngine;
                    })(impl = query_1.impl || (query_1.impl = {}));
                })(query = traversal_1.query || (traversal_1.query = {}));
                var visitor;
                (function (visitor) {
                    var KVisitResult = (function () {
                        function KVisitResult() {
                        }
                        KVisitResult.prototype.equals = function (other) {
                            return this == other;
                        };
                        KVisitResult.values = function () {
                            return KVisitResult._KVisitResultVALUES;
                        };
                        KVisitResult.CONTINUE = new KVisitResult();
                        KVisitResult.SKIP = new KVisitResult();
                        KVisitResult.STOP = new KVisitResult();
                        KVisitResult._KVisitResultVALUES = [
                            KVisitResult.CONTINUE,
                            KVisitResult.SKIP,
                            KVisitResult.STOP
                        ];
                        return KVisitResult;
                    })();
                    visitor.KVisitResult = KVisitResult;
                })(visitor = traversal_1.visitor || (traversal_1.visitor = {}));
            })(traversal = modeling.traversal || (modeling.traversal = {}));
            var util;
            (function (util) {
                var Base64 = (function () {
                    function Base64() {
                    }
                    Base64.encodeLong = function (l) {
                        var result = "";
                        var tmp = l;
                        if (l < 0) {
                            tmp = -tmp;
                        }
                        for (var i = 47; i >= 5; i -= 6) {
                            if (!(result === "" && ((tmp / Base64.powTwo[i]) & 0x3F) == 0)) {
                                result += Base64.encodeArray[(tmp / Base64.powTwo[i]) & 0x3F];
                            }
                        }
                        result += Base64.encodeArray[(tmp & 0x1F) * 2 + (l < 0 ? 1 : 0)];
                        return result;
                    };
                    Base64.encodeLongToBuffer = function (l, buffer) {
                        var empty = true;
                        var tmp = l;
                        if (l < 0) {
                            tmp = -tmp;
                        }
                        for (var i = 47; i >= 5; i -= 6) {
                            if (!(empty && ((tmp / Base64.powTwo[i]) & 0x3F) == 0)) {
                                empty = false;
                                buffer.append(Base64.encodeArray[(tmp / Base64.powTwo[i]) & 0x3F]);
                            }
                        }
                        buffer.append(Base64.encodeArray[(tmp & 0x1F) * 2 + (l < 0 ? 1 : 0)]);
                    };
                    Base64.encodeInt = function (l) {
                        var result = "";
                        var tmp = l;
                        if (l < 0) {
                            tmp = -tmp;
                        }
                        for (var i = 29; i >= 5; i -= 6) {
                            if (!(result === "" && ((tmp / Base64.powTwo[i]) & 0x3F) == 0)) {
                                result += Base64.encodeArray[(tmp / Base64.powTwo[i]) & 0x3F];
                            }
                        }
                        result += Base64.encodeArray[(tmp & 0x1F) * 2 + (l < 0 ? 1 : 0)];
                        return result;
                    };
                    Base64.encodeIntToBuffer = function (l, buffer) {
                        var empty = true;
                        var tmp = l;
                        if (l < 0) {
                            tmp = -tmp;
                        }
                        for (var i = 29; i >= 5; i -= 6) {
                            if (!(empty && ((tmp / Base64.powTwo[i]) & 0x3F) == 0)) {
                                empty = false;
                                buffer.append(Base64.encodeArray[(tmp / Base64.powTwo[i]) & 0x3F]);
                            }
                        }
                        buffer.append(Base64.encodeArray[(tmp & 0x1F) * 2 + (l < 0 ? 1 : 0)]);
                    };
                    Base64.decodeToLong = function (s) {
                        return Base64.decodeToLongWithBounds(s, 0, s.length);
                    };
                    Base64.decodeToLongWithBounds = function (s, offsetBegin, offsetEnd) {
                        var result = 0;
                        result += (Base64.decodeArray[s.charAt((offsetEnd - 1))] & 0xFF) / 2;
                        for (var i = 1; i < (offsetEnd - offsetBegin); i++) {
                            result += (Base64.decodeArray[s.charAt((offsetEnd - 1) - i)] & 0xFF) * Base64.powTwo[(6 * i) - 1];
                        }
                        if (((Base64.decodeArray[s.charAt((offsetEnd - 1))] & 0xFF) & 0x1) != 0) {
                            result = -result;
                        }
                        return result;
                    };
                    Base64.decodeToInt = function (s) {
                        return Base64.decodeToIntWithBounds(s, 0, s.length);
                    };
                    Base64.decodeToIntWithBounds = function (s, offsetBegin, offsetEnd) {
                        var result = 0;
                        result += (Base64.decodeArray[s.charAt((offsetEnd - 1))] & 0xFF) / 2;
                        for (var i = 1; i < (offsetEnd - offsetBegin); i++) {
                            result += (Base64.decodeArray[s.charAt((offsetEnd - 1) - i)] & 0xFF) * Base64.powTwo[(6 * i) - 1];
                        }
                        if (((Base64.decodeArray[s.charAt((offsetEnd - 1))] & 0xFF) & 0x1) != 0) {
                            result = -result;
                        }
                        return result;
                    };
                    Base64.encodeDouble = function (d) {
                        var result = "";
                        var floatArr = new Float64Array(1);
                        var bytes = new Uint8Array(floatArr.buffer);
                        floatArr[0] = d;
                        var exponent = (((bytes[7] & 0x7f) * 16) | (bytes[6] / 16)) - 0x3ff;
                        var signAndExp = (((bytes[7] / 128) & 0x1) * 2048) + (exponent + 1023);
                        //encode sign + exp
                        result += Base64.encodeArray[(signAndExp / 64) & 0x3F];
                        result += Base64.encodeArray[signAndExp & 0x3F];
                        result += Base64.encodeArray[bytes[6] & 0x0F];
                        result += Base64.encodeArray[(bytes[5] / 4) & 0x3F];
                        result += Base64.encodeArray[((bytes[5] & 0x3) * 16) | (bytes[4] / 16)];
                        result += Base64.encodeArray[((bytes[4] & 0x0F) * 4) | (bytes[3] / 64)];
                        result += Base64.encodeArray[(bytes[3] & 0x3F)];
                        result += Base64.encodeArray[(bytes[2] / 4) & 0x3F];
                        result += Base64.encodeArray[((bytes[2] & 0x3) * 16) | (bytes[1] / 16)];
                        result += Base64.encodeArray[((bytes[1] & 0x0F) * 4) | (bytes[0] / 64)];
                        result += Base64.encodeArray[(bytes[0] & 0x3F)];
                        var i = result.length - 1;
                        while (i >= 3 && result.charAt(i) == 'A') {
                            i--;
                        }
                        return result.substr(0, i + 1);
                    };
                    Base64.encodeDoubleToBuffer = function (d, buffer) {
                        var result = "";
                        var floatArr = new Float64Array(1);
                        var bytes = new Uint8Array(floatArr.buffer);
                        floatArr[0] = d;
                        var exponent = (((bytes[7] & 0x7f) * 16) | bytes[6] / 16) - 0x3ff;
                        var signAndExp = (((bytes[7] / 128) & 0x1) * 2048) + (exponent + 1023);
                        //encode sign + exp
                        result += Base64.encodeArray[(signAndExp / 64) & 0x3F];
                        result += Base64.encodeArray[signAndExp & 0x3F];
                        result += Base64.encodeArray[bytes[6] & 0x0F];
                        result += Base64.encodeArray[(bytes[5] / 4) & 0x3F];
                        result += Base64.encodeArray[((bytes[5] & 0x3) * 16) | (bytes[4] / 16)];
                        result += Base64.encodeArray[((bytes[4] & 0x0F) * 4) | (bytes[3] / 64)];
                        result += Base64.encodeArray[(bytes[3] & 0x3F)];
                        result += Base64.encodeArray[(bytes[2] / 4) & 0x3F];
                        result += Base64.encodeArray[((bytes[2] & 0x3) * 16) | (bytes[1] / 16)];
                        result += Base64.encodeArray[((bytes[1] & 0x0F) * 4) | (bytes[0] / 64)];
                        result += Base64.encodeArray[(bytes[0] & 0x3F)];
                        var i = result.length - 1;
                        while (i >= 3 && result.charAt(i) == 'A') {
                            i--;
                        }
                        buffer.append(result.substr(0, i + 1));
                    };
                    Base64.decodeToDouble = function (s) {
                        return Base64.decodeToDoubleWithBounds(s, 0, s.length);
                    };
                    Base64.decodeToDoubleWithBounds = function (s, offsetBegin, offsetEnd) {
                        var signAndExp = ((Base64.decodeArray[s.charAt(offsetBegin)] & 0xFF) * 64) + (Base64.decodeArray[s.charAt(offsetBegin + 1)] & 0xFF);
                        var sign = ((signAndExp & 0x800) != 0 ? -1 : 1);
                        var exp = signAndExp & 0x7FF;
                        //Mantisse
                        var mantissaBits = 0;
                        for (var i = 2; i < (offsetEnd - offsetBegin); i++) {
                            mantissaBits += (Base64.decodeArray[s.charAt(offsetBegin + i)] & 0xFF) * Base64.powTwo[48 - (6 * (i - 2))];
                        }
                        return (exp != 0) ? sign * Math.pow(2, exp - 1023) * (1 + (mantissaBits / Math.pow(2, 52))) : sign * Math.pow(2, -1022) * (0 + (mantissaBits / Math.pow(2, 52)));
                    };
                    Base64.encodeBoolArray = function (boolArr) {
                        var result = "";
                        var tmpVal = 0;
                        for (var i = 0; i < boolArr.length; i++) {
                            tmpVal = tmpVal | ((boolArr[i] ? 1 : 0) * Base64.powTwo[i % 6]);
                            if (i % 6 == 5 || i == (boolArr.length - 1)) {
                                result += Base64.encodeArray[tmpVal];
                                tmpVal = 0;
                            }
                        }
                        return result;
                    };
                    Base64.encodeBoolArrayToBuffer = function (boolArr, buffer) {
                        var tmpVal = 0;
                        for (var i = 0; i < boolArr.length; i++) {
                            tmpVal = tmpVal | ((boolArr[i] ? 1 : 0) * Base64.powTwo[i % 6]);
                            if (i % 6 == 5 || i == boolArr.length - 1) {
                                buffer.append(Base64.encodeArray[tmpVal]);
                                tmpVal = 0;
                            }
                        }
                    };
                    Base64.decodeBoolArray = function (s, arraySize) {
                        return Base64.decodeToBoolArrayWithBounds(s, 0, s.length, arraySize);
                    };
                    Base64.decodeToBoolArrayWithBounds = function (s, offsetBegin, offsetEnd, arraySize) {
                        var resultTmp = [];
                        for (var i = 0; i < (offsetEnd - offsetBegin); i++) {
                            var bitarray = Base64.decodeArray[s.charAt(offsetBegin + i)] & 0xFF;
                            for (var bit_i = 0; bit_i < 6; bit_i++) {
                                if ((6 * i) + bit_i < arraySize) {
                                    resultTmp[(6 * i) + bit_i] = (bitarray & (1 * Base64.powTwo[bit_i])) != 0;
                                }
                                else {
                                    break;
                                }
                            }
                        }
                        return resultTmp;
                    };
                    Base64.encodeString = function (s) {
                        var result = "";
                        var sLength = s.length;
                        var currentSourceChar;
                        var currentEncodedChar = 0;
                        var freeBitsInCurrentChar = 6;
                        for (var charIdx = 0; charIdx < sLength; charIdx++) {
                            currentSourceChar = s.charCodeAt(charIdx);
                            if (freeBitsInCurrentChar == 6) {
                                result += Base64.encodeArray[(currentSourceChar / 4) & 0x3F];
                                currentEncodedChar = (currentSourceChar & 0x3) * 16;
                                freeBitsInCurrentChar = 4;
                            }
                            else if (freeBitsInCurrentChar == 4) {
                                result += Base64.encodeArray[(currentEncodedChar | ((currentSourceChar / 16) & 0xF)) & 0x3F];
                                currentEncodedChar = (currentSourceChar & 0xF) * 4;
                                freeBitsInCurrentChar = 2;
                            }
                            else if (freeBitsInCurrentChar == 2) {
                                result += Base64.encodeArray[(currentEncodedChar | ((currentSourceChar / 64) & 0x3)) & 0x3F];
                                result += Base64.encodeArray[currentSourceChar & 0x3F];
                                freeBitsInCurrentChar = 6;
                            }
                        }
                        if (freeBitsInCurrentChar != 6) {
                            result += Base64.encodeArray[currentEncodedChar];
                        }
                        return result;
                    };
                    Base64.encodeStringToBuffer = function (s, buffer) {
                        var sLength = s.length;
                        var currentSourceChar;
                        var currentEncodedChar = 0;
                        var freeBitsInCurrentChar = 6;
                        for (var charIdx = 0; charIdx < sLength; charIdx++) {
                            currentSourceChar = s.charCodeAt(charIdx);
                            if (freeBitsInCurrentChar == 6) {
                                buffer.append(Base64.encodeArray[(currentSourceChar / 4) & 0x3F]);
                                currentEncodedChar = (currentSourceChar & 0x3) * 16;
                                freeBitsInCurrentChar = 4;
                            }
                            else if (freeBitsInCurrentChar == 4) {
                                buffer.append(Base64.encodeArray[(currentEncodedChar | ((currentSourceChar / 16) & 0xF)) & 0x3F]);
                                currentEncodedChar = (currentSourceChar & 0xF) * 4;
                                freeBitsInCurrentChar = 2;
                            }
                            else if (freeBitsInCurrentChar == 2) {
                                buffer.append(Base64.encodeArray[(currentEncodedChar | ((currentSourceChar / 64) & 0x3)) & 0x3F]);
                                buffer.append(Base64.encodeArray[currentSourceChar & 0x3F]);
                                freeBitsInCurrentChar = 6;
                            }
                        }
                        if (freeBitsInCurrentChar != 6) {
                            buffer.append(Base64.encodeArray[currentEncodedChar]);
                        }
                    };
                    Base64.decodeString = function (s) {
                        return Base64.decodeToStringWithBounds(s, 0, s.length);
                    };
                    Base64.decodeToStringWithBounds = function (s, offsetBegin, offsetEnd) {
                        var result = "";
                        var currentSourceChar;
                        var currentDecodedChar = 0;
                        var freeBitsInCurrentChar = 8;
                        for (var charIdx = offsetBegin; charIdx < offsetEnd; charIdx++) {
                            currentSourceChar = Base64.decodeArray[s.charAt(charIdx)];
                            if (freeBitsInCurrentChar == 8) {
                                currentDecodedChar = currentSourceChar * 4;
                                freeBitsInCurrentChar = 2;
                            }
                            else if (freeBitsInCurrentChar == 2) {
                                result += String.fromCharCode(currentDecodedChar | (currentSourceChar / 16));
                                currentDecodedChar = (currentSourceChar & 0xF) * 16;
                                freeBitsInCurrentChar = 4;
                            }
                            else if (freeBitsInCurrentChar == 4) {
                                result += String.fromCharCode(currentDecodedChar | (currentSourceChar / 4));
                                currentDecodedChar = (currentSourceChar & 0x3) * 64;
                                freeBitsInCurrentChar = 6;
                            }
                            else if (freeBitsInCurrentChar == 6) {
                                result += String.fromCharCode(currentDecodedChar | currentSourceChar);
                                freeBitsInCurrentChar = 8;
                            }
                        }
                        return result;
                    };
                    Base64.encodeArray = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'];
                    Base64.decodeArray = { "A": 0, "B": 1, "C": 2, "D": 3, "E": 4, "F": 5, "G": 6, "H": 7, "I": 8, "J": 9, "K": 10, "L": 11, "M": 12, "N": 13, "O": 14, "P": 15, "Q": 16, "R": 17, "S": 18, "T": 19, "U": 20, "V": 21, "W": 22, "X": 23, "Y": 24, "Z": 25, "a": 26, "b": 27, "c": 28, "d": 29, "e": 30, "f": 31, "g": 32, "h": 33, "i": 34, "j": 35, "k": 36, "l": 37, "m": 38, "n": 39, "o": 40, "p": 41, "q": 42, "r": 43, "s": 44, "t": 45, "u": 46, "v": 47, "w": 48, "x": 49, "y": 50, "z": 51, "0": 52, "1": 53, "2": 54, "3": 55, "4": 56, "5": 57, "6": 58, "7": 59, "8": 60, "9": 61, "+": 62, "/": 63 };
                    Base64.powTwo = { 0: 1, 1: 2, 2: 4, 3: 8, 4: 16, 5: 32, 6: 64, 7: 128, 8: 256, 9: 512, 10: 1024, 11: 2048, 12: 4096, 13: 8192, 14: 16384, 15: 32768, 16: 65536, 17: 131072, 18: 262144, 19: 524288, 20: 1048576, 21: 2097152, 22: 4194304, 23: 8388608, 24: 16777216, 25: 33554432, 26: 67108864, 27: 134217728, 28: 268435456, 29: 536870912, 30: 1073741824, 31: 2147483648, 32: 4294967296, 33: 8589934592, 34: 17179869184, 35: 34359738368, 36: 68719476736, 37: 137438953472, 38: 274877906944, 39: 549755813888, 40: 1099511627776, 41: 2199023255552, 42: 4398046511104, 43: 8796093022208, 44: 17592186044416, 45: 35184372088832, 46: 70368744177664, 47: 140737488355328, 48: 281474976710656, 49: 562949953421312, 50: 1125899906842624, 51: 2251799813685248, 52: 4503599627370496, 53: 9007199254740992 };
                    return Base64;
                })();
                util.Base64 = Base64;
                var Checker = (function () {
                    function Checker() {
                    }
                    Checker.isDefined = function (param) {
                        return param != undefined && param != null;
                    };
                    return Checker;
                })();
                util.Checker = Checker;
                var PrimitiveHelper = (function () {
                    function PrimitiveHelper() {
                    }
                    PrimitiveHelper.startsWith = function (src, prefix) {
                        return src.slice(0, prefix.length) == prefix;
                    };
                    PrimitiveHelper.endsWith = function (src, prefix) {
                        return src.slice(-prefix.length) == prefix;
                    };
                    PrimitiveHelper.matches = function (src, regex) {
                        if (regex == null) {
                            return false;
                        }
                        else {
                            var m = src.match(regex);
                            return m != null && m.length > 0;
                        }
                    };
                    PrimitiveHelper.equals = function (src, other) {
                        return src === other;
                    };
                    PrimitiveHelper.parseInt = function (val) {
                        return parseInt(val);
                    };
                    PrimitiveHelper.parseLong = function (val) {
                        return +val;
                    };
                    PrimitiveHelper.parseDouble = function (val) {
                        return parseFloat(val);
                    };
                    PrimitiveHelper.parseShort = function (val) {
                        return +val;
                    };
                    PrimitiveHelper.parseBoolean = function (val) {
                        return val === "true";
                    };
                    PrimitiveHelper.SHORT_MIN_VALUE = function () {
                        return -0x8000;
                    };
                    PrimitiveHelper.SHORT_MAX_VALUE = function () {
                        return 0x7FFF;
                    };
                    PrimitiveHelper.isNaN = function (val) {
                        return isNaN(val);
                    };
                    PrimitiveHelper.DOUBLE_MIN_VALUE = function () {
                        return Number.MIN_VALUE;
                    };
                    PrimitiveHelper.DOUBLE_MAX_VALUE = function () {
                        return Number.MAX_VALUE;
                    };
                    return PrimitiveHelper;
                })();
                util.PrimitiveHelper = PrimitiveHelper;
                var maths;
                (function (maths) {
                    var Correlations = (function () {
                        function Correlations() {
                        }
                        Correlations.pearson = function (x, y) {
                            var meanX = 0.0, meanY = 0.0;
                            for (var i = 0; i < x.length; i++) {
                                meanX += x[i];
                                meanY += y[i];
                            }
                            meanX /= x.length;
                            meanY /= x.length;
                            var sumXY = 0.0;
                            var sumX2 = 0.0;
                            var sumY2 = 0.0;
                            for (var i = 0; i < x.length; i++) {
                                sumXY += ((x[i] - meanX) * (y[i] - meanY));
                                sumX2 += (x[i] - meanX) * (x[i] - meanX);
                                sumY2 += (y[i] - meanY) * (y[i] - meanY);
                            }
                            return (sumXY / (Math.sqrt(sumX2) * Math.sqrt(sumY2)));
                        };
                        return Correlations;
                    })();
                    maths.Correlations = Correlations;
                    var Distribution = (function () {
                        function Distribution() {
                        }
                        Distribution.inverseNormalCDF = function (q) {
                            var b = new Float64Array([1.570796288, 0.03706987906, -0.8364353589e-3, -0.2250947176e-3, 0.6841218299e-5, 0.5824238515e-5, -0.104527497e-5, 0.8360937017e-7, -0.3231081277e-8, 0.3657763036e-10, 0.6936233982e-12]);
                            if (q < 0.0 || 1.0 < q || q == 0.5) {
                                return 0.0;
                            }
                            var w1 = q;
                            if (q > 0.5) {
                                w1 = 1.0 - q;
                            }
                            var w3 = -Math.log(4.0 * w1 * (1.0 - w1));
                            w1 = b[0];
                            for (var i = 1; i < 11; i++) {
                                w1 += b[i] * Math.pow(w3, i);
                            }
                            return q > 0.5 ? Math.sqrt(w1 * w3) : -Math.sqrt(w1 * w3);
                        };
                        Distribution.gaussian = function (features, means, variances) {
                            var dim = features.length;
                            var p = 1;
                            for (var i = 0; i < dim; i++) {
                                p = p * (1 / Math.sqrt(2 * Math.PI * variances[i])) * Math.exp(-((features[i] - means[i]) * (features[i] - means[i])) / (2 * variances[i]));
                            }
                            return p;
                        };
                        Distribution.gaussianArray = function (features, row, means, variances) {
                            var dim = features.columns();
                            var p = 1;
                            for (var i = 0; i < dim; i++) {
                                p = p * (1 / Math.sqrt(2 * Math.PI * variances[i])) * Math.exp(-((features.get(row, i) - means[i]) * (features.get(row, i) - means[i])) / (2 * variances[i]));
                            }
                            return p;
                        };
                        Distribution.parallelGaussian = function (features, means, variances) {
                            var dim = features.length;
                            var p = new Float64Array(dim);
                            for (var i = 0; i < dim; i++) {
                                p[i] = (1 / Math.sqrt(2 * Math.PI * variances[i])) * Math.exp(-((features[i] - means[i]) * (features[i] - means[i])) / (2 * variances[i]));
                            }
                            return p;
                        };
                        Distribution.gaussianOneFeature = function (feature, mean, variance) {
                            return (1 / Math.sqrt(2 * Math.PI * variance)) * Math.exp(-((feature - mean) * (feature - mean)) / (2 * variance));
                        };
                        return Distribution;
                    })();
                    maths.Distribution = Distribution;
                    var PolynomialFit = (function () {
                        function PolynomialFit(degree) {
                            this.coef = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(degree + 1, 1);
                            this.A = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(1, degree + 1);
                            this.y = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(1, 1);
                            this.solver = new org.kevoree.modeling.util.maths.matrix.solvers.AdjLinearSolverQr();
                        }
                        PolynomialFit.prototype.getCoef = function () {
                            return this.coef.data;
                        };
                        PolynomialFit.prototype.fit = function (samplePoints, observations) {
                            this.y.reshapeBoolean(observations.length, 1, false);
                            java.lang.System.arraycopy(observations, 0, this.y.data, 0, observations.length);
                            this.A.reshapeBoolean(this.y.numRows, this.coef.numRows, false);
                            for (var i = 0; i < observations.length; i++) {
                                var obs = 1;
                                for (var j = 0; j < this.coef.numRows; j++) {
                                    this.A.cset(i, j, obs);
                                    obs *= samplePoints[i];
                                }
                            }
                            this.solver.setA(this.A);
                            this.solver.solve(this.y, this.coef);
                        };
                        PolynomialFit.extrapolate = function (time, weights) {
                            var result = 0;
                            var power = 1;
                            for (var j = 0; j < weights.length; j++) {
                                result += weights[j] * power;
                                power = power * time;
                            }
                            return result;
                        };
                        return PolynomialFit;
                    })();
                    maths.PolynomialFit = PolynomialFit;
                    var Ranking = (function () {
                        function Ranking() {
                        }
                        Ranking.wilsonRank = function (positive, negative, confidence) {
                            var n = positive + negative;
                            if (n == 0) {
                                return 0.0;
                            }
                            var z = org.kevoree.modeling.util.maths.Distribution.inverseNormalCDF(1.0 - confidence / 2.0);
                            var p_hat = (1.0 * positive) / n;
                            return (p_hat + z * z / (2.0 * n) - z * Math.sqrt((p_hat * (1.0 - p_hat) + z * z / (4.0 * n)) / n)) / (1.0 + z * z / n);
                        };
                        return Ranking;
                    })();
                    maths.Ranking = Ranking;
                    var Statistic = (function () {
                        function Statistic() {
                        }
                        Statistic.calcHistogram = function (data, dataratings, numBins) {
                            var result = new Int32Array(numBins);
                            var max;
                            var min;
                            min = data[0];
                            max = data[0];
                            for (var i = 0; i < data.length; i++) {
                                if (data[i] < min) {
                                    min = data[i];
                                }
                                if (data[i] > max) {
                                    max = data[i];
                                }
                            }
                            var binSize = (max - min) / numBins;
                            for (var i = 0; i < data.length; i++) {
                                var bin = ((data[i] - min) / binSize);
                                result[bin]++;
                            }
                        };
                        return Statistic;
                    })();
                    maths.Statistic = Statistic;
                    var StringDistance = (function () {
                        function StringDistance() {
                        }
                        StringDistance.levenshtein = function (s0, s1) {
                            var len0 = s0.length + 1;
                            var len1 = s1.length + 1;
                            var cost = new Int32Array(len0);
                            var newcost = new Int32Array(len0);
                            for (var i = 0; i < len0; i++) {
                                cost[i] = i;
                            }
                            for (var j = 1; j < len1; j++) {
                                newcost[0] = j;
                                for (var i = 1; i < len0; i++) {
                                    var match = (s0.charAt(i - 1) == s1.charAt(j - 1)) ? 0 : 1;
                                    var cost_replace = cost[i - 1] + match;
                                    var cost_insert = cost[i] + 1;
                                    var cost_delete = newcost[i - 1] + 1;
                                    newcost[i] = Math.min(Math.min(cost_insert, cost_delete), cost_replace);
                                }
                                var swap = cost;
                                cost = newcost;
                                newcost = swap;
                            }
                            return cost[len0 - 1];
                        };
                        return StringDistance;
                    })();
                    maths.StringDistance = StringDistance;
                    var expression;
                    (function (expression_1) {
                        var impl;
                        (function (impl) {
                            var MathDoubleToken = (function () {
                                function MathDoubleToken(_content) {
                                    this._content = _content;
                                }
                                MathDoubleToken.prototype.type = function () {
                                    return 2;
                                };
                                MathDoubleToken.prototype.content = function () {
                                    return this._content;
                                };
                                MathDoubleToken.prototype.type2 = function () {
                                    return 0;
                                };
                                return MathDoubleToken;
                            })();
                            impl.MathDoubleToken = MathDoubleToken;
                            var MathEntities = (function () {
                                function MathEntities() {
                                    this.operators = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                    this.operators.put("+", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("+", 20, true));
                                    this.operators.put("-", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("-", 20, true));
                                    this.operators.put("*", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("*", 30, true));
                                    this.operators.put("/", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("/", 30, true));
                                    this.operators.put("%", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("%", 30, true));
                                    this.operators.put("^", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("^", 40, false));
                                    this.operators.put("&&", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("&&", 4, false));
                                    this.operators.put("||", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("||", 2, false));
                                    this.operators.put(">", new org.kevoree.modeling.util.maths.expression.impl.MathOperation(">", 10, false));
                                    this.operators.put(">=", new org.kevoree.modeling.util.maths.expression.impl.MathOperation(">=", 10, false));
                                    this.operators.put("<", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("<", 10, false));
                                    this.operators.put("<=", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("<=", 10, false));
                                    this.operators.put("==", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("==", 7, false));
                                    this.operators.put("!=", new org.kevoree.modeling.util.maths.expression.impl.MathOperation("!=", 7, false));
                                    this.functions = new org.kevoree.modeling.memory.chunk.impl.ArrayStringMap(org.kevoree.modeling.KConfig.CACHE_INIT_SIZE, org.kevoree.modeling.KConfig.CACHE_LOAD_FACTOR);
                                    this.functions.put("NOT", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("NOT", 1));
                                    this.functions.put("IF", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("IF", 3));
                                    this.functions.put("RAND", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("RAND", 0));
                                    this.functions.put("SIN", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("SIN", 1));
                                    this.functions.put("COS", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("COS", 1));
                                    this.functions.put("TAN", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("TAN", 1));
                                    this.functions.put("ASIN", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("ASIN", 1));
                                    this.functions.put("ACOS", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("ACOS", 1));
                                    this.functions.put("ATAN", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("ATAN", 1));
                                    this.functions.put("MAX", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("MAX", 2));
                                    this.functions.put("MIN", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("MIN", 2));
                                    this.functions.put("ABS", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("ABS", 1));
                                    this.functions.put("LOG", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("LOG", 1));
                                    this.functions.put("ROUND", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("ROUND", 2));
                                    this.functions.put("FLOOR", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("FLOOR", 1));
                                    this.functions.put("CEILING", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("CEILING", 1));
                                    this.functions.put("SQRT", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("SQRT", 1));
                                    this.functions.put("SECONDS", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("SECONDS", 1));
                                    this.functions.put("MINUTES", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("MINUTES", 1));
                                    this.functions.put("HOURS", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("HOURS", 1));
                                    this.functions.put("DAY", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("DAY", 1));
                                    this.functions.put("MONTH", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("MONTH", 1));
                                    this.functions.put("YEAR", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("YEAR", 1));
                                    this.functions.put("DAYOFWEEK", new org.kevoree.modeling.util.maths.expression.impl.MathFunction("DAYOFWEEK", 1));
                                }
                                MathEntities.getINSTANCE = function () {
                                    if (MathEntities.INSTANCE == null) {
                                        MathEntities.INSTANCE = new org.kevoree.modeling.util.maths.expression.impl.MathEntities();
                                    }
                                    return MathEntities.INSTANCE;
                                };
                                MathEntities.INSTANCE = null;
                                return MathEntities;
                            })();
                            impl.MathEntities = MathEntities;
                            var MathExpressionEngine = (function () {
                                function MathExpressionEngine() {
                                    this._cacheAST = null;
                                    var vars = new java.util.HashMap();
                                    vars.put("PI", Math.PI);
                                    vars.put("TRUE", 1.0);
                                    vars.put("FALSE", 0.0);
                                    this.varResolver = function (potentialVarName) {
                                        return vars.get(potentialVarName);
                                    };
                                }
                                MathExpressionEngine.isNumber = function (st) {
                                    return !isNaN(+st);
                                };
                                MathExpressionEngine.isDigit = function (c) {
                                    var cc = c.charCodeAt(0);
                                    if (cc >= 0x30 && cc <= 0x39) {
                                        return true;
                                    }
                                    return false;
                                };
                                MathExpressionEngine.isLetter = function (c) {
                                    var cc = c.charCodeAt(0);
                                    if ((cc >= 0x41 && cc <= 0x5A) || (cc >= 0x61 && cc <= 0x7A)) {
                                        return true;
                                    }
                                    return false;
                                };
                                MathExpressionEngine.isWhitespace = function (c) {
                                    var cc = c.charCodeAt(0);
                                    if ((cc >= 0x0009 && cc <= 0x000D) || (cc == 0x0020) || (cc == 0x0085) || (cc == 0x00A0)) {
                                        return true;
                                    }
                                    return false;
                                };
                                MathExpressionEngine.prototype.shuntingYard = function (expression) {
                                    var outputQueue = new java.util.ArrayList();
                                    var stack = new java.util.Stack();
                                    var tokenizer = new org.kevoree.modeling.util.maths.expression.impl.MathExpressionTokenizer(expression);
                                    var lastFunction = null;
                                    var previousToken = null;
                                    while (tokenizer.hasNext()) {
                                        var token = tokenizer.next();
                                        if (org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().functions.contains(token.toUpperCase())) {
                                            stack.push(token);
                                            lastFunction = token;
                                        }
                                        else {
                                            if (org.kevoree.modeling.util.PrimitiveHelper.equals(",", token)) {
                                                while (!stack.isEmpty() && !org.kevoree.modeling.util.PrimitiveHelper.equals("(", stack.peek())) {
                                                    outputQueue.add(stack.pop());
                                                }
                                                if (stack.isEmpty()) {
                                                    throw new Error("Parse error for function '" + lastFunction + "'");
                                                }
                                            }
                                            else {
                                                if (org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.contains(token)) {
                                                    var o1 = org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.get(token);
                                                    var token2 = stack.isEmpty() ? null : stack.peek();
                                                    while (org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.contains(token2) && ((o1.isLeftAssoc() && o1.getPrecedence() <= org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.get(token2).getPrecedence()) || (o1.getPrecedence() < org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.get(token2).getPrecedence()))) {
                                                        outputQueue.add(stack.pop());
                                                        token2 = stack.isEmpty() ? null : stack.peek();
                                                    }
                                                    stack.push(token);
                                                }
                                                else {
                                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals("(", token)) {
                                                        if (previousToken != null) {
                                                            if (org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isNumber(previousToken)) {
                                                                throw new Error("Missing operator at character position " + tokenizer.getPos());
                                                            }
                                                        }
                                                        stack.push(token);
                                                    }
                                                    else {
                                                        if (org.kevoree.modeling.util.PrimitiveHelper.equals(")", token)) {
                                                            while (!stack.isEmpty() && !org.kevoree.modeling.util.PrimitiveHelper.equals("(", stack.peek())) {
                                                                outputQueue.add(stack.pop());
                                                            }
                                                            if (stack.isEmpty()) {
                                                                throw new Error("Mismatched parentheses");
                                                            }
                                                            stack.pop();
                                                            if (!stack.isEmpty() && org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().functions.contains(stack.peek().toUpperCase())) {
                                                                outputQueue.add(stack.pop());
                                                            }
                                                        }
                                                        else {
                                                            outputQueue.add(token);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        previousToken = token;
                                    }
                                    while (!stack.isEmpty()) {
                                        var element = stack.pop();
                                        if (org.kevoree.modeling.util.PrimitiveHelper.equals("(", element) || org.kevoree.modeling.util.PrimitiveHelper.equals(")", element)) {
                                            throw new Error("Mismatched parentheses");
                                        }
                                        outputQueue.add(element);
                                    }
                                    return outputQueue;
                                };
                                MathExpressionEngine.prototype.eval = function (context) {
                                    if (this._cacheAST == null) {
                                        throw new Error("Call parse before");
                                    }
                                    var stack = new java.util.Stack();
                                    for (var ii = 0; ii < this._cacheAST.length; ii++) {
                                        var mathToken = this._cacheAST[ii];
                                        switch (mathToken.type()) {
                                            case 0:
                                                var v1 = stack.pop();
                                                var v2 = stack.pop();
                                                var castedOp = mathToken;
                                                stack.push(castedOp.eval(v2, v1));
                                                break;
                                            case 1:
                                                var castedFunction = mathToken;
                                                var p = new Float64Array(castedFunction.getNumParams());
                                                for (var i = castedFunction.getNumParams() - 1; i >= 0; i--) {
                                                    p[i] = stack.pop();
                                                }
                                                stack.push(castedFunction.eval(p));
                                                break;
                                            case 2:
                                                var castedDouble = mathToken;
                                                stack.push(castedDouble.content());
                                                break;
                                            case 3:
                                                var castedFreeToken = mathToken;
                                                if (this.varResolver(castedFreeToken.content()) != null) {
                                                    stack.push(this.varResolver(castedFreeToken.content()));
                                                }
                                                else {
                                                    if (context != null) {
                                                        if (org.kevoree.modeling.util.PrimitiveHelper.equals("TIME", castedFreeToken.content())) {
                                                            stack.push(context.now());
                                                        }
                                                        else {
                                                            var resolved = context.getByName(castedFreeToken.content());
                                                            if (resolved != null) {
                                                                if (resolved instanceof org.kevoree.modeling.meta.impl.MetaLiteral) {
                                                                    stack.push(resolved.index());
                                                                }
                                                                else {
                                                                    var valueString = resolved.toString();
                                                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(valueString, "true")) {
                                                                        stack.push(1.0);
                                                                    }
                                                                    else {
                                                                        if (org.kevoree.modeling.util.PrimitiveHelper.equals(valueString, "false")) {
                                                                            stack.push(0.0);
                                                                        }
                                                                        else {
                                                                            try {
                                                                                stack.push(org.kevoree.modeling.util.PrimitiveHelper.parseDouble(resolved.toString()));
                                                                            }
                                                                            catch ($ex$) {
                                                                                if ($ex$ instanceof Error) {
                                                                                    var e = $ex$;
                                                                                }
                                                                                else {
                                                                                    throw $ex$;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else {
                                                                throw new Error("Unknow variable for name " + castedFreeToken.content());
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        throw new Error("Unknow variable for name " + castedFreeToken.content());
                                                    }
                                                }
                                                break;
                                        }
                                    }
                                    var result = stack.pop();
                                    if (result == null) {
                                        return 0;
                                    }
                                    else {
                                        return result;
                                    }
                                };
                                MathExpressionEngine.prototype.buildAST = function (rpn) {
                                    var result = new Array();
                                    for (var ii = 0; ii < rpn.size(); ii++) {
                                        var token = rpn.get(ii);
                                        if (org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.contains(token)) {
                                            result[ii] = org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.get(token);
                                        }
                                        else {
                                            if (org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().functions.contains(token.toUpperCase())) {
                                                result[ii] = org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().functions.get(token.toUpperCase());
                                            }
                                            else {
                                                if (token.length > 0 && org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isLetter(token.charAt(0))) {
                                                    result[ii] = new org.kevoree.modeling.util.maths.expression.impl.MathFreeToken(token);
                                                }
                                                else {
                                                    try {
                                                        var parsed = org.kevoree.modeling.util.PrimitiveHelper.parseDouble(token);
                                                        result[ii] = new org.kevoree.modeling.util.maths.expression.impl.MathDoubleToken(parsed);
                                                    }
                                                    catch ($ex$) {
                                                        if ($ex$ instanceof Error) {
                                                            var e = $ex$;
                                                            result[ii] = new org.kevoree.modeling.util.maths.expression.impl.MathFreeToken(token);
                                                        }
                                                        else {
                                                            throw $ex$;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    return result;
                                };
                                MathExpressionEngine.prototype.parse = function (p_expression) {
                                    var rpn = this.shuntingYard(p_expression);
                                    this._cacheAST = this.buildAST(rpn);
                                    return this;
                                };
                                MathExpressionEngine.prototype.setVarResolver = function (p_resolver) {
                                    this.varResolver = p_resolver;
                                };
                                MathExpressionEngine.decimalSeparator = '.';
                                MathExpressionEngine.minusSign = '-';
                                return MathExpressionEngine;
                            })();
                            impl.MathExpressionEngine = MathExpressionEngine;
                            var MathExpressionTokenizer = (function () {
                                function MathExpressionTokenizer(input) {
                                    this.pos = 0;
                                    this.input = input.trim();
                                }
                                MathExpressionTokenizer.prototype.hasNext = function () {
                                    return (this.pos < this.input.length);
                                };
                                MathExpressionTokenizer.prototype.peekNextChar = function () {
                                    if (this.pos < (this.input.length - 1)) {
                                        return this.input.charAt(this.pos + 1);
                                    }
                                    else {
                                        return '\0';
                                    }
                                };
                                MathExpressionTokenizer.prototype.next = function () {
                                    var token = new java.lang.StringBuilder();
                                    if (this.pos >= this.input.length) {
                                        return this.previousToken = null;
                                    }
                                    var ch = this.input.charAt(this.pos);
                                    while (org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isWhitespace(ch) && this.pos < this.input.length) {
                                        ch = this.input.charAt(++this.pos);
                                    }
                                    if (org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isDigit(ch)) {
                                        while ((org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isDigit(ch) || ch == org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.decimalSeparator) && (this.pos < this.input.length)) {
                                            token.append(this.input.charAt(this.pos++));
                                            ch = this.pos == this.input.length ? '\0' : this.input.charAt(this.pos);
                                        }
                                    }
                                    else {
                                        if (ch == org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.minusSign && org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isDigit(this.peekNextChar()) && (org.kevoree.modeling.util.PrimitiveHelper.equals("(", this.previousToken) || org.kevoree.modeling.util.PrimitiveHelper.equals(",", this.previousToken) || this.previousToken == null || org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.contains(this.previousToken))) {
                                            token.append(org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.minusSign);
                                            this.pos++;
                                            token.append(this.next());
                                        }
                                        else {
                                            if (org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isLetter(ch) || (ch == '_')) {
                                                while ((org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isLetter(ch) || org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isDigit(ch) || (ch == '_')) && (this.pos < this.input.length)) {
                                                    token.append(this.input.charAt(this.pos++));
                                                    ch = this.pos == this.input.length ? '\0' : this.input.charAt(this.pos);
                                                }
                                            }
                                            else {
                                                if (ch == '(' || ch == ')' || ch == ',') {
                                                    token.append(ch);
                                                    this.pos++;
                                                }
                                                else {
                                                    while (!org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isLetter(ch) && !org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isDigit(ch) && ch != '_' && !org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.isWhitespace(ch) && ch != '(' && ch != ')' && ch != ',' && (this.pos < this.input.length)) {
                                                        token.append(this.input.charAt(this.pos));
                                                        this.pos++;
                                                        ch = this.pos == this.input.length ? '\0' : this.input.charAt(this.pos);
                                                        if (ch == org.kevoree.modeling.util.maths.expression.impl.MathExpressionEngine.minusSign) {
                                                            break;
                                                        }
                                                    }
                                                    if (!org.kevoree.modeling.util.maths.expression.impl.MathEntities.getINSTANCE().operators.contains(token.toString())) {
                                                        throw new Error("Unknown operator '" + token + "' at position " + (this.pos - token.length + 1));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    return this.previousToken = token.toString();
                                };
                                MathExpressionTokenizer.prototype.getPos = function () {
                                    return this.pos;
                                };
                                return MathExpressionTokenizer;
                            })();
                            impl.MathExpressionTokenizer = MathExpressionTokenizer;
                            var MathFreeToken = (function () {
                                function MathFreeToken(content) {
                                    this._content = content;
                                }
                                MathFreeToken.prototype.content = function () {
                                    return this._content;
                                };
                                MathFreeToken.prototype.type = function () {
                                    return 3;
                                };
                                MathFreeToken.prototype.type2 = function () {
                                    return 0;
                                };
                                return MathFreeToken;
                            })();
                            impl.MathFreeToken = MathFreeToken;
                            var MathFunction = (function () {
                                function MathFunction(name, numParams) {
                                    this.name = name.toUpperCase();
                                    this.numParams = numParams;
                                }
                                MathFunction.prototype.getName = function () {
                                    return this.name;
                                };
                                MathFunction.prototype.getNumParams = function () {
                                    return this.numParams;
                                };
                                MathFunction.prototype.eval = function (p) {
                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "NOT")) {
                                        return (p[0] == 0) ? 1 : 0;
                                    }
                                    else {
                                        if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "IF")) {
                                            return !(p[0] == 0) ? p[1] : p[2];
                                        }
                                        else {
                                            if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "RAND")) {
                                                return Math.random();
                                            }
                                            else {
                                                if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "SIN")) {
                                                    return Math.sin(p[0]);
                                                }
                                                else {
                                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "COS")) {
                                                        return Math.cos(p[0]);
                                                    }
                                                    else {
                                                        if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "TAN")) {
                                                            return Math.tan(p[0]);
                                                        }
                                                        else {
                                                            if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "ASIN")) {
                                                                return Math.asin(p[0]);
                                                            }
                                                            else {
                                                                if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "ACOS")) {
                                                                    return Math.acos(p[0]);
                                                                }
                                                                else {
                                                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "ATAN")) {
                                                                        return Math.atan(p[0]);
                                                                    }
                                                                    else {
                                                                        if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "MAX")) {
                                                                            return p[0] > p[1] ? p[0] : p[1];
                                                                        }
                                                                        else {
                                                                            if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "MIN")) {
                                                                                return p[0] < p[1] ? p[0] : p[1];
                                                                            }
                                                                            else {
                                                                                if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "ABS")) {
                                                                                    return Math.abs(p[0]);
                                                                                }
                                                                                else {
                                                                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "LOG")) {
                                                                                        return Math.log(p[0]);
                                                                                    }
                                                                                    else {
                                                                                        if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "ROUND")) {
                                                                                            var factor = Math.pow(10, p[1]);
                                                                                            var value = p[0] * factor;
                                                                                            var tmp = Math.round(value);
                                                                                            return tmp / factor;
                                                                                        }
                                                                                        else {
                                                                                            if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "FLOOR")) {
                                                                                                return Math.floor(p[0]);
                                                                                            }
                                                                                            else {
                                                                                                if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "CEILING")) {
                                                                                                    return Math.ceil(p[0]);
                                                                                                }
                                                                                                else {
                                                                                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "SQRT")) {
                                                                                                        return Math.sqrt(p[0]);
                                                                                                    }
                                                                                                    else {
                                                                                                        if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "SECONDS")) {
                                                                                                            return this.date_to_seconds(p[0]);
                                                                                                        }
                                                                                                        else {
                                                                                                            if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "MINUTES")) {
                                                                                                                return this.date_to_minutes(p[0]);
                                                                                                            }
                                                                                                            else {
                                                                                                                if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "HOURS")) {
                                                                                                                    return this.date_to_hours(p[0]);
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "DAY")) {
                                                                                                                        return this.date_to_days(p[0]);
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "MONTH")) {
                                                                                                                            return this.date_to_months(p[0]);
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "YEAR")) {
                                                                                                                                return this.date_to_year(p[0]);
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.name, "DAYOFWEEK")) {
                                                                                                                                    return this.date_to_dayofweek(p[0]);
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    return 0;
                                };
                                MathFunction.prototype.date_to_seconds = function (value) {
                                    var date = new Date(value);
                                    return date.getSeconds();
                                };
                                MathFunction.prototype.date_to_minutes = function (value) {
                                    var date = new Date(value);
                                    return date.getMinutes();
                                };
                                MathFunction.prototype.date_to_hours = function (value) {
                                    var date = new Date(value);
                                    return date.getHours();
                                };
                                MathFunction.prototype.date_to_days = function (value) {
                                    var date = new Date(value);
                                    return date.getDate();
                                };
                                MathFunction.prototype.date_to_months = function (value) {
                                    var date = new Date(value);
                                    return date.getMonth();
                                };
                                MathFunction.prototype.date_to_year = function (value) {
                                    var date = new Date(value);
                                    return date.getFullYear();
                                };
                                MathFunction.prototype.date_to_dayofweek = function (value) {
                                    var date = new Date(value);
                                    return date.getDay();
                                };
                                MathFunction.prototype.type = function () {
                                    return 1;
                                };
                                MathFunction.prototype.type2 = function () {
                                    return 0;
                                };
                                return MathFunction;
                            })();
                            impl.MathFunction = MathFunction;
                            var MathOperation = (function () {
                                function MathOperation(oper, precedence, leftAssoc) {
                                    this.oper = oper;
                                    this.precedence = precedence;
                                    this.leftAssoc = leftAssoc;
                                }
                                MathOperation.prototype.getOper = function () {
                                    return this.oper;
                                };
                                MathOperation.prototype.getPrecedence = function () {
                                    return this.precedence;
                                };
                                MathOperation.prototype.isLeftAssoc = function () {
                                    return this.leftAssoc;
                                };
                                MathOperation.prototype.eval = function (v1, v2) {
                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.oper, "+")) {
                                        return v1 + v2;
                                    }
                                    else {
                                        if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.oper, "-")) {
                                            return v1 - v2;
                                        }
                                        else {
                                            if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.oper, "*")) {
                                                return v1 * v2;
                                            }
                                            else {
                                                if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.oper, "/")) {
                                                    return v1 / v2;
                                                }
                                                else {
                                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.oper, "%")) {
                                                        return v1 % v2;
                                                    }
                                                    else {
                                                        if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.oper, "^")) {
                                                            return Math.pow(v1, v2);
                                                        }
                                                        else {
                                                            if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.oper, "&&")) {
                                                                var b1 = !(v1 == 0);
                                                                var b2 = !(v2 == 0);
                                                                return b1 && b2 ? 1 : 0;
                                                            }
                                                            else {
                                                                if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.oper, "||")) {
                                                                    var b1 = !(v1 == 0);
                                                                    var b2 = !(v2 == 0);
                                                                    return b1 || b2 ? 1 : 0;
                                                                }
                                                                else {
                                                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.oper, ">")) {
                                                                        return v1 > v2 ? 1 : 0;
                                                                    }
                                                                    else {
                                                                        if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.oper, ">=")) {
                                                                            return v1 >= v2 ? 1 : 0;
                                                                        }
                                                                        else {
                                                                            if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.oper, "<")) {
                                                                                return v1 < v2 ? 1 : 0;
                                                                            }
                                                                            else {
                                                                                if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.oper, "<=")) {
                                                                                    return v1 <= v2 ? 1 : 0;
                                                                                }
                                                                                else {
                                                                                    if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.oper, "==")) {
                                                                                        return v1 == v2 ? 1 : 0;
                                                                                    }
                                                                                    else {
                                                                                        if (org.kevoree.modeling.util.PrimitiveHelper.equals(this.oper, "!=")) {
                                                                                            return v1 != v2 ? 1 : 0;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    return 0;
                                };
                                MathOperation.prototype.type = function () {
                                    return 0;
                                };
                                MathOperation.prototype.type2 = function () {
                                    return 0;
                                };
                                return MathOperation;
                            })();
                            impl.MathOperation = MathOperation;
                        })(impl = expression_1.impl || (expression_1.impl = {}));
                    })(expression = maths.expression || (maths.expression = {}));
                    var matrix;
                    (function (matrix_1) {
                        var CommonOps = (function () {
                            function CommonOps() {
                            }
                            CommonOps.mult = function (a, b, c) {
                                if (b.numCols == 1) {
                                    org.kevoree.modeling.util.maths.matrix.MatrixVectorMult.mult(a, b, c);
                                }
                                else {
                                    if (b.numCols >= CommonOps.MULT_COLUMN_SWITCH) {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.mult_reorder(a, b, c);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.mult_small(a, b, c);
                                    }
                                }
                            };
                            CommonOps.memset = function (data, val) {
                                for (var i = 0; i < data.length; i++) {
                                    data[i] = val;
                                }
                            };
                            CommonOps.multAddalpha = function (alpha, a, b, c) {
                                if (b.numCols >= CommonOps.MULT_COLUMN_SWITCH) {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multAdd_reorderalpha(alpha, a, b, c);
                                }
                                else {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multAdd_smallalpha(alpha, a, b, c);
                                }
                            };
                            CommonOps.multAlphaBetaTransA = function (alpha, a, b, c, beta) {
                                c.scale(beta);
                                if (a.numCols >= CommonOps.MULT_COLUMN_SWITCH || b.numCols >= CommonOps.MULT_COLUMN_SWITCH) {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multAlphaTransA_reorder(alpha, a, b, c);
                                }
                                else {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multAlphaTransA_small(alpha, a, b, c);
                                }
                            };
                            CommonOps.multTransA = function (a, b, c) {
                                if (b.numCols == 1) {
                                    if (a.numCols >= CommonOps.MULT_COLUMN_SWITCH) {
                                        org.kevoree.modeling.util.maths.matrix.MatrixVectorMult.multTransA_reorder(a, b, c);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.MatrixVectorMult.multTransA_small(a, b, c);
                                    }
                                }
                                else {
                                    if (a.numCols >= CommonOps.MULT_COLUMN_SWITCH || b.numCols >= CommonOps.MULT_COLUMN_SWITCH) {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransA_reorder(a, b, c);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransA_small(a, b, c);
                                    }
                                }
                            };
                            CommonOps.multTransB = function (a, b, c) {
                                if (b.numRows == 1) {
                                    org.kevoree.modeling.util.maths.matrix.MatrixVectorMult.mult(a, b, c);
                                }
                                else {
                                    org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransB(a, b, c);
                                }
                            };
                            CommonOps.subvector = function (A, rowA, colA, length, row, offsetV, v) {
                                if (row) {
                                    for (var i = 0; i < length; i++) {
                                        v.setValueAtIndex(offsetV + i, A.get(rowA, colA + i));
                                    }
                                }
                                else {
                                    for (var i = 0; i < length; i++) {
                                        v.setValueAtIndex(offsetV + i, A.get(rowA + i, colA));
                                    }
                                }
                            };
                            CommonOps.abs = function (matrix) {
                                for (var i = 0; i < matrix.numRows(); i++) {
                                    for (var j = 0; j < matrix.numCols(); j++) {
                                        matrix.setValue2D(i, j, Math.abs(matrix.getValue2D(i, j)));
                                    }
                                }
                                return matrix;
                            };
                            CommonOps.trace = function (a) {
                                var N = Math.min(a.numRows, a.numCols);
                                var sum = 0;
                                var index = 0;
                                for (var i = 0; i < N; i++) {
                                    sum += a.getValueAtIndex(index);
                                    index += 1 + a.numCols;
                                }
                                return sum;
                            };
                            CommonOps.transposeMatrix = function (A, A_tran) {
                                if (A_tran == null) {
                                    A_tran = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(A.numCols, A.numRows);
                                }
                                else {
                                    if (A.numRows != A_tran.numCols || A.numCols != A_tran.numRows) {
                                        throw new Error("Incompatible matrix dimensions");
                                    }
                                }
                                if (A.numRows > CommonOps.TRANSPOSE_SWITCH && A.numCols > CommonOps.TRANSPOSE_SWITCH) {
                                    org.kevoree.modeling.util.maths.matrix.TransposeAlgs.block(A, A_tran, CommonOps.BLOCK_WIDTH);
                                }
                                else {
                                    org.kevoree.modeling.util.maths.matrix.TransposeAlgs.standard(A, A_tran);
                                }
                                return A_tran;
                            };
                            CommonOps.transpose = function (mat) {
                                if (mat.numCols == mat.numRows) {
                                    org.kevoree.modeling.util.maths.matrix.TransposeAlgs.square(mat);
                                }
                                else {
                                    var b = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(mat.numCols, mat.numRows);
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.transposeMatrix(mat, b);
                                    mat.setMatrix(b);
                                }
                            };
                            CommonOps.det = function (mat) {
                                var numCol = mat.getNumCols();
                                var numRow = mat.getNumRows();
                                if (numCol != numRow) {
                                    throw new Error("Must be a square matrix.");
                                }
                                else {
                                    if (numCol <= 1) {
                                        return mat.getValueAtIndex(0);
                                    }
                                    else {
                                        var alg = new org.kevoree.modeling.util.maths.matrix.solvers.LUDecompositionAlt_D64();
                                        if (!alg.decompose(mat)) {
                                            return 0.0;
                                        }
                                        return alg.computeDeterminant();
                                    }
                                }
                            };
                            CommonOps.invert = function (mat, result) {
                                var alg = new org.kevoree.modeling.util.maths.matrix.solvers.LUDecompositionAlt_D64();
                                var solver = new org.kevoree.modeling.util.maths.matrix.solvers.LinearSolverLu_D64(alg);
                                if (solver.modifiesA()) {
                                    mat = mat.copy();
                                }
                                if (!solver.setA(mat)) {
                                    return false;
                                }
                                solver.invert(result);
                                return true;
                            };
                            CommonOps.copyMatrix = function (matA, ejmlmatA) {
                                for (var i = 0; i < matA.rows(); i++) {
                                    for (var j = 0; j < matA.columns(); j++) {
                                        ejmlmatA.setValue2D(i, j, matA.get(i, j));
                                    }
                                }
                            };
                            CommonOps.copyMatrixDense = function (matA, ejmlmatA) {
                                for (var i = 0; i < matA.rows(); i++) {
                                    for (var j = 0; j < matA.columns(); j++) {
                                        ejmlmatA.set(i, j, matA.get(i, j));
                                    }
                                }
                            };
                            CommonOps.extractImpl = function (src, srcY0, srcX0, dst, dstY0, dstX0, numRows, numCols) {
                                for (var y = 0; y < numRows; y++) {
                                    var indexSrc = src.getIndex(y + srcY0, srcX0);
                                    var indexDst = dst.getIndex(y + dstY0, dstX0);
                                    java.lang.System.arraycopy(src.data, indexSrc, dst.data, indexDst, numCols);
                                }
                            };
                            CommonOps.extractInsert = function (src, srcY0, srcY1, srcX0, srcX1, dst, dstY0, dstX0) {
                                var w = srcX1 - srcX0;
                                var h = srcY1 - srcY0;
                                org.kevoree.modeling.util.maths.matrix.CommonOps.extractImpl(src, srcY0, srcX0, dst, dstY0, dstX0, h, w);
                            };
                            CommonOps.insert = function (src, dest, destY0, destX0) {
                                org.kevoree.modeling.util.maths.matrix.CommonOps.extractInsert(src, 0, src.getNumRows(), 0, src.getNumCols(), dest, destY0, destX0);
                            };
                            CommonOps.extract4Int = function (src, srcY0, srcY1, srcX0, srcX1) {
                                if (srcY1 <= srcY0 || srcY0 < 0 || srcY1 > src.numRows) {
                                    throw new Error("srcY1 <= srcY0 || srcY0 < 0 || srcY1 > src.getNumRows");
                                }
                                if (srcX1 <= srcX0 || srcX0 < 0 || srcX1 > src.numCols) {
                                    throw new Error("srcX1 <= srcX0 || srcX0 < 0 || srcX1 > src.getNumCols");
                                }
                                var w = srcX1 - srcX0;
                                var h = srcY1 - srcY0;
                                var dst = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(h, w);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.extractImpl(src, srcY0, srcX0, dst, 0, 0, h, w);
                                return dst;
                            };
                            CommonOps.columnsToVector = function (A, v) {
                                var ret;
                                if (v == null || v.length < A.numCols) {
                                    ret = new Array();
                                }
                                else {
                                    ret = v;
                                }
                                for (var i = 0; i < ret.length; i++) {
                                    if (ret[i] == null) {
                                        ret[i] = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(A.numRows, 1);
                                    }
                                    else {
                                        ret[i].reshapeBoolean(A.numRows, 1, false);
                                    }
                                    var u = ret[i];
                                    for (var j = 0; j < A.numRows; j++) {
                                        u.set(j, 0, A.get(j, i));
                                    }
                                }
                                return ret;
                            };
                            CommonOps.rowsToVector = function (A, v) {
                                var ret;
                                if (v == null || v.length < A.numRows) {
                                    ret = new Array();
                                }
                                else {
                                    ret = v;
                                }
                                for (var i = 0; i < ret.length; i++) {
                                    if (ret[i] == null) {
                                        ret[i] = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(A.numCols, 1);
                                    }
                                    else {
                                        ret[i].reshapeBoolean(A.numCols, 1, false);
                                    }
                                    var u = ret[i];
                                    for (var j = 0; j < A.numCols; j++) {
                                        u.set(j, 0, A.get(i, j));
                                    }
                                }
                                return ret;
                            };
                            CommonOps.setIdentity = function (mat) {
                                var width = mat.numRows < mat.numCols ? mat.numRows : mat.numCols;
                                java.util.Arrays.fill(mat.data, 0, mat.getNumElements(), 0);
                                var index = 0;
                                for (var i = 0; i < width; i++) {
                                    mat.data[index] = 1;
                                    index += mat.numCols + 1;
                                }
                            };
                            CommonOps.identity1D = function (width) {
                                var ret = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(width, width);
                                for (var i = 0; i < width; i++) {
                                    ret.set(i, i, 1.0);
                                }
                                return ret;
                            };
                            CommonOps.identity = function (numRows, numCols) {
                                var ret = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(numRows, numCols);
                                var small = numRows < numCols ? numRows : numCols;
                                for (var i = 0; i < small; i++) {
                                    ret.set(i, i, 1.0);
                                }
                                return ret;
                            };
                            CommonOps.diag = function (diagEl) {
                                return org.kevoree.modeling.util.maths.matrix.CommonOps.diagMatrix(null, diagEl.length, diagEl);
                            };
                            CommonOps.diagMatrix = function (ret, width, diagEl) {
                                if (ret == null) {
                                    ret = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(width, width);
                                }
                                else {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.fill(ret, 0);
                                }
                                for (var i = 0; i < width; i++) {
                                    ret.set(i, i, diagEl[i]);
                                }
                                return ret;
                            };
                            CommonOps.kron = function (A, B, C) {
                                var numColsC = A.numCols * B.numCols;
                                var numRowsC = A.numRows * B.numRows;
                                for (var i = 0; i < A.numRows; i++) {
                                    for (var j = 0; j < A.numCols; j++) {
                                        var a = A.get(i, j);
                                        for (var rowB = 0; rowB < B.numRows; rowB++) {
                                            for (var colB = 0; colB < B.numCols; colB++) {
                                                var val = a * B.get(rowB, colB);
                                                C.set(i * B.numRows + rowB, j * B.numCols + colB, val);
                                            }
                                        }
                                    }
                                }
                            };
                            CommonOps.extractDiag = function (src, dst) {
                                var N = Math.min(src.numRows, src.numCols);
                                if (!org.kevoree.modeling.util.maths.matrix.MatrixFeatures.isVector(dst)) {
                                    throw new Error("Expected a vector for dst.");
                                }
                                for (var i = 0; i < N; i++) {
                                    dst.setValueAtIndex(i, src.get(i, i));
                                }
                            };
                            CommonOps.extractRow = function (a, row, out) {
                                if (out == null) {
                                    out = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(1, a.numCols);
                                }
                                java.lang.System.arraycopy(a.data, a.getIndex(row, 0), out.data, 0, a.numCols);
                                return out;
                            };
                            CommonOps.extractColumn = function (a, column, out) {
                                if (out == null) {
                                    out = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(a.numRows, 1);
                                }
                                var index = column;
                                for (var i = 0; i < a.numRows; i++) {
                                    out.data[i] = a.data[index];
                                    index += a.numCols;
                                }
                                return out;
                            };
                            CommonOps.elementMax = function (a) {
                                var size = a.getNumElements();
                                var max = a.getValueAtIndex(0);
                                for (var i = 1; i < size; i++) {
                                    var val = a.getValueAtIndex(i);
                                    if (val >= max) {
                                        max = val;
                                    }
                                }
                                return max;
                            };
                            CommonOps.elementMaxAbs = function (a) {
                                var size = a.getNumElements();
                                var max = 0;
                                for (var i = 0; i < size; i++) {
                                    var val = Math.abs(a.getValueAtIndex(i));
                                    if (val > max) {
                                        max = val;
                                    }
                                }
                                return max;
                            };
                            CommonOps.elementMult = function (a, b, c) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    c.setValueAtIndex(i, a.getValueAtIndex(i) * b.getValueAtIndex(i));
                                }
                            };
                            CommonOps.elementSum = function (mat) {
                                var total = 0;
                                var size = mat.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    total += mat.getValueAtIndex(i);
                                }
                                return total;
                            };
                            CommonOps.addEquals = function (a, b) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    a.plus(i, b.getValueAtIndex(i));
                                }
                            };
                            CommonOps.addEqualsbeta = function (a, beta, b) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    a.plus(i, beta * b.getValueAtIndex(i));
                                }
                            };
                            CommonOps.add = function (a, b, c) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    c.setValueAtIndex(i, a.getValueAtIndex(i) + b.getValueAtIndex(i));
                                }
                            };
                            CommonOps.subtract3mat = function (a, b, c) {
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    c.data[i] = a.data[i] - b.data[i];
                                }
                            };
                            CommonOps.scale = function (alpha, a) {
                                var size = a.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    a.data[i] *= alpha;
                                }
                            };
                            CommonOps.changeSign = function (a) {
                                var size = a.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    a.data[i] = -a.data[i];
                                }
                            };
                            CommonOps.fill = function (a, value) {
                                java.util.Arrays.fill(a.data, 0, a.getNumElements(), value);
                            };
                            CommonOps.normalizeF = function (A) {
                                var val = org.kevoree.modeling.util.maths.matrix.CommonOps.normF(A);
                                if (val == 0) {
                                    return;
                                }
                                var size = A.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    A.div(i, val);
                                }
                            };
                            CommonOps.normF = function (a) {
                                var total = 0;
                                var scale = org.kevoree.modeling.util.maths.matrix.CommonOps.elementMaxAbs(a);
                                if (scale == 0.0) {
                                    return 0.0;
                                }
                                var size = a.getNumElements();
                                for (var i = 0; i < size; i++) {
                                    var val = a.getValueAtIndex(i) / scale;
                                    total += val * val;
                                }
                                return scale * Math.sqrt(total);
                            };
                            CommonOps.extract6M = function (src, srcY0, srcY1, srcX0, srcX1, dst, dstY0, dstX0) {
                                var w = srcX1 - srcX0;
                                var h = srcY1 - srcY0;
                                org.kevoree.modeling.util.maths.matrix.CommonOps.extractImpl(src, srcY0, srcX0, dst, dstY0, dstX0, h, w);
                            };
                            CommonOps.multAlphaBeta = function (alpha, matrix, matrix1, matrix2, beta) {
                                matrix2.scale(beta);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.multAddalpha(alpha, matrix, matrix1, matrix2);
                            };
                            CommonOps.BLOCK_WIDTH = 60;
                            CommonOps.TRANSPOSE_SWITCH = 375;
                            CommonOps.MULT_COLUMN_SWITCH = 15;
                            CommonOps.EPS = Math.pow(2, -52);
                            return CommonOps;
                        })();
                        matrix_1.CommonOps = CommonOps;
                        var Complex64F = (function () {
                            function Complex64F() {
                            }
                            Complex64F.prototype.getReal = function () {
                                return this.real;
                            };
                            Complex64F.prototype.getMagnitude = function () {
                                return Math.sqrt(this.real * this.real + this.imaginary * this.imaginary);
                            };
                            Complex64F.prototype.getMagnitude2 = function () {
                                return this.real * this.real + this.imaginary * this.imaginary;
                            };
                            Complex64F.prototype.setReal = function (real) {
                                this.real = real;
                            };
                            Complex64F.prototype.setValues = function (real, imaginary) {
                                this.real = real;
                                this.imaginary = imaginary;
                            };
                            Complex64F.prototype.isReal = function () {
                                return this.imaginary == 0.0;
                            };
                            Complex64F.prototype.toString = function () {
                                if (this.imaginary == 0) {
                                    return "" + this.real;
                                }
                                else {
                                    return this.real + " " + this.imaginary + "i";
                                }
                            };
                            Complex64F.prototype.times = function (a) {
                                var ret = new org.kevoree.modeling.util.maths.matrix.Complex64F();
                                org.kevoree.modeling.util.maths.matrix.ComplexMath64F.multiply(this, a, ret);
                                return ret;
                            };
                            return Complex64F;
                        })();
                        matrix_1.Complex64F = Complex64F;
                        var ComplexMath64F = (function () {
                            function ComplexMath64F() {
                            }
                            ComplexMath64F.conj = function (input, conj) {
                                conj.real = input.real;
                                conj.imaginary = -input.imaginary;
                            };
                            ComplexMath64F.plus = function (a, b, result) {
                                result.real = a.real + b.real;
                                result.imaginary = a.imaginary + b.imaginary;
                            };
                            ComplexMath64F.minus = function (a, b, result) {
                                result.real = a.real - b.real;
                                result.imaginary = a.imaginary - b.imaginary;
                            };
                            ComplexMath64F.multiply = function (a, b, result) {
                                result.real = a.real * b.real - a.imaginary * b.imaginary;
                                result.imaginary = a.real * b.imaginary + a.imaginary * b.real;
                            };
                            ComplexMath64F.divide = function (a, b, result) {
                                var norm = b.getMagnitude2();
                                result.real = (a.real * b.real + a.imaginary * b.imaginary) / norm;
                                result.imaginary = (a.imaginary * b.real - a.real * b.imaginary) / norm;
                            };
                            ComplexMath64F.root = function (a, N, k, result) {
                                var r = a.getMagnitude();
                                var theta = Math.atan2(a.imaginary, a.real);
                                r = Math.pow(r, 1.0 / N);
                                theta = (theta + 2.0 * k * Math.PI) / N;
                                result.real = r * Math.cos(theta);
                                result.imaginary = r * Math.sin(theta);
                            };
                            ComplexMath64F.sqrt = function (input, root) {
                                var r = input.getMagnitude();
                                var a = input.real;
                                root.real = Math.sqrt((r + a) / 2.0);
                                root.imaginary = Math.sqrt((r - a) / 2.0);
                                if (input.imaginary < 0) {
                                    root.imaginary = -root.imaginary;
                                }
                            };
                            return ComplexMath64F;
                        })();
                        matrix_1.ComplexMath64F = ComplexMath64F;
                        var DenseMatrix64F = (function () {
                            function DenseMatrix64F(numRows, numCols) {
                                this.data = new Float64Array(numRows * numCols);
                                this.numRows = numRows;
                                this.numCols = numCols;
                                for (var i = 0; i < numCols * numRows; i++) {
                                    this.data[i] = 0;
                                }
                            }
                            DenseMatrix64F.prototype.constructorDenseMatrix = function (orig) {
                                var result = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(orig.numRows, orig.numCols);
                                java.lang.System.arraycopy(orig.data, 0, result.data, 0, orig.getNumElements());
                                return result;
                            };
                            DenseMatrix64F.setIdentity = function (mat) {
                                var width = mat.numRows < mat.numCols ? mat.numRows : mat.numCols;
                                java.util.Arrays.fill(mat.data, 0, mat.getNumElements(), 0);
                                var index = 0;
                                for (var i = 0; i < width; i++) {
                                    mat.data[index] = 1;
                                    index += mat.numCols + 1;
                                }
                            };
                            DenseMatrix64F.widentity = function (width) {
                                var ret = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(width, width);
                                for (var i = 0; i < width; i++) {
                                    ret.cset(i, i, 1.0);
                                }
                                return ret;
                            };
                            DenseMatrix64F.identity = function (numRows, numCols) {
                                var ret = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(numRows, numCols);
                                var small = numRows < numCols ? numRows : numCols;
                                for (var i = 0; i < small; i++) {
                                    ret.cset(i, i, 1.0);
                                }
                                return ret;
                            };
                            DenseMatrix64F.prototype.zero = function () {
                                java.util.Arrays.fill(this.data, 0, this.getNumElements(), 0.0);
                            };
                            DenseMatrix64F.prototype.copy = function () {
                                return this.constructorDenseMatrix(this);
                            };
                            DenseMatrix64F.fill = function (a, value) {
                                java.util.Arrays.fill(a.data, 0, a.getNumElements(), value);
                            };
                            DenseMatrix64F.prototype.reshapeBoolean = function (numRows, numCols, saveValues) {
                                if (this.data.length < numRows * numCols) {
                                    var d = new Float64Array(numRows * numCols);
                                    if (saveValues) {
                                        java.lang.System.arraycopy(this.data, 0, d, 0, this.getNumElements());
                                    }
                                    this.data = d;
                                }
                                this.numRows = numRows;
                                this.numCols = numCols;
                            };
                            DenseMatrix64F.prototype.cset = function (row, col, value) {
                                this.data[row * this.numCols + col] = value;
                            };
                            DenseMatrix64F.prototype.add = function (row, col, value) {
                                this.data[row * this.numCols + col] += value;
                            };
                            DenseMatrix64F.prototype.plus = function (index, val) {
                                return this.data[index] += val;
                            };
                            DenseMatrix64F.prototype.scale = function (value) {
                                for (var i = 0; i < this.data.length; i++) {
                                    this.data[i] *= value;
                                }
                                return this;
                            };
                            DenseMatrix64F.prototype.minus = function (index, val) {
                                return this.data[index] -= val;
                            };
                            DenseMatrix64F.prototype.times = function (index, val) {
                                return this.data[index] *= val;
                            };
                            DenseMatrix64F.prototype.div = function (index, val) {
                                return this.data[index] /= val;
                            };
                            DenseMatrix64F.prototype.reshape = function (numRows, numCols) {
                                this.reshapeBoolean(numRows, numCols, false);
                            };
                            DenseMatrix64F.prototype.getNumRows = function () {
                                return this.numRows;
                            };
                            DenseMatrix64F.prototype.getNumCols = function () {
                                return this.numCols;
                            };
                            DenseMatrix64F.prototype.getData = function () {
                                return this.data;
                            };
                            DenseMatrix64F.prototype.get = function (row, col) {
                                return this.data[row * this.numCols + col];
                            };
                            DenseMatrix64F.prototype.getNumElements = function () {
                                return this.numRows * this.numCols;
                            };
                            DenseMatrix64F.prototype.getIndex = function (row, col) {
                                return row * this.numCols + col;
                            };
                            DenseMatrix64F.prototype.getValueAtIndex = function (index) {
                                return this.data[index];
                            };
                            DenseMatrix64F.prototype.setValueAtIndex = function (index, val) {
                                return this.data[index] = val;
                            };
                            DenseMatrix64F.prototype.setNumRows = function (numRows) {
                                this.numRows = numRows;
                            };
                            DenseMatrix64F.prototype.setNumCols = function (numCols) {
                                this.numCols = numCols;
                            };
                            DenseMatrix64F.prototype.setData = function (data) {
                                this.data = data;
                            };
                            DenseMatrix64F.prototype.setMatrix = function (b) {
                                this.reshape(b.numRows, b.numCols);
                                var dataLength = b.getNumElements();
                                java.lang.System.arraycopy(b.data, 0, this.data, 0, dataLength);
                            };
                            DenseMatrix64F.prototype.set = function (row, col, value) {
                                this.data[row * this.numCols + col] = value;
                            };
                            DenseMatrix64F.MULT_COLUMN_SWITCH = 15;
                            return DenseMatrix64F;
                        })();
                        matrix_1.DenseMatrix64F = DenseMatrix64F;
                        var MatrixFeatures = (function () {
                            function MatrixFeatures() {
                            }
                            MatrixFeatures.isVector = function (mat) {
                                return (mat.getNumCols() == 1 || mat.getNumRows() == 1);
                            };
                            MatrixFeatures.isSymmetricDouble = function (m, tol) {
                                if (m.numCols != m.numRows) {
                                    return false;
                                }
                                var max = org.kevoree.modeling.util.maths.matrix.CommonOps.elementMaxAbs(m);
                                for (var i = 0; i < m.numRows; i++) {
                                    for (var j = 0; j < i; j++) {
                                        var a = m.get(i, j) / max;
                                        var b = m.get(j, i) / max;
                                        var diff = Math.abs(a - b);
                                        if (!(diff <= tol)) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            };
                            MatrixFeatures.isIdentical = function (a, b, tol) {
                                if (a.numRows != b.numRows || a.numCols != b.numCols) {
                                    return false;
                                }
                                if (tol < 0) {
                                    throw new Error("Tolerance must be greater than or equal to zero.");
                                }
                                var length = a.getNumElements();
                                for (var i = 0; i < length; i++) {
                                    var valA = a.getValueAtIndex(i);
                                    var valB = b.getValueAtIndex(i);
                                    var diff = Math.abs(valA - valB);
                                    if (tol >= diff) {
                                        continue;
                                    }
                                    return false;
                                }
                                return true;
                            };
                            return MatrixFeatures;
                        })();
                        matrix_1.MatrixFeatures = MatrixFeatures;
                        var MatrixMatrixMult = (function () {
                            function MatrixMatrixMult() {
                            }
                            MatrixMatrixMult.multTransA_smallMV = function (A, B, C) {
                                var cIndex = 0;
                                for (var i = 0; i < A.numCols; i++) {
                                    var total = 0.0;
                                    var indexA = i;
                                    for (var j = 0; j < A.numRows; j++) {
                                        total += A.getValueAtIndex(indexA) * B.getValueAtIndex(j);
                                        indexA += A.numCols;
                                    }
                                    C.setValueAtIndex(cIndex++, total);
                                }
                            };
                            MatrixMatrixMult.multTransA_reorderMV = function (A, B, C) {
                                if (A.numRows == 0) {
                                    org.kevoree.modeling.util.maths.matrix.DenseMatrix64F.fill(C, 0);
                                    return;
                                }
                                var B_val = B.getValueAtIndex(0);
                                for (var i = 0; i < A.numCols; i++) {
                                    C.setValueAtIndex(i, A.getValueAtIndex(i) * B_val);
                                }
                                var indexA = A.numCols;
                                for (var i = 1; i < A.numRows; i++) {
                                    B_val = B.getValueAtIndex(i);
                                    for (var j = 0; j < A.numCols; j++) {
                                        C.plus(j, A.getValueAtIndex(indexA++) * B_val);
                                    }
                                }
                            };
                            MatrixMatrixMult.multTransA_reorderMM = function (a, b, c) {
                                if (a.numCols == 0 || a.numRows == 0) {
                                    org.kevoree.modeling.util.maths.matrix.DenseMatrix64F.fill(c, 0);
                                    return;
                                }
                                var valA;
                                for (var i = 0; i < a.numCols; i++) {
                                    var indexC_start = i * c.numCols;
                                    valA = a.getValueAtIndex(i);
                                    var indexB = 0;
                                    var end = indexB + b.numCols;
                                    var indexC = indexC_start;
                                    while (indexB < end) {
                                        c.setValueAtIndex(indexC++, valA * b.getValueAtIndex(indexB++));
                                    }
                                    for (var k = 1; k < a.numRows; k++) {
                                        valA = a.get(k, i);
                                        end = indexB + b.numCols;
                                        indexC = indexC_start;
                                        while (indexB < end) {
                                            c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                        }
                                    }
                                }
                            };
                            MatrixMatrixMult.multTransA_smallMM = function (a, b, c) {
                                var cIndex = 0;
                                for (var i = 0; i < a.numCols; i++) {
                                    for (var j = 0; j < b.numCols; j++) {
                                        var indexA = i;
                                        var indexB = j;
                                        var end = indexB + b.numRows * b.numCols;
                                        var total = 0;
                                        for (; indexB < end; indexB += b.numCols) {
                                            total += a.getValueAtIndex(indexA) * b.getValueAtIndex(indexB);
                                            indexA += a.numCols;
                                        }
                                        c.setValueAtIndex(cIndex++, total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multTransA = function (a, b, c) {
                                if (b.numCols == 1) {
                                    if (a.numCols >= org.kevoree.modeling.util.maths.matrix.DenseMatrix64F.MULT_COLUMN_SWITCH) {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransA_reorderMV(a, b, c);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransA_smallMV(a, b, c);
                                    }
                                }
                                else {
                                    if (a.numCols >= org.kevoree.modeling.util.maths.matrix.DenseMatrix64F.MULT_COLUMN_SWITCH || b.numCols >= org.kevoree.modeling.util.maths.matrix.DenseMatrix64F.MULT_COLUMN_SWITCH) {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransA_reorderMM(a, b, c);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransA_smallMM(a, b, c);
                                    }
                                }
                            };
                            MatrixMatrixMult.mult_reorder = function (a, b, c) {
                                if (a.numCols == 0 || a.numRows == 0) {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.fill(c, 0);
                                    return;
                                }
                                var valA;
                                var indexCbase = 0;
                                var endOfKLoop = b.numRows * b.numCols;
                                for (var i = 0; i < a.numRows; i++) {
                                    var indexA = i * a.numCols;
                                    var indexB = 0;
                                    var indexC = indexCbase;
                                    var end = indexB + b.numCols;
                                    valA = a.getValueAtIndex(indexA++);
                                    while (indexB < end) {
                                        c.setValueAtIndex(indexC++, valA * b.getValueAtIndex(indexB++));
                                    }
                                    while (indexB != endOfKLoop) {
                                        indexC = indexCbase;
                                        end = indexB + b.numCols;
                                        valA = a.getValueAtIndex(indexA++);
                                        while (indexB < end) {
                                            c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                        }
                                    }
                                    indexCbase += c.numCols;
                                }
                            };
                            MatrixMatrixMult.mult_small = function (a, b, c) {
                                var aIndexStart = 0;
                                var cIndex = 0;
                                for (var i = 0; i < a.numRows; i++) {
                                    for (var j = 0; j < b.numCols; j++) {
                                        var total = 0;
                                        var indexA = aIndexStart;
                                        var indexB = j;
                                        var end = indexA + b.numRows;
                                        while (indexA < end) {
                                            total += a.getValueAtIndex(indexA++) * b.getValueAtIndex(indexB);
                                            indexB += b.numCols;
                                        }
                                        c.setValueAtIndex(cIndex++, total);
                                    }
                                    aIndexStart += a.numCols;
                                }
                            };
                            MatrixMatrixMult.multTransA_reorder = function (a, b, c) {
                                if (a.numCols == 0 || a.numRows == 0) {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.fill(c, 0);
                                    return;
                                }
                                var valA;
                                for (var i = 0; i < a.numCols; i++) {
                                    var indexC_start = i * c.numCols;
                                    valA = a.getValueAtIndex(i);
                                    var indexB = 0;
                                    var end = indexB + b.numCols;
                                    var indexC = indexC_start;
                                    while (indexB < end) {
                                        c.setValueAtIndex(indexC++, valA * b.getValueAtIndex(indexB++));
                                    }
                                    for (var k = 1; k < a.numRows; k++) {
                                        valA = a.get(k, i);
                                        end = indexB + b.numCols;
                                        indexC = indexC_start;
                                        while (indexB < end) {
                                            c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                        }
                                    }
                                }
                            };
                            MatrixMatrixMult.multTransA_small = function (a, b, c) {
                                var cIndex = 0;
                                for (var i = 0; i < a.numCols; i++) {
                                    for (var j = 0; j < b.numCols; j++) {
                                        var indexA = i;
                                        var indexB = j;
                                        var end = indexB + b.numRows * b.numCols;
                                        var total = 0.0;
                                        for (; indexB < end; indexB += b.numCols) {
                                            total += a.getValueAtIndex(indexA) * b.getValueAtIndex(indexB);
                                            indexA += a.numCols;
                                        }
                                        c.setValueAtIndex(cIndex++, total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multTransB = function (a, b, c) {
                                var cIndex = 0;
                                var aIndexStart = 0;
                                for (var xA = 0; xA < a.numRows; xA++) {
                                    var end = aIndexStart + b.numCols;
                                    var indexB = 0;
                                    for (var xB = 0; xB < b.numRows; xB++) {
                                        var indexA = aIndexStart;
                                        var total = 0;
                                        while (indexA < end) {
                                            total += a.getValueAtIndex(indexA++) * b.getValueAtIndex(indexB++);
                                        }
                                        c.setValueAtIndex(cIndex++, total);
                                    }
                                    aIndexStart += a.numCols;
                                }
                            };
                            MatrixMatrixMult.multAlphaTransA_reorder = function (alpha, a, b, c) {
                                if (a.numCols == 0 || a.numRows == 0) {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.fill(c, 0);
                                    return;
                                }
                                var valA;
                                for (var i = 0; i < a.numCols; i++) {
                                    var indexC_start = i * c.numCols;
                                    valA = alpha * a.getValueAtIndex(i);
                                    var indexB = 0;
                                    var end = indexB + b.numCols;
                                    var indexC = indexC_start;
                                    while (indexB < end) {
                                        c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                    }
                                    for (var k = 1; k < a.numRows; k++) {
                                        valA = alpha * a.get(k, i);
                                        end = indexB + b.numCols;
                                        indexC = indexC_start;
                                        while (indexB < end) {
                                            c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                        }
                                    }
                                }
                            };
                            MatrixMatrixMult.multAlphaTransA_small = function (alpha, a, b, c) {
                                var cIndex = 0;
                                for (var i = 0; i < a.numCols; i++) {
                                    for (var j = 0; j < b.numCols; j++) {
                                        var indexA = i;
                                        var indexB = j;
                                        var end = indexB + b.numRows * b.numCols;
                                        var total = 0;
                                        for (; indexB < end; indexB += b.numCols) {
                                            total += a.getValueAtIndex(indexA) * b.getValueAtIndex(indexB);
                                            indexA += a.numCols;
                                        }
                                        c.plus(cIndex++, alpha * total);
                                    }
                                }
                            };
                            MatrixMatrixMult.multAdd_reorderalpha = function (alpha, a, b, c) {
                                if (a.numCols == 0 || a.numRows == 0) {
                                    return;
                                }
                                var valA;
                                var indexCbase = 0;
                                var endOfKLoop = b.numRows * b.numCols;
                                for (var i = 0; i < a.numRows; i++) {
                                    var indexA = i * a.numCols;
                                    var indexB = 0;
                                    var indexC = indexCbase;
                                    var end = indexB + b.numCols;
                                    valA = alpha * a.getValueAtIndex(indexA++);
                                    while (indexB < end) {
                                        c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                    }
                                    while (indexB != endOfKLoop) {
                                        indexC = indexCbase;
                                        end = indexB + b.numCols;
                                        valA = alpha * a.getValueAtIndex(indexA++);
                                        while (indexB < end) {
                                            c.plus(indexC++, valA * b.getValueAtIndex(indexB++));
                                        }
                                    }
                                    indexCbase += c.numCols;
                                }
                            };
                            MatrixMatrixMult.multAdd_smallalpha = function (alpha, a, b, c) {
                                var aIndexStart = 0;
                                var cIndex = 0;
                                for (var i = 0; i < a.numRows; i++) {
                                    for (var j = 0; j < b.numCols; j++) {
                                        var total = 0;
                                        var indexA = aIndexStart;
                                        var indexB = j;
                                        var end = indexA + b.numRows;
                                        while (indexA < end) {
                                            total += a.getValueAtIndex(indexA++) * b.getValueAtIndex(indexB);
                                            indexB += b.numCols;
                                        }
                                        c.plus(cIndex++, alpha * total);
                                    }
                                    aIndexStart += a.numCols;
                                }
                            };
                            return MatrixMatrixMult;
                        })();
                        matrix_1.MatrixMatrixMult = MatrixMatrixMult;
                        var MatrixVectorMult = (function () {
                            function MatrixVectorMult() {
                            }
                            MatrixVectorMult.mult = function (A, B, C) {
                                if (A.numCols == 0) {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.fill(C, 0);
                                    return;
                                }
                                var indexA = 0;
                                var cIndex = 0;
                                var b0 = B.getValueAtIndex(0);
                                for (var i = 0; i < A.numRows; i++) {
                                    var total = A.getValueAtIndex(indexA++) * b0;
                                    for (var j = 1; j < A.numCols; j++) {
                                        total += A.getValueAtIndex(indexA++) * B.getValueAtIndex(j);
                                    }
                                    C.setValueAtIndex(cIndex++, total);
                                }
                            };
                            MatrixVectorMult.multTransA_small = function (A, B, C) {
                                var cIndex = 0;
                                for (var i = 0; i < A.numCols; i++) {
                                    var total = 0;
                                    var indexA = i;
                                    for (var j = 0; j < A.numRows; j++) {
                                        total += A.getValueAtIndex(indexA) * B.getValueAtIndex(j);
                                        indexA += A.numCols;
                                    }
                                    C.setValueAtIndex(cIndex++, total);
                                }
                            };
                            MatrixVectorMult.multTransA_reorder = function (A, B, C) {
                                if (A.numRows == 0) {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.fill(C, 0);
                                    return;
                                }
                                var B_val = B.getValueAtIndex(0);
                                for (var i = 0; i < A.numCols; i++) {
                                    C.setValueAtIndex(i, A.getValueAtIndex(i) * B_val);
                                }
                                var indexA = A.numCols;
                                for (var i = 1; i < A.numRows; i++) {
                                    B_val = B.getValueAtIndex(i);
                                    for (var j = 0; j < A.numCols; j++) {
                                        C.plus(j, A.getValueAtIndex(indexA++) * B_val);
                                    }
                                }
                            };
                            return MatrixVectorMult;
                        })();
                        matrix_1.MatrixVectorMult = MatrixVectorMult;
                        var SimpleMatrix = (function () {
                            function SimpleMatrix(numRows, numCols) {
                                this.mat = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(numRows, numCols);
                            }
                            SimpleMatrix.prototype.getMatrix = function () {
                                return this.mat;
                            };
                            SimpleMatrix.prototype.setValue2D = function (row, col, value) {
                                this.mat.set(row, col, value);
                            };
                            SimpleMatrix.prototype.setValue1D = function (index, value) {
                                this.mat.setValueAtIndex(index, value);
                            };
                            SimpleMatrix.prototype.getValue2D = function (row, col) {
                                return this.mat.get(row, col);
                            };
                            SimpleMatrix.prototype.getValue1D = function (index) {
                                return this.mat.data[index];
                            };
                            SimpleMatrix.prototype.getIndex = function (row, col) {
                                return row * this.mat.numCols + col;
                            };
                            SimpleMatrix.prototype.mult = function (b) {
                                var ret = this.createMatrix(this.mat.numRows, b.getMatrix().numCols);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.mult(this.mat, b.getMatrix(), ret.getMatrix());
                                return ret;
                            };
                            SimpleMatrix.prototype.scale = function (val) {
                                var ret = this.copy();
                                org.kevoree.modeling.util.maths.matrix.CommonOps.scale(val, ret.getMatrix());
                                return ret;
                            };
                            SimpleMatrix.prototype.plus = function (b) {
                                var ret = this.copy();
                                org.kevoree.modeling.util.maths.matrix.CommonOps.addEquals(ret.getMatrix(), b.getMatrix());
                                return ret;
                            };
                            SimpleMatrix.prototype.copy = function () {
                                var ret = this.createMatrix(this.mat.numRows, this.mat.numCols);
                                ret.getMatrix().setMatrix(this.getMatrix());
                                return ret;
                            };
                            SimpleMatrix.prototype.numRows = function () {
                                return this.mat.numRows;
                            };
                            SimpleMatrix.prototype.numCols = function () {
                                return this.mat.numCols;
                            };
                            SimpleMatrix.prototype.getNumElements = function () {
                                return this.mat.getNumElements();
                            };
                            SimpleMatrix.prototype.extractDiag = function () {
                                var N = Math.min(this.mat.numCols, this.mat.numRows);
                                var diag = this.createMatrix(N, 1);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.extractDiag(this.mat, diag.getMatrix());
                                return diag;
                            };
                            SimpleMatrix.prototype.isIdentical = function (a, tol) {
                                return org.kevoree.modeling.util.maths.matrix.MatrixFeatures.isIdentical(this.mat, a.getMatrix(), tol);
                            };
                            SimpleMatrix.prototype.trace = function () {
                                return org.kevoree.modeling.util.maths.matrix.CommonOps.trace(this.mat);
                            };
                            SimpleMatrix.prototype.elementMaxAbs = function () {
                                return org.kevoree.modeling.util.maths.matrix.CommonOps.elementMaxAbs(this.mat);
                            };
                            SimpleMatrix.prototype.elementSum = function () {
                                return org.kevoree.modeling.util.maths.matrix.CommonOps.elementSum(this.mat);
                            };
                            SimpleMatrix.prototype.elementMult = function (b) {
                                var c = this.createMatrix(this.mat.numRows, this.mat.numCols);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.elementMult(this.mat, b.getMatrix(), c.getMatrix());
                                return c;
                            };
                            SimpleMatrix.prototype.isInBounds = function (row, col) {
                                return row >= 0 && col >= 0 && row < this.mat.numRows && col < this.mat.numCols;
                            };
                            SimpleMatrix.prototype.printDimensions = function () {
                                console.log("[rows = " + this.numRows() + " , cols = " + this.numCols() + " ]");
                                ;
                            };
                            SimpleMatrix.prototype.transpose = function () {
                                var ret = this.createMatrix(this.mat.numCols, this.mat.numRows);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.transposeMatrix(this.mat, ret.getMatrix());
                                return ret;
                            };
                            SimpleMatrix.wrap = function (internalMat) {
                                var ret = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(internalMat.numRows, internalMat.numCols);
                                ret.mat = internalMat;
                                return ret;
                            };
                            SimpleMatrix.identity = function (width) {
                                var ret = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(width, width);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.setIdentity(ret.mat);
                                return ret;
                            };
                            SimpleMatrix.prototype.minus = function (b) {
                                var ret = this.copy();
                                org.kevoree.modeling.util.maths.matrix.CommonOps.subtract3mat(this.getMatrix(), b.getMatrix(), ret.getMatrix());
                                return ret;
                            };
                            SimpleMatrix.prototype.invert = function () {
                                var ret = this.createMatrix(this.mat.numRows, this.mat.numCols);
                                org.kevoree.modeling.util.maths.matrix.CommonOps.invert(this.mat, ret.getMatrix());
                                return ret;
                            };
                            SimpleMatrix.prototype.determinant = function () {
                                var ret = org.kevoree.modeling.util.maths.matrix.CommonOps.det(this.mat);
                                return ret;
                            };
                            SimpleMatrix.prototype.createMatrix = function (numRows, numCols) {
                                var sm = new org.kevoree.modeling.util.maths.matrix.SimpleMatrix(numRows, numCols);
                                return sm;
                            };
                            SimpleMatrix.prototype.extractVector = function (extractRow, element) {
                                var length = extractRow ? this.mat.numCols : this.mat.numRows;
                                var ret = extractRow ? this.createMatrix(1, length) : this.createMatrix(length, 1);
                                if (extractRow) {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.subvector(this.mat, element, 0, length, true, 0, ret.getMatrix());
                                }
                                else {
                                    org.kevoree.modeling.util.maths.matrix.CommonOps.subvector(this.mat, 0, element, length, false, 0, ret.getMatrix());
                                }
                                return ret;
                            };
                            SimpleMatrix.prototype.eig = function () {
                                return new org.kevoree.modeling.util.maths.matrix.solvers.SimpleEVD(this.mat);
                            };
                            SimpleMatrix.prototype.svd = function (compact) {
                                return new org.kevoree.modeling.util.maths.matrix.solvers.SimpleSVD(this.mat, compact);
                            };
                            SimpleMatrix.prototype.combine = function (insertRow, insertCol, B) {
                                var maxRow = insertRow + B.numRows();
                                var maxCol = insertCol + B.numCols();
                                var ret;
                                if (maxRow > this.mat.numRows || maxCol > this.mat.numCols) {
                                    var M = Math.max(maxRow, this.mat.numRows);
                                    var N = Math.max(maxCol, this.mat.numCols);
                                    ret = this.createMatrix(M, N);
                                    ret.insertIntoThis(0, 0, this);
                                }
                                else {
                                    ret = this.copy();
                                }
                                ret.insertIntoThis(insertRow, insertCol, B);
                                return ret;
                            };
                            SimpleMatrix.prototype.insertIntoThis = function (insertRow, insertCol, B) {
                                org.kevoree.modeling.util.maths.matrix.CommonOps.insert(B.getMatrix(), this.mat, insertRow, insertCol);
                            };
                            return SimpleMatrix;
                        })();
                        matrix_1.SimpleMatrix = SimpleMatrix;
                        var TransposeAlgs = (function () {
                            function TransposeAlgs() {
                            }
                            TransposeAlgs.square = function (mat) {
                                var index = 1;
                                var indexEnd = mat.numCols;
                                for (var i = 0; i < mat.numRows; i++) {
                                    var indexOther = (i + 1) * mat.numCols + i;
                                    for (; index < indexEnd; index++) {
                                        var val = mat.data[index];
                                        mat.data[index] = mat.data[indexOther];
                                        mat.data[indexOther] = val;
                                        indexOther += mat.numCols;
                                    }
                                    index += i + 2;
                                    indexEnd += mat.numCols;
                                }
                            };
                            TransposeAlgs.block = function (A, A_tran, blockLength) {
                                for (var i = 0; i < A.numRows; i += blockLength) {
                                    var blockHeight = Math.min(blockLength, A.numRows - i);
                                    var indexSrc = i * A.numCols;
                                    var indexDst = i;
                                    for (var j = 0; j < A.numCols; j += blockLength) {
                                        var blockWidth = Math.min(blockLength, A.numCols - j);
                                        var indexSrcEnd = indexSrc + blockWidth;
                                        for (; indexSrc < indexSrcEnd; indexSrc++) {
                                            var rowSrc = indexSrc;
                                            var rowDst = indexDst;
                                            var end = rowDst + blockHeight;
                                            for (; rowDst < end; rowSrc += A.numCols) {
                                                A_tran.data[rowDst++] = A.data[rowSrc];
                                            }
                                            indexDst += A_tran.numCols;
                                        }
                                    }
                                }
                            };
                            TransposeAlgs.standard = function (A, A_tran) {
                                var index = 0;
                                for (var i = 0; i < A_tran.numRows; i++) {
                                    var index2 = i;
                                    var end = index + A_tran.numCols;
                                    while (index < end) {
                                        A_tran.data[index++] = A.data[index2];
                                        index2 += A.numCols;
                                    }
                                }
                            };
                            return TransposeAlgs;
                        })();
                        matrix_1.TransposeAlgs = TransposeAlgs;
                        var solvers;
                        (function (solvers) {
                            var AdjLinearSolverQr = (function () {
                                function AdjLinearSolverQr() {
                                    this.maxRows = -1;
                                    this.maxCols = -1;
                                    this.decomposer = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QRDecompositionHouseholderColumn_D64();
                                }
                                AdjLinearSolverQr.prototype.setA = function (A) {
                                    if (A.numRows > this.maxRows || A.numCols > this.maxCols) {
                                        this.setMaxSize(A.numRows, A.numCols);
                                    }
                                    this.numRows = A.numRows;
                                    this.numCols = A.numCols;
                                    if (!this.decomposer.decompose(A)) {
                                        return false;
                                    }
                                    this.Q.reshapeBoolean(this.numRows, this.numRows, false);
                                    this.R.reshapeBoolean(this.numRows, this.numCols, false);
                                    this.decomposer.getQ(this.Q, false);
                                    this.decomposer.getR(this.R, false);
                                    return true;
                                };
                                AdjLinearSolverQr.prototype.solveU = function (U, b, n) {
                                    for (var i = n - 1; i >= 0; i--) {
                                        var sum = b[i];
                                        var indexU = i * n + i + 1;
                                        for (var j = i + 1; j < n; j++) {
                                            sum -= U[indexU++] * b[j];
                                        }
                                        b[i] = sum / U[i * n + i];
                                    }
                                };
                                AdjLinearSolverQr.prototype.solve = function (B, X) {
                                    var BnumCols = B.numCols;
                                    this.Y.reshapeBoolean(this.numRows, 1, false);
                                    this.Z.reshapeBoolean(this.numRows, 1, false);
                                    for (var colB = 0; colB < BnumCols; colB++) {
                                        for (var i = 0; i < this.numRows; i++) {
                                            this.Y.data[i] = B.get(i, colB);
                                        }
                                        org.kevoree.modeling.util.maths.matrix.MatrixMatrixMult.multTransA(this.Q, this.Y, this.Z);
                                        this.solveU(this.R.data, this.Z.data, this.numCols);
                                        for (var i = 0; i < this.numCols; i++) {
                                            X.cset(i, colB, this.Z.data[i]);
                                        }
                                    }
                                };
                                AdjLinearSolverQr.prototype.setMaxSize = function (maxRows, maxCols) {
                                    maxRows += 5;
                                    this.maxRows = maxRows;
                                    this.maxCols = maxCols;
                                    this.Q = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(maxRows, maxRows);
                                    this.R = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(maxRows, maxCols);
                                    this.Y = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(maxRows, 1);
                                    this.Z = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(maxRows, 1);
                                };
                                return AdjLinearSolverQr;
                            })();
                            solvers.AdjLinearSolverQr = AdjLinearSolverQr;
                            var LUDecompositionAlt_D64 = (function () {
                                function LUDecompositionAlt_D64() {
                                    this.maxWidth = -1;
                                }
                                LUDecompositionAlt_D64.prototype.setExpectedMaxSize = function (numRows, numCols) {
                                    this.LU = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(numRows, numCols);
                                    this.dataLU = this.LU.data;
                                    this.maxWidth = Math.max(numRows, numCols);
                                    this.vv = new Float64Array(this.maxWidth);
                                    this.indx = new Int32Array(this.maxWidth);
                                    this.pivot = new Int32Array(this.maxWidth);
                                    for (var i = 0; i < this.maxWidth; i++) {
                                        this.vv[i] = 0;
                                        this.indx[i] = 0;
                                        this.pivot[i] = 0;
                                    }
                                };
                                LUDecompositionAlt_D64.prototype.getLU = function () {
                                    return this.LU;
                                };
                                LUDecompositionAlt_D64.prototype.getIndx = function () {
                                    return this.indx;
                                };
                                LUDecompositionAlt_D64.prototype.getPivot = function () {
                                    return this.pivot;
                                };
                                LUDecompositionAlt_D64.prototype.getLower = function (lower) {
                                    var numRows = this.LU.numRows;
                                    var numCols = this.LU.numRows < this.LU.numCols ? this.LU.numRows : this.LU.numCols;
                                    if (lower == null) {
                                        lower = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(numRows, numCols);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.fill(lower, 0);
                                    }
                                    for (var i = 0; i < numCols; i++) {
                                        lower.set(i, i, 1.0);
                                        for (var j = 0; j < i; j++) {
                                            lower.set(i, j, this.LU.get(i, j));
                                        }
                                    }
                                    if (numRows > numCols) {
                                        for (var i = numCols; i < numRows; i++) {
                                            for (var j = 0; j < numCols; j++) {
                                                lower.set(i, j, this.LU.get(i, j));
                                            }
                                        }
                                    }
                                    return lower;
                                };
                                LUDecompositionAlt_D64.prototype.getUpper = function (upper) {
                                    var numRows = this.LU.numRows < this.LU.numCols ? this.LU.numRows : this.LU.numCols;
                                    var numCols = this.LU.numCols;
                                    if (upper == null) {
                                        upper = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(numRows, numCols);
                                    }
                                    else {
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.fill(upper, 0);
                                    }
                                    for (var i = 0; i < numRows; i++) {
                                        for (var j = i; j < numCols; j++) {
                                            upper.set(i, j, this.LU.get(i, j));
                                        }
                                    }
                                    return upper;
                                };
                                LUDecompositionAlt_D64.prototype.decomposeCommonInit = function (a) {
                                    if (a.numRows > this.maxWidth || a.numCols > this.maxWidth) {
                                        this.setExpectedMaxSize(a.numRows, a.numCols);
                                    }
                                    this.m = a.numRows;
                                    this.n = a.numCols;
                                    this.LU.setMatrix(a);
                                    for (var i = 0; i < this.m; i++) {
                                        this.pivot[i] = i;
                                    }
                                    this.pivsign = 1;
                                };
                                LUDecompositionAlt_D64.prototype._solveVectorInternal = function (vv) {
                                    var ii = 0;
                                    for (var i = 0; i < this.n; i++) {
                                        var ip = this.indx[i];
                                        var sum = vv[ip];
                                        vv[ip] = vv[i];
                                        if (ii != 0) {
                                            var index = i * this.n + ii - 1;
                                            for (var j = ii - 1; j < i; j++) {
                                                sum -= this.dataLU[index++] * vv[j];
                                            }
                                        }
                                        else {
                                            if (sum != 0.0) {
                                                ii = i + 1;
                                            }
                                        }
                                        vv[i] = sum;
                                    }
                                    org.kevoree.modeling.util.maths.matrix.solvers.TriangularSolver.solveU2arr(this.dataLU, vv, this.n);
                                };
                                LUDecompositionAlt_D64.prototype._getVV = function () {
                                    return this.vv;
                                };
                                LUDecompositionAlt_D64.prototype.computeDeterminant = function () {
                                    var ret = this.pivsign;
                                    var total = this.m * this.n;
                                    for (var i = 0; i < total; i += this.n + 1) {
                                        ret *= this.dataLU[i];
                                    }
                                    return ret;
                                };
                                LUDecompositionAlt_D64.prototype.decompose = function (a) {
                                    this.decomposeCommonInit(a);
                                    var LUcolj = this.vv;
                                    for (var j = 0; j < this.n; j++) {
                                        for (var i = 0; i < this.m; i++) {
                                            LUcolj[i] = this.dataLU[i * this.n + j];
                                        }
                                        for (var i = 0; i < this.m; i++) {
                                            var rowIndex = i * this.n;
                                            var kmax = i < j ? i : j;
                                            var s = 0.0;
                                            for (var k = 0; k < kmax; k++) {
                                                s += this.dataLU[rowIndex + k] * LUcolj[k];
                                            }
                                            this.dataLU[rowIndex + j] = LUcolj[i] -= s;
                                        }
                                        var p = j;
                                        var max = Math.abs(LUcolj[p]);
                                        for (var i = j + 1; i < this.m; i++) {
                                            var v = Math.abs(LUcolj[i]);
                                            if (v > max) {
                                                p = i;
                                                max = v;
                                            }
                                        }
                                        if (p != j) {
                                            var rowP = p * this.n;
                                            var rowJ = j * this.n;
                                            var endP = rowP + this.n;
                                            for (rowP = p * this.n; rowP < endP; rowP++) {
                                                var t = this.dataLU[rowP];
                                                this.dataLU[rowP] = this.dataLU[rowJ];
                                                this.dataLU[rowJ] = t;
                                                rowJ++;
                                            }
                                            var k = this.pivot[p];
                                            this.pivot[p] = this.pivot[j];
                                            this.pivot[j] = k;
                                            this.pivsign = -this.pivsign;
                                        }
                                        this.indx[j] = p;
                                        if (j < this.m) {
                                            var lujj = this.dataLU[j * this.n + j];
                                            if (lujj != 0) {
                                                for (var i = j + 1; i < this.m; i++) {
                                                    this.dataLU[i * this.n + j] /= lujj;
                                                }
                                            }
                                        }
                                    }
                                    return true;
                                };
                                return LUDecompositionAlt_D64;
                            })();
                            solvers.LUDecompositionAlt_D64 = LUDecompositionAlt_D64;
                            var LinearSolverLu_D64 = (function () {
                                function LinearSolverLu_D64(decomp) {
                                    this.doImprove = false;
                                    this.decomp = decomp;
                                }
                                LinearSolverLu_D64.prototype.getA = function () {
                                    return this.A;
                                };
                                LinearSolverLu_D64.prototype._setA = function (A) {
                                    this.A = A;
                                    this.numRows = A.numRows;
                                    this.numCols = A.numCols;
                                };
                                LinearSolverLu_D64.prototype.setA = function (A) {
                                    this._setA(A);
                                    return this.decomp.decompose(A);
                                };
                                LinearSolverLu_D64.prototype.invert = function (A_inv) {
                                    var vv = this.decomp._getVV();
                                    var LU = this.decomp.getLU();
                                    var n = this.A.numCols;
                                    var dataInv = A_inv.data;
                                    for (var j = 0; j < n; j++) {
                                        for (var i = 0; i < n; i++) {
                                            if (i == j) {
                                                vv[i] = 1;
                                            }
                                            else {
                                                vv[i] = 0;
                                            }
                                        }
                                        this.decomp._solveVectorInternal(vv);
                                        var index = j;
                                        for (var i = 0; i < n; i++) {
                                            dataInv[index] = vv[i];
                                            index += n;
                                        }
                                    }
                                };
                                LinearSolverLu_D64.prototype.improveSol = function (b, x) {
                                    var dataA = this.A.data;
                                    var dataB = b.data;
                                    var dataX = x.data;
                                    var nc = b.numCols;
                                    var n = b.numCols;
                                    var vv = this.decomp._getVV();
                                    for (var k = 0; k < nc; k++) {
                                        for (var i = 0; i < n; i++) {
                                            var sdp = -dataB[i * nc + k];
                                            for (var j = 0; j < n; j++) {
                                                sdp += dataA[i * n + j] * dataX[j * nc + k];
                                            }
                                            vv[i] = sdp;
                                        }
                                        this.decomp._solveVectorInternal(vv);
                                        for (var i = 0; i < n; i++) {
                                            dataX[i * nc + k] -= vv[i];
                                        }
                                    }
                                };
                                LinearSolverLu_D64.prototype.modifiesA = function () {
                                    return false;
                                };
                                LinearSolverLu_D64.prototype.modifiesB = function () {
                                    return false;
                                };
                                LinearSolverLu_D64.prototype.solve = function (b, x) {
                                    var numCols = b.numCols;
                                    var dataB = b.data;
                                    var dataX = x.data;
                                    var vv = this.decomp._getVV();
                                    for (var j = 0; j < numCols; j++) {
                                        var index = j;
                                        for (var i = 0; i < this.numCols; i++) {
                                            vv[i] = dataB[index];
                                            index += numCols;
                                        }
                                        this.decomp._solveVectorInternal(vv);
                                        index = j;
                                        for (var i = 0; i < this.numCols; i++) {
                                            dataX[index] = vv[i];
                                            index += numCols;
                                        }
                                    }
                                    if (this.doImprove) {
                                        this.improveSol(b, x);
                                    }
                                };
                                return LinearSolverLu_D64;
                            })();
                            solvers.LinearSolverLu_D64 = LinearSolverLu_D64;
                            var SimpleEVD = (function () {
                                function SimpleEVD(mat) {
                                    this.mat = mat;
                                    this.eig = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.SwitchingEigenDecomposition(mat.numCols, true, 1e-8);
                                    if (!this.eig.decompose(mat)) {
                                        throw new Error("Eigenvalue Decomposition failed");
                                    }
                                }
                                SimpleEVD.prototype.getNumberOfEigenvalues = function () {
                                    return this.eig.getNumberOfEigenvalues();
                                };
                                SimpleEVD.prototype.getEigenvalue = function (index) {
                                    return this.eig.getEigenvalue(index);
                                };
                                SimpleEVD.prototype.getEigenVector = function (index) {
                                    return org.kevoree.modeling.util.maths.matrix.SimpleMatrix.wrap(this.eig.getEigenVector(index));
                                };
                                SimpleEVD.prototype.getEVD = function () {
                                    return this.eig;
                                };
                                SimpleEVD.prototype.getIndexMax = function () {
                                    var indexMax = 0;
                                    var max = this.getEigenvalue(0).getMagnitude2();
                                    var N = this.getNumberOfEigenvalues();
                                    for (var i = 1; i < N; i++) {
                                        var m = this.getEigenvalue(i).getMagnitude2();
                                        if (m > max) {
                                            max = m;
                                            indexMax = i;
                                        }
                                    }
                                    return indexMax;
                                };
                                SimpleEVD.prototype.getIndexMin = function () {
                                    var indexMin = 0;
                                    var min = this.getEigenvalue(0).getMagnitude2();
                                    var N = this.getNumberOfEigenvalues();
                                    for (var i = 1; i < N; i++) {
                                        var m = this.getEigenvalue(i).getMagnitude2();
                                        if (m < min) {
                                            min = m;
                                            indexMin = i;
                                        }
                                    }
                                    return indexMin;
                                };
                                return SimpleEVD;
                            })();
                            solvers.SimpleEVD = SimpleEVD;
                            var SimpleSVD = (function () {
                                function SimpleSVD(mat, compact) {
                                    this.mat = mat;
                                    this.svd = new org.kevoree.modeling.util.maths.matrix.solvers.SvdImplicitQrDecompose_D64(compact, true, true, false);
                                    if (!this.svd.decompose(mat)) {
                                        throw new Error("Decomposition failed");
                                    }
                                    this.U = org.kevoree.modeling.util.maths.matrix.SimpleMatrix.wrap(this.svd.getU(null, false));
                                    this.W = org.kevoree.modeling.util.maths.matrix.SimpleMatrix.wrap(this.svd.getW(null));
                                    this.V = org.kevoree.modeling.util.maths.matrix.SimpleMatrix.wrap(this.svd.getV(null, false));
                                    org.kevoree.modeling.util.maths.matrix.solvers.SimpleSVD.descendingOrder(this.U.getMatrix(), false, this.W.getMatrix(), this.V.getMatrix(), false);
                                    this.tol = org.kevoree.modeling.util.maths.matrix.solvers.SimpleSVD.singularThreshold(this.svd);
                                }
                                SimpleSVD.swapRowOrCol = function (M, tran, i, bigIndex) {
                                    var tmp;
                                    if (tran) {
                                        for (var col = 0; col < M.numCols; col++) {
                                            tmp = M.get(i, col);
                                            M.set(i, col, M.get(bigIndex, col));
                                            M.set(bigIndex, col, tmp);
                                        }
                                    }
                                    else {
                                        for (var row = 0; row < M.numRows; row++) {
                                            tmp = M.get(row, i);
                                            M.set(row, i, M.get(row, bigIndex));
                                            M.set(row, bigIndex, tmp);
                                        }
                                    }
                                };
                                SimpleSVD.singularThreshold = function (svd) {
                                    var largest = 0;
                                    var w = svd.getSingularValues();
                                    var N = svd.numberOfSingularValues();
                                    for (var j = 0; j < N; j++) {
                                        if (w[j] > largest) {
                                            largest = w[j];
                                        }
                                    }
                                    var M = Math.max(svd.getNumCols(), svd.getNumRows());
                                    return M * largest * org.kevoree.modeling.util.maths.matrix.CommonOps.EPS;
                                };
                                SimpleSVD.descendingOrder = function (U, tranU, W, V, tranV) {
                                    var numSingular = Math.min(W.numRows, W.numCols);
                                    for (var i = 0; i < numSingular; i++) {
                                        var bigValue = -1;
                                        var bigIndex = -1;
                                        for (var j = i; j < numSingular; j++) {
                                            var v = W.get(j, j);
                                            if (v > bigValue) {
                                                bigValue = v;
                                                bigIndex = j;
                                            }
                                        }
                                        if (bigIndex == i) {
                                            continue;
                                        }
                                        if (bigIndex == -1) {
                                            break;
                                        }
                                        var tmp = W.get(i, i);
                                        W.set(i, i, bigValue);
                                        W.set(bigIndex, bigIndex, tmp);
                                        if (V != null) {
                                            org.kevoree.modeling.util.maths.matrix.solvers.SimpleSVD.swapRowOrCol(V, tranV, i, bigIndex);
                                        }
                                        if (U != null) {
                                            org.kevoree.modeling.util.maths.matrix.solvers.SimpleSVD.swapRowOrCol(U, tranU, i, bigIndex);
                                        }
                                    }
                                };
                                SimpleSVD.prototype.getU = function () {
                                    return this.U;
                                };
                                SimpleSVD.prototype.getW = function () {
                                    return this.W;
                                };
                                SimpleSVD.prototype.getV = function () {
                                    return this.V;
                                };
                                return SimpleSVD;
                            })();
                            solvers.SimpleSVD = SimpleSVD;
                            var SvdImplicitQrAlgorithm = (function () {
                                function SvdImplicitQrAlgorithm() {
                                    this.rand = new java.util.Random();
                                    this.eigenSmall = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.EigenvalueSmall();
                                    this.exceptionalThresh = 15;
                                    this.maxIterations = this.exceptionalThresh * 100;
                                    this.fastValues = false;
                                }
                                SvdImplicitQrAlgorithm.prototype.getUt = function () {
                                    return this.Ut;
                                };
                                SvdImplicitQrAlgorithm.prototype.setUt = function (ut) {
                                    this.Ut = ut;
                                };
                                SvdImplicitQrAlgorithm.prototype.getVt = function () {
                                    return this.Vt;
                                };
                                SvdImplicitQrAlgorithm.prototype.setVt = function (vt) {
                                    this.Vt = vt;
                                };
                                SvdImplicitQrAlgorithm.prototype.setMatrix = function (numRows, numCols, diag, off) {
                                    this.initParam(numRows, numCols);
                                    this.diag = diag;
                                    this.off = off;
                                    this.maxValue = Math.abs(diag[0]);
                                    for (var i = 1; i < this.N; i++) {
                                        var a = Math.abs(diag[i]);
                                        var b = Math.abs(off[i - 1]);
                                        if (a > this.maxValue) {
                                            this.maxValue = Math.abs(a);
                                        }
                                        if (b > this.maxValue) {
                                            this.maxValue = Math.abs(b);
                                        }
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.swapDiag = function (diag) {
                                    var ret = this.diag;
                                    this.diag = diag;
                                    return ret;
                                };
                                SvdImplicitQrAlgorithm.prototype.swapOff = function (off) {
                                    var ret = this.off;
                                    this.off = off;
                                    return ret;
                                };
                                SvdImplicitQrAlgorithm.prototype.setMaxValue = function (maxValue) {
                                    this.maxValue = maxValue;
                                };
                                SvdImplicitQrAlgorithm.prototype.initParam = function (M, N) {
                                    if (N > M) {
                                        throw new Error("Must be a square or tall matrix");
                                    }
                                    this.N = N;
                                    if (this.splits == null || this.splits.length < N) {
                                        this.splits = new Int32Array(N);
                                    }
                                    this.x1 = 0;
                                    this.x2 = this.N - 1;
                                    this.steps = 0;
                                    this.totalSteps = 0;
                                    this.numSplits = 0;
                                    this.numExceptional = 0;
                                    this.nextExceptional = this.exceptionalThresh;
                                };
                                SvdImplicitQrAlgorithm.prototype.process = function () {
                                    this.followScript = false;
                                    this.findingZeros = true;
                                    return this._process();
                                };
                                SvdImplicitQrAlgorithm.prototype.processValues = function (values) {
                                    this.followScript = true;
                                    this.values = values;
                                    this.findingZeros = false;
                                    return this._process();
                                };
                                SvdImplicitQrAlgorithm.prototype._process = function () {
                                    if (this.maxValue == 0) {
                                        return true;
                                    }
                                    while (this.x2 >= 0) {
                                        if (this.steps > this.maxIterations) {
                                            return false;
                                        }
                                        if (this.x1 == this.x2) {
                                            this.resetSteps();
                                            if (!this.nextSplit()) {
                                                break;
                                            }
                                        }
                                        else {
                                            if (this.fastValues && this.x2 - this.x1 == 1) {
                                                this.resetSteps();
                                                this.eigenBB_2x2(this.x1);
                                                this.setSubmatrix(this.x2, this.x2);
                                            }
                                            else {
                                                if (this.steps >= this.nextExceptional) {
                                                    this.exceptionShift();
                                                }
                                                else {
                                                    if (!this.checkForAndHandleZeros()) {
                                                        if (this.followScript) {
                                                            this.performScriptedStep();
                                                        }
                                                        else {
                                                            this.performDynamicStep();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    return true;
                                };
                                SvdImplicitQrAlgorithm.prototype.performDynamicStep = function () {
                                    if (this.findingZeros) {
                                        if (this.steps > 6) {
                                            this.findingZeros = false;
                                        }
                                        else {
                                            var scale = this.computeBulgeScale();
                                            this.performImplicitSingleStep(scale, 0, false);
                                        }
                                    }
                                    else {
                                        var scale = this.computeBulgeScale();
                                        var lambda = this.selectWilkinsonShift(scale);
                                        this.performImplicitSingleStep(scale, lambda, false);
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.performScriptedStep = function () {
                                    var scale = this.computeBulgeScale();
                                    if (this.steps > SvdImplicitQrAlgorithm.giveUpOnKnown) {
                                        this.followScript = false;
                                    }
                                    else {
                                        var s = this.values[this.x2] / scale;
                                        this.performImplicitSingleStep(scale, s * s, false);
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.incrementSteps = function () {
                                    this.steps++;
                                    this.totalSteps++;
                                };
                                SvdImplicitQrAlgorithm.prototype.isOffZero = function (i) {
                                    var bottom = Math.abs(this.diag[i]) + Math.abs(this.diag[i + 1]);
                                    return Math.abs(this.off[i]) <= bottom * org.kevoree.modeling.util.maths.matrix.CommonOps.EPS;
                                };
                                SvdImplicitQrAlgorithm.prototype.isDiagonalZero = function (i) {
                                    var bottom = Math.abs(this.diag[i + 1]) + Math.abs(this.off[i]);
                                    return Math.abs(this.diag[i]) <= bottom * org.kevoree.modeling.util.maths.matrix.CommonOps.EPS;
                                };
                                SvdImplicitQrAlgorithm.prototype.resetSteps = function () {
                                    this.steps = 0;
                                    this.nextExceptional = this.exceptionalThresh;
                                    this.numExceptional = 0;
                                };
                                SvdImplicitQrAlgorithm.prototype.nextSplit = function () {
                                    if (this.numSplits == 0) {
                                        return false;
                                    }
                                    this.x2 = this.splits[--this.numSplits];
                                    if (this.numSplits > 0) {
                                        this.x1 = this.splits[this.numSplits - 1] + 1;
                                    }
                                    else {
                                        this.x1 = 0;
                                    }
                                    return true;
                                };
                                SvdImplicitQrAlgorithm.prototype.performImplicitSingleStep = function (scale, lambda, byAngle) {
                                    this.createBulge(this.x1, lambda, scale, byAngle);
                                    for (var i = this.x1; i < this.x2 - 1 && this.bulge != 0.0; i++) {
                                        this.removeBulgeLeft(i, true);
                                        if (this.bulge == 0) {
                                            break;
                                        }
                                        this.removeBulgeRight(i);
                                    }
                                    if (this.bulge != 0) {
                                        this.removeBulgeLeft(this.x2 - 1, false);
                                    }
                                    this.incrementSteps();
                                };
                                SvdImplicitQrAlgorithm.prototype.updateRotator = function (Q, m, n, c, s) {
                                    var rowA = m * Q.numCols;
                                    var rowB = n * Q.numCols;
                                    var endA = rowA + Q.numCols;
                                    for (; rowA != endA; rowA++) {
                                        var a = Q.getValueAtIndex(rowA);
                                        var b = Q.getValueAtIndex(rowB);
                                        Q.setValueAtIndex(rowA, c * a + s * b);
                                        Q.setValueAtIndex(rowB, -s * a + c * b);
                                        rowB++;
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.computeBulgeScale = function () {
                                    var b11 = this.diag[this.x1];
                                    var b12 = this.off[this.x1];
                                    return Math.max(Math.abs(b11), Math.abs(b12));
                                };
                                SvdImplicitQrAlgorithm.prototype.createBulge = function (x1, p, scale, byAngle) {
                                    var b11 = this.diag[x1];
                                    var b12 = this.off[x1];
                                    var b22 = this.diag[x1 + 1];
                                    if (byAngle) {
                                        this.c = Math.cos(p);
                                        this.s = Math.sin(p);
                                    }
                                    else {
                                        var u1 = (b11 / scale) * (b11 / scale) - p;
                                        var u2 = (b12 / scale) * (b11 / scale);
                                        var gamma = Math.sqrt(u1 * u1 + u2 * u2);
                                        this.c = u1 / gamma;
                                        this.s = u2 / gamma;
                                    }
                                    this.diag[x1] = b11 * this.c + b12 * this.s;
                                    this.off[x1] = b12 * this.c - b11 * this.s;
                                    this.diag[x1 + 1] = b22 * this.c;
                                    this.bulge = b22 * this.s;
                                    if (this.Vt != null) {
                                        this.updateRotator(this.Vt, x1, x1 + 1, this.c, this.s);
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.computeRotator = function (rise, run) {
                                    if (Math.abs(rise) < Math.abs(run)) {
                                        var k = rise / run;
                                        var bottom = Math.sqrt(1.0 + k * k);
                                        this.s = 1.0 / bottom;
                                        this.c = k / bottom;
                                    }
                                    else {
                                        var t = run / rise;
                                        var bottom = Math.sqrt(1.0 + t * t);
                                        this.c = 1.0 / bottom;
                                        this.s = t / bottom;
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.removeBulgeLeft = function (x1, notLast) {
                                    var b11 = this.diag[x1];
                                    var b12 = this.off[x1];
                                    var b22 = this.diag[x1 + 1];
                                    this.computeRotator(b11, this.bulge);
                                    this.diag[x1] = this.c * b11 + this.s * this.bulge;
                                    this.off[x1] = this.c * b12 + this.s * b22;
                                    this.diag[x1 + 1] = this.c * b22 - this.s * b12;
                                    if (notLast) {
                                        var b23 = this.off[x1 + 1];
                                        this.bulge = this.s * b23;
                                        this.off[x1 + 1] = this.c * b23;
                                    }
                                    if (this.Ut != null) {
                                        this.updateRotator(this.Ut, x1, x1 + 1, this.c, this.s);
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.removeBulgeRight = function (x1) {
                                    var b12 = this.off[x1];
                                    var b22 = this.diag[x1 + 1];
                                    var b23 = this.off[x1 + 1];
                                    this.computeRotator(b12, this.bulge);
                                    this.off[x1] = b12 * this.c + this.bulge * this.s;
                                    this.diag[x1 + 1] = b22 * this.c + b23 * this.s;
                                    this.off[x1 + 1] = -b22 * this.s + b23 * this.c;
                                    var b33 = this.diag[x1 + 2];
                                    this.diag[x1 + 2] = b33 * this.c;
                                    this.bulge = b33 * this.s;
                                    if (this.Vt != null) {
                                        this.updateRotator(this.Vt, x1 + 1, x1 + 2, this.c, this.s);
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.setSubmatrix = function (x1, x2) {
                                    this.x1 = x1;
                                    this.x2 = x2;
                                };
                                SvdImplicitQrAlgorithm.prototype.selectWilkinsonShift = function (scale) {
                                    var a11, a22;
                                    if (this.x2 - this.x1 > 1) {
                                        var d1 = this.diag[this.x2 - 1] / scale;
                                        var o1 = this.off[this.x2 - 2] / scale;
                                        var d2 = this.diag[this.x2] / scale;
                                        var o2 = this.off[this.x2 - 1] / scale;
                                        a11 = o1 * o1 + d1 * d1;
                                        a22 = o2 * o2 + d2 * d2;
                                        this.eigenSmall.symm2x2_fast(a11, o2 * d1, a22);
                                    }
                                    else {
                                        var a = this.diag[this.x2 - 1] / scale;
                                        var b = this.off[this.x2 - 1] / scale;
                                        var c = this.diag[this.x2] / scale;
                                        a11 = a * a;
                                        a22 = b * b + c * c;
                                        this.eigenSmall.symm2x2_fast(a11, a * b, a22);
                                    }
                                    var diff0 = Math.abs(this.eigenSmall.value0.real - a22);
                                    var diff1 = Math.abs(this.eigenSmall.value1.real - a22);
                                    return diff0 < diff1 ? this.eigenSmall.value0.real : this.eigenSmall.value1.real;
                                };
                                SvdImplicitQrAlgorithm.signum = function (d) {
                                    if (d < 0) {
                                        return -1.0;
                                    }
                                    if (d > 0) {
                                        return 1.0;
                                    }
                                    return 0.0;
                                };
                                SvdImplicitQrAlgorithm.prototype.eigenBB_2x2 = function (x1) {
                                    var b11 = this.diag[x1];
                                    var b12 = this.off[x1];
                                    var b22 = this.diag[x1 + 1];
                                    var absA = Math.abs(b11);
                                    var absB = Math.abs(b12);
                                    var absC = Math.abs(b22);
                                    var scale = absA > absB ? absA : absB;
                                    if (absC > scale) {
                                        scale = absC;
                                    }
                                    if (scale == 0) {
                                        return;
                                    }
                                    b11 /= scale;
                                    b12 /= scale;
                                    b22 /= scale;
                                    this.eigenSmall.symm2x2_fast(b11 * b11, b11 * b12, b12 * b12 + b22 * b22);
                                    this.off[x1] = 0;
                                    this.diag[x1] = scale * Math.sqrt(this.eigenSmall.value0.real);
                                    var sgn = org.kevoree.modeling.util.maths.matrix.solvers.SvdImplicitQrAlgorithm.signum(this.eigenSmall.value1.real);
                                    this.diag[x1 + 1] = sgn * scale * Math.sqrt(Math.abs(this.eigenSmall.value1.real));
                                };
                                SvdImplicitQrAlgorithm.prototype.checkForAndHandleZeros = function () {
                                    for (var i = this.x2 - 1; i >= this.x1; i--) {
                                        if (this.isOffZero(i)) {
                                            this.resetSteps();
                                            this.splits[this.numSplits++] = i;
                                            this.x1 = i + 1;
                                            return true;
                                        }
                                    }
                                    for (var i = this.x2 - 1; i >= this.x1; i--) {
                                        if (this.isDiagonalZero(i)) {
                                            this.pushRight(i);
                                            this.resetSteps();
                                            this.splits[this.numSplits++] = i;
                                            this.x1 = i + 1;
                                            return true;
                                        }
                                    }
                                    return false;
                                };
                                SvdImplicitQrAlgorithm.prototype.pushRight = function (row) {
                                    if (this.isOffZero(row)) {
                                        return;
                                    }
                                    this.rotatorPushRight(row);
                                    var end = this.N - 2 - row;
                                    for (var i = 0; i < end && this.bulge != 0; i++) {
                                        this.rotatorPushRight2(row, i + 2);
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.rotatorPushRight = function (m) {
                                    var b11 = this.off[m];
                                    var b21 = this.diag[m + 1];
                                    this.computeRotator(b21, -b11);
                                    this.off[m] = 0;
                                    this.diag[m + 1] = b21 * this.c - b11 * this.s;
                                    if (m + 2 < this.N) {
                                        var b22 = this.off[m + 1];
                                        this.off[m + 1] = b22 * this.c;
                                        this.bulge = b22 * this.s;
                                    }
                                    else {
                                        this.bulge = 0;
                                    }
                                    if (this.Ut != null) {
                                        this.updateRotator(this.Ut, m, m + 1, this.c, this.s);
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.rotatorPushRight2 = function (m, offset) {
                                    var b11 = this.bulge;
                                    var b12 = this.diag[m + offset];
                                    this.computeRotator(b12, -b11);
                                    this.diag[m + offset] = b12 * this.c - b11 * this.s;
                                    if (m + offset < this.N - 1) {
                                        var b22 = this.off[m + offset];
                                        this.off[m + offset] = b22 * this.c;
                                        this.bulge = b22 * this.s;
                                    }
                                    if (this.Ut != null) {
                                        this.updateRotator(this.Ut, m, m + offset, this.c, this.s);
                                    }
                                };
                                SvdImplicitQrAlgorithm.prototype.exceptionShift = function () {
                                    this.numExceptional++;
                                    var mag = 0.05 * this.numExceptional;
                                    if (mag > 1.0) {
                                        mag = 1.0;
                                    }
                                    var angle = 2.0 * Math.PI * (this.rand.nextDouble() - 0.5) * mag;
                                    this.performImplicitSingleStep(0, angle, true);
                                    this.nextExceptional = this.steps + this.exceptionalThresh;
                                };
                                SvdImplicitQrAlgorithm.prototype.getNumberOfSingularValues = function () {
                                    return this.N;
                                };
                                SvdImplicitQrAlgorithm.prototype.getSingularValue = function (index) {
                                    return this.diag[index];
                                };
                                SvdImplicitQrAlgorithm.prototype.setFastValues = function (b) {
                                    this.fastValues = b;
                                };
                                SvdImplicitQrAlgorithm.prototype.getSingularValues = function () {
                                    return this.diag;
                                };
                                SvdImplicitQrAlgorithm.prototype.getDiag = function () {
                                    return this.diag;
                                };
                                SvdImplicitQrAlgorithm.prototype.getOff = function () {
                                    return this.off;
                                };
                                SvdImplicitQrAlgorithm.prototype.getMaxValue = function () {
                                    return this.maxValue;
                                };
                                SvdImplicitQrAlgorithm.giveUpOnKnown = 10;
                                return SvdImplicitQrAlgorithm;
                            })();
                            solvers.SvdImplicitQrAlgorithm = SvdImplicitQrAlgorithm;
                            var SvdImplicitQrDecompose_D64 = (function () {
                                function SvdImplicitQrDecompose_D64(compact, computeU, computeV, canUseTallBidiagonal) {
                                    this.qralg = new org.kevoree.modeling.util.maths.matrix.solvers.SvdImplicitQrAlgorithm();
                                    this.A_mod = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(1, 1);
                                    this.compact = compact;
                                    this.prefComputeU = computeU;
                                    this.prefComputeV = computeV;
                                    this.canUseTallBidiagonal = canUseTallBidiagonal;
                                }
                                SvdImplicitQrDecompose_D64.prototype.getSingularValues = function () {
                                    return this.singularValues;
                                };
                                SvdImplicitQrDecompose_D64.prototype.numberOfSingularValues = function () {
                                    return this.numSingular;
                                };
                                SvdImplicitQrDecompose_D64.prototype.isCompact = function () {
                                    return this.compact;
                                };
                                SvdImplicitQrDecompose_D64.prototype.getU = function (U, transpose) {
                                    if (!this.prefComputeU) {
                                        throw new Error("As requested U was not computed.");
                                    }
                                    if (transpose) {
                                        if (U == null) {
                                            return this.Ut;
                                        }
                                        else {
                                            if (U.numRows != this.Ut.numRows || U.numCols != this.Ut.numCols) {
                                                throw new Error("Unexpected shape of U");
                                            }
                                        }
                                        U.setMatrix(this.Ut);
                                    }
                                    else {
                                        if (U == null) {
                                            U = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.Ut.numCols, this.Ut.numRows);
                                        }
                                        else {
                                            if (U.numRows != this.Ut.numCols || U.numCols != this.Ut.numRows) {
                                                throw new Error("Unexpected shape of U");
                                            }
                                        }
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.transposeMatrix(this.Ut, U);
                                    }
                                    return U;
                                };
                                SvdImplicitQrDecompose_D64.prototype.getV = function (V, transpose) {
                                    if (!this.prefComputeV) {
                                        throw new Error("As requested V was not computed.");
                                    }
                                    if (transpose) {
                                        if (V == null) {
                                            return this.Vt;
                                        }
                                        else {
                                            if (V.numRows != this.Vt.numRows || V.numCols != this.Vt.numCols) {
                                                throw new Error("Unexpected shape of V");
                                            }
                                        }
                                        V.setMatrix(this.Vt);
                                    }
                                    else {
                                        if (V == null) {
                                            V = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.Vt.numCols, this.Vt.numRows);
                                        }
                                        else {
                                            if (V.numRows != this.Vt.numCols || V.numCols != this.Vt.numRows) {
                                                throw new Error("Unexpected shape of V");
                                            }
                                        }
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.transposeMatrix(this.Vt, V);
                                    }
                                    return V;
                                };
                                SvdImplicitQrDecompose_D64.prototype.getW = function (W) {
                                    var m = this.compact ? this.numSingular : this.numRows;
                                    var n = this.compact ? this.numSingular : this.numCols;
                                    if (W == null) {
                                        W = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(m, n);
                                    }
                                    else {
                                        W.reshapeBoolean(m, n, false);
                                        W.zero();
                                    }
                                    for (var i = 0; i < this.numSingular; i++) {
                                        W.set(i, i, this.singularValues[i]);
                                    }
                                    return W;
                                };
                                SvdImplicitQrDecompose_D64.prototype.decompose = function (orig) {
                                    if (!this.setup(orig)) {
                                        return false;
                                    }
                                    if (this.bidiagonalization(orig)) {
                                        return false;
                                    }
                                    if (this.computeUWV()) {
                                        return false;
                                    }
                                    this.makeSingularPositive();
                                    this.undoTranspose();
                                    return true;
                                };
                                SvdImplicitQrDecompose_D64.prototype.inputModified = function () {
                                    return false;
                                };
                                SvdImplicitQrDecompose_D64.prototype.bidiagonalization = function (orig) {
                                    if (this.transposed) {
                                        this.A_mod.reshapeBoolean(orig.numCols, orig.numRows, false);
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.transposeMatrix(orig, this.A_mod);
                                    }
                                    else {
                                        this.A_mod.reshapeBoolean(orig.numRows, orig.numCols, false);
                                        this.A_mod.setMatrix(orig);
                                    }
                                    return !this.bidiag.decompose(this.A_mod);
                                };
                                SvdImplicitQrDecompose_D64.prototype.undoTranspose = function () {
                                    if (this.transposed) {
                                        var temp = this.Vt;
                                        this.Vt = this.Ut;
                                        this.Ut = temp;
                                    }
                                };
                                SvdImplicitQrDecompose_D64.prototype.computeUWV = function () {
                                    this.bidiag.getDiagonal(this.diag, this.off);
                                    this.qralg.setMatrix(this.numRowsT, this.numColsT, this.diag, this.off);
                                    if (this.computeU) {
                                        this.Ut = this.bidiag.getU(this.Ut, true, this.compact);
                                    }
                                    if (this.computeV) {
                                        this.Vt = this.bidiag.getV(this.Vt, true, this.compact);
                                    }
                                    this.qralg.setFastValues(false);
                                    if (this.computeU) {
                                        this.qralg.setUt(this.Ut);
                                    }
                                    else {
                                        this.qralg.setUt(null);
                                    }
                                    if (this.computeV) {
                                        this.qralg.setVt(this.Vt);
                                    }
                                    else {
                                        this.qralg.setVt(null);
                                    }
                                    var ret = !this.qralg.process();
                                    return ret;
                                };
                                SvdImplicitQrDecompose_D64.prototype.setup = function (orig) {
                                    this.transposed = orig.numCols > orig.numRows;
                                    if (this.transposed) {
                                        this.computeU = this.prefComputeV;
                                        this.computeV = this.prefComputeU;
                                        this.numRowsT = orig.numCols;
                                        this.numColsT = orig.numRows;
                                    }
                                    else {
                                        this.computeU = this.prefComputeU;
                                        this.computeV = this.prefComputeV;
                                        this.numRowsT = orig.numRows;
                                        this.numColsT = orig.numCols;
                                    }
                                    this.numRows = orig.numRows;
                                    this.numCols = orig.numCols;
                                    if (this.numRows == 0 || this.numCols == 0) {
                                        return false;
                                    }
                                    if (this.diag == null || this.diag.length < this.numColsT) {
                                        this.diag = new Float64Array(this.numColsT);
                                        this.off = new Float64Array(this.numColsT - 1);
                                    }
                                    if (this.canUseTallBidiagonal && this.numRows > this.numCols * 2 && !this.computeU) {
                                        if (this.bidiag == null || !(this.bidiag instanceof org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionTall_D64)) {
                                            this.bidiag = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionTall_D64();
                                        }
                                    }
                                    else {
                                        if (this.bidiag == null || !(this.bidiag instanceof org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionRow_D64)) {
                                            this.bidiag = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionRow_D64(1);
                                        }
                                    }
                                    return true;
                                };
                                SvdImplicitQrDecompose_D64.prototype.makeSingularPositive = function () {
                                    this.numSingular = this.qralg.getNumberOfSingularValues();
                                    this.singularValues = this.qralg.getSingularValues();
                                    for (var i = 0; i < this.numSingular; i++) {
                                        var val = this.qralg.getSingularValue(i);
                                        if (val < 0) {
                                            this.singularValues[i] = 0.0 - val;
                                            if (this.computeU) {
                                                var start = i * this.Ut.numCols;
                                                var stop = start + this.Ut.numCols;
                                                for (var j = start; j < stop; j++) {
                                                    this.Ut.setValueAtIndex(j, 0.0 - this.Ut.getValueAtIndex(j));
                                                }
                                            }
                                        }
                                        else {
                                            this.singularValues[i] = val;
                                        }
                                    }
                                };
                                SvdImplicitQrDecompose_D64.prototype.getNumRows = function () {
                                    return this.numRows;
                                };
                                SvdImplicitQrDecompose_D64.prototype.getNumCols = function () {
                                    return this.numCols;
                                };
                                return SvdImplicitQrDecompose_D64;
                            })();
                            solvers.SvdImplicitQrDecompose_D64 = SvdImplicitQrDecompose_D64;
                            var TriangularSolver = (function () {
                                function TriangularSolver() {
                                }
                                TriangularSolver.solveU2arr = function (U, b, n) {
                                    for (var i = n - 1; i >= 0; i--) {
                                        var sum = b[i];
                                        var indexU = i * n + i + 1;
                                        for (var j = i + 1; j < n; j++) {
                                            sum -= U[indexU++] * b[j];
                                        }
                                        b[i] = sum / U[i * n + i];
                                    }
                                };
                                TriangularSolver.solveU = function (U, b, sideLength, minRow, maxRow) {
                                    for (var i = maxRow - 1; i >= minRow; i--) {
                                        var sum = b[i];
                                        var indexU = i * sideLength + i + 1;
                                        for (var j = i + 1; j < maxRow; j++) {
                                            sum -= U[indexU++] * b[j];
                                        }
                                        b[i] = sum / U[i * sideLength + i];
                                    }
                                };
                                return TriangularSolver;
                            })();
                            solvers.TriangularSolver = TriangularSolver;
                            var decomposition;
                            (function (decomposition) {
                                var BidiagonalDecompositionRow_D64 = (function () {
                                    function BidiagonalDecompositionRow_D64(numElements) {
                                        this.UBV = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(numElements, 1);
                                        this.gammasU = new Float64Array(numElements);
                                        this.gammasV = new Float64Array(numElements);
                                        this.b = new Float64Array(numElements);
                                        this.u = new Float64Array(numElements);
                                    }
                                    BidiagonalDecompositionRow_D64.prototype.decompose = function (A) {
                                        this.init(A);
                                        return this._decompose();
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.init = function (A) {
                                        this.UBV = A;
                                        this.m = this.UBV.numRows;
                                        this.n = this.UBV.numCols;
                                        this.min = Math.min(this.m, this.n);
                                        var max = Math.max(this.m, this.n);
                                        if (this.b.length < max + 1) {
                                            this.b = new Float64Array(max + 1);
                                            this.u = new Float64Array(max + 1);
                                        }
                                        if (this.gammasU.length < this.m) {
                                            this.gammasU = new Float64Array(this.m);
                                        }
                                        if (this.gammasV.length < this.n) {
                                            this.gammasV = new Float64Array(this.n);
                                        }
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.getUBV = function () {
                                        return this.UBV;
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.getDiagonal = function (diag, off) {
                                        diag[0] = this.UBV.getValueAtIndex(0);
                                        for (var i = 1; i < this.n; i++) {
                                            diag[i] = this.UBV.get(i, i);
                                            off[i - 1] = this.UBV.get(i - 1, i);
                                        }
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.getB = function (B, compact) {
                                        B = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionRow_D64.handleB(B, compact, this.m, this.n, this.min);
                                        B.set(0, 0, this.UBV.get(0, 0));
                                        for (var i = 1; i < this.min; i++) {
                                            B.set(i, i, this.UBV.get(i, i));
                                            B.set(i - 1, i, this.UBV.get(i - 1, i));
                                        }
                                        if (this.n > this.m) {
                                            B.set(this.min - 1, this.min, this.UBV.get(this.min - 1, this.min));
                                        }
                                        return B;
                                    };
                                    BidiagonalDecompositionRow_D64.handleB = function (B, compact, m, n, min) {
                                        var w = n > m ? min + 1 : min;
                                        if (compact) {
                                            if (B == null) {
                                                B = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(min, w);
                                            }
                                            else {
                                                B.reshapeBoolean(min, w, false);
                                                B.zero();
                                            }
                                        }
                                        else {
                                            if (B == null) {
                                                B = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(m, n);
                                            }
                                            else {
                                                B.reshapeBoolean(m, n, false);
                                                B.zero();
                                            }
                                        }
                                        return B;
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.getU = function (U, transpose, compact) {
                                        U = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionRow_D64.handleU(U, transpose, compact, this.m, this.n, this.min);
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.setIdentity(U);
                                        for (var i = 0; i < this.m; i++) {
                                            this.u[i] = 0;
                                        }
                                        for (var j = this.min - 1; j >= 0; j--) {
                                            this.u[j] = 1;
                                            for (var i = j + 1; i < this.m; i++) {
                                                this.u[i] = this.UBV.get(i, j);
                                            }
                                            if (transpose) {
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultL(U, this.u, this.gammasU[j], j, j, this.m);
                                            }
                                            else {
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(U, this.u, this.gammasU[j], j, j, this.m, this.b);
                                            }
                                        }
                                        return U;
                                    };
                                    BidiagonalDecompositionRow_D64.handleU = function (U, transpose, compact, m, n, min) {
                                        if (compact) {
                                            if (transpose) {
                                                if (U == null) {
                                                    U = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(min, m);
                                                }
                                                else {
                                                    U.reshapeBoolean(min, m, false);
                                                }
                                            }
                                            else {
                                                if (U == null) {
                                                    U = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(m, min);
                                                }
                                                else {
                                                    U.reshapeBoolean(m, min, false);
                                                }
                                            }
                                        }
                                        else {
                                            if (U == null) {
                                                U = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(m, m);
                                            }
                                            else {
                                                U.reshapeBoolean(m, m, false);
                                            }
                                        }
                                        return U;
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.getV = function (V, transpose, compact) {
                                        V = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionRow_D64.handleV(V, transpose, compact, this.m, this.n, this.min);
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.setIdentity(V);
                                        for (var j = this.min - 1; j >= 0; j--) {
                                            this.u[j + 1] = 1;
                                            for (var i = j + 2; i < this.n; i++) {
                                                this.u[i] = this.UBV.get(j, i);
                                            }
                                            if (transpose) {
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultL(V, this.u, this.gammasV[j], j + 1, j + 1, this.n);
                                            }
                                            else {
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(V, this.u, this.gammasV[j], j + 1, j + 1, this.n, this.b);
                                            }
                                        }
                                        return V;
                                    };
                                    BidiagonalDecompositionRow_D64.handleV = function (V, transpose, compact, m, n, min) {
                                        var w = n > m ? min + 1 : min;
                                        if (compact) {
                                            if (transpose) {
                                                if (V == null) {
                                                    V = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(w, n);
                                                }
                                                else {
                                                    V.reshapeBoolean(w, n, false);
                                                }
                                            }
                                            else {
                                                if (V == null) {
                                                    V = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(n, w);
                                                }
                                                else {
                                                    V.reshapeBoolean(n, w, false);
                                                }
                                            }
                                        }
                                        else {
                                            if (V == null) {
                                                V = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(n, n);
                                            }
                                            else {
                                                V.reshapeBoolean(n, n, false);
                                            }
                                        }
                                        return V;
                                    };
                                    BidiagonalDecompositionRow_D64.prototype._decompose = function () {
                                        for (var k = 0; k < this.min; k++) {
                                            this.computeU(k);
                                            this.computeV(k);
                                        }
                                        return true;
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.computeU = function (k) {
                                        var b = this.UBV.data;
                                        var max = 0;
                                        for (var i = k; i < this.m; i++) {
                                            var val = this.u[i] = b[i * this.n + k];
                                            val = Math.abs(val);
                                            if (val > max) {
                                                max = val;
                                            }
                                        }
                                        if (max > 0) {
                                            var tau = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.computeTauAndDivide4arg(k, this.m, this.u, max);
                                            var nu = this.u[k] + tau;
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.divideElements_Bcol(k + 1, this.m, this.n, this.u, b, k, nu);
                                            this.u[k] = 1.0;
                                            var gamma = nu / tau;
                                            this.gammasU[k] = gamma;
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(this.UBV, this.u, gamma, k + 1, k, this.m, this.b);
                                            b[k * this.n + k] = -tau * max;
                                        }
                                        else {
                                            this.gammasU[k] = 0;
                                        }
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.computeV = function (k) {
                                        var b = this.UBV.data;
                                        var row = k * this.n;
                                        var max = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.findMax(b, row + k + 1, this.n - k - 1);
                                        if (max > 0) {
                                            var tau = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.computeTauAndDivide(k + 1, this.n, b, row, max);
                                            var nu = b[row + k + 1] + tau;
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.divideElements_Brow(k + 2, this.n, this.u, b, row, nu);
                                            this.u[k + 1] = 1.0;
                                            var gamma = nu / tau;
                                            this.gammasV[k] = gamma;
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultL(this.UBV, this.u, gamma, k + 1, k + 1, this.n);
                                            b[row + k + 1] = -tau * max;
                                        }
                                        else {
                                            this.gammasV[k] = 0;
                                        }
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.getGammasU = function () {
                                        return this.gammasU;
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.getGammasV = function () {
                                        return this.gammasV;
                                    };
                                    BidiagonalDecompositionRow_D64.prototype.inputModified = function () {
                                        return true;
                                    };
                                    return BidiagonalDecompositionRow_D64;
                                })();
                                decomposition.BidiagonalDecompositionRow_D64 = BidiagonalDecompositionRow_D64;
                                var BidiagonalDecompositionTall_D64 = (function () {
                                    function BidiagonalDecompositionTall_D64() {
                                        this.decompQRP = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QRxColPivDecompositionHouseholderColumn_D64();
                                        this.decompBi = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionRow_D64(1);
                                        this.B = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(1, 1);
                                    }
                                    BidiagonalDecompositionTall_D64.prototype.getDiagonal = function (diag, off) {
                                        diag[0] = this.B.getValueAtIndex(0);
                                        for (var i = 1; i < this.n; i++) {
                                            diag[i] = this.B.get(i, i);
                                            off[i - 1] = this.B.get(i - 1, i);
                                        }
                                    };
                                    BidiagonalDecompositionTall_D64.prototype.getB = function (B, compact) {
                                        B = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionRow_D64.handleB(B, compact, this.m, this.n, this.min);
                                        B.set(0, 0, this.B.get(0, 0));
                                        for (var i = 1; i < this.min; i++) {
                                            B.set(i, i, this.B.get(i, i));
                                            B.set(i - 1, i, this.B.get(i - 1, i));
                                        }
                                        if (this.n > this.m) {
                                            B.set(this.min - 1, this.min, this.B.get(this.min - 1, this.min));
                                        }
                                        return B;
                                    };
                                    BidiagonalDecompositionTall_D64.prototype.getU = function (U, transpose, compact) {
                                        U = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.BidiagonalDecompositionRow_D64.handleU(U, false, compact, this.m, this.n, this.min);
                                        if (compact) {
                                            var Q1 = this.decompQRP.getQ(null, true);
                                            var U1 = this.decompBi.getU(null, false, true);
                                            org.kevoree.modeling.util.maths.matrix.CommonOps.mult(Q1, U1, U);
                                        }
                                        else {
                                            var Q = this.decompQRP.getQ(U, false);
                                            var U1 = this.decompBi.getU(null, false, true);
                                            var Q1 = org.kevoree.modeling.util.maths.matrix.CommonOps.extract4Int(Q, 0, Q.numRows, 0, this.min);
                                            var tmp = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(Q1.numRows, U1.numCols);
                                            org.kevoree.modeling.util.maths.matrix.CommonOps.mult(Q1, U1, tmp);
                                            org.kevoree.modeling.util.maths.matrix.CommonOps.insert(tmp, Q, 0, 0);
                                        }
                                        if (transpose) {
                                            org.kevoree.modeling.util.maths.matrix.CommonOps.transpose(U);
                                        }
                                        return U;
                                    };
                                    BidiagonalDecompositionTall_D64.prototype.getV = function (V, transpose, compact) {
                                        return this.decompBi.getV(V, transpose, compact);
                                    };
                                    BidiagonalDecompositionTall_D64.prototype.decompose = function (orig) {
                                        if (!this.decompQRP.decompose(orig)) {
                                            return false;
                                        }
                                        this.m = orig.numRows;
                                        this.n = orig.numCols;
                                        this.min = Math.min(this.m, this.n);
                                        this.B.reshapeBoolean(this.min, this.n, false);
                                        this.decompQRP.getR(this.B, true);
                                        var result = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.min, this.n);
                                        var P = this.decompQRP.getPivotMatrix(null);
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.multTransB(this.B, P, result);
                                        this.B.setMatrix(result);
                                        return this.decompBi.decompose(this.B);
                                    };
                                    BidiagonalDecompositionTall_D64.prototype.inputModified = function () {
                                        return this.decompQRP.inputModified();
                                    };
                                    return BidiagonalDecompositionTall_D64;
                                })();
                                decomposition.BidiagonalDecompositionTall_D64 = BidiagonalDecompositionTall_D64;
                                var EigenvalueSmall = (function () {
                                    function EigenvalueSmall() {
                                        this.value0 = new org.kevoree.modeling.util.maths.matrix.Complex64F();
                                        this.value1 = new org.kevoree.modeling.util.maths.matrix.Complex64F();
                                    }
                                    EigenvalueSmall.prototype.value2x2 = function (a11, a12, a21, a22) {
                                        var c, s;
                                        if (a12 + a21 == 0) {
                                            c = s = 1.0 / Math.sqrt(2);
                                        }
                                        else {
                                            var aa = (a11 - a22);
                                            var bb = (a12 + a21);
                                            var t_hat = aa / bb;
                                            var t = t_hat / (1.0 + Math.sqrt(1.0 + t_hat * t_hat));
                                            c = 1.0 / Math.sqrt(1.0 + t * t);
                                            s = c * t;
                                        }
                                        var c2 = c * c;
                                        var s2 = s * s;
                                        var cs = c * s;
                                        var b11 = c2 * a11 + s2 * a22 - cs * (a12 + a21);
                                        var b12 = c2 * a12 - s2 * a21 + cs * (a11 - a22);
                                        var b21 = c2 * a21 - s2 * a12 + cs * (a11 - a22);
                                        if (b21 * b12 >= 0) {
                                            if (b12 == 0) {
                                                c = 0;
                                                s = 1;
                                            }
                                            else {
                                                s = Math.sqrt(b21 / (b12 + b21));
                                                c = Math.sqrt(b12 / (b12 + b21));
                                            }
                                            cs = c * s;
                                            a11 = b11 - cs * (b12 + b21);
                                            a22 = b11 + cs * (b12 + b21);
                                            this.value0.real = a11;
                                            this.value1.real = a22;
                                            this.value0.imaginary = this.value1.imaginary = 0;
                                        }
                                        else {
                                            this.value0.real = this.value1.real = b11;
                                            this.value0.imaginary = Math.sqrt(-b21 * b12);
                                            this.value1.imaginary = -this.value0.imaginary;
                                        }
                                    };
                                    EigenvalueSmall.prototype.value2x2_fast = function (a11, a12, a21, a22) {
                                        var left = (a11 + a22) / 2.0;
                                        var inside = 4.0 * a12 * a21 + (a11 - a22) * (a11 - a22);
                                        if (inside < 0) {
                                            this.value0.real = this.value1.real = left;
                                            this.value0.imaginary = Math.sqrt(-inside) / 2.0;
                                            this.value1.imaginary = -this.value0.imaginary;
                                        }
                                        else {
                                            var right = Math.sqrt(inside) / 2.0;
                                            this.value0.real = (left + right);
                                            this.value1.real = (left - right);
                                            this.value0.imaginary = this.value1.imaginary = 0.0;
                                        }
                                    };
                                    EigenvalueSmall.prototype.symm2x2_fast = function (a11, a12, a22) {
                                        var left = (a11 + a22) * 0.5;
                                        var b = (a11 - a22) * 0.5;
                                        var right = Math.sqrt(b * b + a12 * a12);
                                        this.value0.real = left + right;
                                        this.value1.real = left - right;
                                    };
                                    return EigenvalueSmall;
                                })();
                                decomposition.EigenvalueSmall = EigenvalueSmall;
                                var HessenbergSimilarDecomposition_D64 = (function () {
                                    function HessenbergSimilarDecomposition_D64(initialSize) {
                                        this.gammas = new Float64Array(initialSize);
                                        this.b = new Float64Array(initialSize);
                                        this.u = new Float64Array(initialSize);
                                    }
                                    HessenbergSimilarDecomposition_D64.prototype.decompose = function (A) {
                                        if (A.numRows != A.numCols) {
                                            throw new Error("A must be square.");
                                        }
                                        if (A.numRows <= 0) {
                                            return false;
                                        }
                                        this.QH = A;
                                        this.N = A.numCols;
                                        if (this.b.length < this.N) {
                                            this.b = new Float64Array(this.N);
                                            this.gammas = new Float64Array(this.N);
                                            this.u = new Float64Array(this.N);
                                        }
                                        return this._decompose();
                                    };
                                    HessenbergSimilarDecomposition_D64.prototype.inputModified = function () {
                                        return true;
                                    };
                                    HessenbergSimilarDecomposition_D64.prototype.getQH = function () {
                                        return this.QH;
                                    };
                                    HessenbergSimilarDecomposition_D64.prototype.getH = function (H) {
                                        if (H == null) {
                                            H = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.N, this.N);
                                        }
                                        else {
                                            H.zero();
                                        }
                                        java.lang.System.arraycopy(this.QH.data, 0, H.data, 0, this.N);
                                        for (var i = 1; i < this.N; i++) {
                                            for (var j = i - 1; j < this.N; j++) {
                                                H.set(i, j, this.QH.get(i, j));
                                            }
                                        }
                                        return H;
                                    };
                                    HessenbergSimilarDecomposition_D64.prototype.getQ = function (Q) {
                                        if (Q == null) {
                                            Q = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.N, this.N);
                                            for (var i = 0; i < this.N; i++) {
                                                Q.data[i * this.N + i] = 1;
                                            }
                                        }
                                        else {
                                            if (this.N != Q.numRows || this.N != Q.numCols) {
                                                throw new Error("The provided H must have the same dimensions as the decomposed matrix.");
                                            }
                                            else {
                                                org.kevoree.modeling.util.maths.matrix.CommonOps.setIdentity(Q);
                                            }
                                        }
                                        for (var j = this.N - 2; j >= 0; j--) {
                                            this.u[j + 1] = 1;
                                            for (var i = j + 2; i < this.N; i++) {
                                                this.u[i] = this.QH.get(i, j);
                                            }
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(Q, this.u, this.gammas[j], j + 1, j + 1, this.N, this.b);
                                        }
                                        return Q;
                                    };
                                    HessenbergSimilarDecomposition_D64.prototype._decompose = function () {
                                        var h = this.QH.data;
                                        for (var k = 0; k < this.N - 2; k++) {
                                            var max = 0;
                                            for (var i = k + 1; i < this.N; i++) {
                                                var val = this.u[i] = h[i * this.N + k];
                                                val = Math.abs(val);
                                                if (val > max) {
                                                    max = val;
                                                }
                                            }
                                            if (max > 0) {
                                                var tau = 0;
                                                for (var i = k + 1; i < this.N; i++) {
                                                    var val = this.u[i] /= max;
                                                    tau += val * val;
                                                }
                                                tau = Math.sqrt(tau);
                                                if (this.u[k + 1] < 0) {
                                                    tau = -tau;
                                                }
                                                var nu = this.u[k + 1] + tau;
                                                this.u[k + 1] = 1.0;
                                                for (var i = k + 2; i < this.N; i++) {
                                                    h[i * this.N + k] = this.u[i] /= nu;
                                                }
                                                var gamma = nu / tau;
                                                this.gammas[k] = gamma;
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(this.QH, this.u, gamma, k + 1, k + 1, this.N, this.b);
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultL(this.QH, this.u, gamma, 0, k + 1, this.N);
                                                h[(k + 1) * this.N + k] = -tau * max;
                                            }
                                            else {
                                                this.gammas[k] = 0;
                                            }
                                        }
                                        return true;
                                    };
                                    HessenbergSimilarDecomposition_D64.prototype.getGammas = function () {
                                        return this.gammas;
                                    };
                                    return HessenbergSimilarDecomposition_D64;
                                })();
                                decomposition.HessenbergSimilarDecomposition_D64 = HessenbergSimilarDecomposition_D64;
                                var QRDecompositionHouseholderColumn_D64 = (function () {
                                    function QRDecompositionHouseholderColumn_D64() {
                                    }
                                    QRDecompositionHouseholderColumn_D64.prototype.setExpectedMaxSize = function (numRows, numCols) {
                                        this.numCols = numCols;
                                        this.numRows = numRows;
                                        this.minLength = Math.min(numCols, numRows);
                                        var maxLength = Math.max(numCols, numRows);
                                        if (this.dataQR == null || this.dataQR.rows() < numRows || this.dataQR.columns() < numCols) {
                                            this.dataQR = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(numRows, numCols);
                                            this.v = new Float64Array(maxLength);
                                            this.gammas = new Float64Array(this.minLength);
                                        }
                                        if (this.v.length < maxLength) {
                                            this.v = new Float64Array(maxLength);
                                        }
                                        if (this.gammas.length < this.minLength) {
                                            this.gammas = new Float64Array(this.minLength);
                                        }
                                    };
                                    QRDecompositionHouseholderColumn_D64.prototype.getQ = function (Q, compact) {
                                        if (compact) {
                                            if (Q == null) {
                                                Q = org.kevoree.modeling.util.maths.matrix.DenseMatrix64F.identity(this.numRows, this.minLength);
                                            }
                                            else {
                                                org.kevoree.modeling.util.maths.matrix.DenseMatrix64F.setIdentity(Q);
                                            }
                                        }
                                        else {
                                            if (Q == null) {
                                                Q = org.kevoree.modeling.util.maths.matrix.DenseMatrix64F.widentity(this.numRows);
                                            }
                                            else {
                                                org.kevoree.modeling.util.maths.matrix.DenseMatrix64F.setIdentity(Q);
                                            }
                                        }
                                        for (var j = this.minLength - 1; j >= 0; j--) {
                                            var vv = this.dataQR.get(j, j);
                                            this.dataQR.set(j, j, 1);
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QRDecompositionHouseholderColumn_D64.rank1UpdateMultR(Q, this.dataQR, j, this.gammas[j], j, j, this.numRows, this.v);
                                            this.dataQR.set(j, j, vv);
                                        }
                                        return Q;
                                    };
                                    QRDecompositionHouseholderColumn_D64.prototype.getR = function (R, compact) {
                                        if (R == null) {
                                            if (compact) {
                                                R = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.minLength, this.numCols);
                                            }
                                            else {
                                                R = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.numRows, this.numCols);
                                            }
                                        }
                                        else {
                                            for (var i = 0; i < R.numRows; i++) {
                                                var min = Math.min(i, R.numCols);
                                                for (var j = 0; j < min; j++) {
                                                    R.cset(i, j, 0);
                                                }
                                            }
                                        }
                                        for (var j = 0; j < this.numCols; j++) {
                                            var l = Math.min(j, this.numRows - 1);
                                            for (var i = 0; i <= l; i++) {
                                                var val = this.dataQR.get(i, j);
                                                R.cset(i, j, val);
                                            }
                                        }
                                        return R;
                                    };
                                    QRDecompositionHouseholderColumn_D64.prototype.decompose = function (A) {
                                        this.setExpectedMaxSize(A.numRows, A.numCols);
                                        this.convertToColumnMajor(A);
                                        this.error = false;
                                        for (var j = 0; j < this.minLength; j++) {
                                            this.householder(j);
                                            this.updateA(j);
                                        }
                                        return !this.error;
                                    };
                                    QRDecompositionHouseholderColumn_D64.prototype.convertToColumnMajor = function (A) {
                                        for (var x = 0; x < this.numCols; x++) {
                                            for (var y = 0; y < this.numRows; y++) {
                                                this.dataQR.set(y, x, A.data[y * this.numCols + x]);
                                            }
                                        }
                                    };
                                    QRDecompositionHouseholderColumn_D64.prototype.householder = function (j) {
                                        var max = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QRDecompositionHouseholderColumn_D64.findMax(this.dataQR, j, j, this.numRows - j);
                                        if (max == 0.0) {
                                            this.gamma = 0;
                                            this.error = true;
                                        }
                                        else {
                                            this.tau = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QRDecompositionHouseholderColumn_D64.computeTauAndDivide(j, this.numRows, this.dataQR, j, max);
                                            var u_0 = this.dataQR.get(j, j) + this.tau;
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QRDecompositionHouseholderColumn_D64.divideElements(j + 1, this.numRows, this.dataQR, j, u_0);
                                            this.gamma = u_0 / this.tau;
                                            this.tau *= max;
                                            this.dataQR.set(j, j, -this.tau);
                                        }
                                        this.gammas[j] = this.gamma;
                                    };
                                    QRDecompositionHouseholderColumn_D64.prototype.updateA = function (w) {
                                        for (var j = w + 1; j < this.numCols; j++) {
                                            var val = this.dataQR.get(w, j);
                                            for (var k = w + 1; k < this.numRows; k++) {
                                                val += this.dataQR.get(k, w) * this.dataQR.get(k, j);
                                            }
                                            val *= this.gamma;
                                            this.dataQR.add(w, j, -val);
                                            for (var i = w + 1; i < this.numRows; i++) {
                                                this.dataQR.add(i, j, -this.dataQR.get(i, w) * val);
                                            }
                                        }
                                    };
                                    QRDecompositionHouseholderColumn_D64.findMax = function (u, col, startU, length) {
                                        var max = -1;
                                        var index = startU;
                                        var stopIndex = startU + length;
                                        for (; index < stopIndex; index++) {
                                            var val = u.get(index, col);
                                            val = (val < 0.0) ? -val : val;
                                            if (val > max) {
                                                max = val;
                                            }
                                        }
                                        return max;
                                    };
                                    QRDecompositionHouseholderColumn_D64.divideElements = function (j, numRows, u, col, u_0) {
                                        for (var i = j; i < numRows; i++) {
                                            u.set(i, col, u.get(i, col) / u_0);
                                        }
                                    };
                                    QRDecompositionHouseholderColumn_D64.computeTauAndDivide = function (j, numRows, u, col, max) {
                                        var tau = 0;
                                        for (var i = j; i < numRows; i++) {
                                            u.set(i, col, u.get(i, col) / max);
                                            var d = u.get(i, col);
                                            tau += d * d;
                                        }
                                        tau = Math.sqrt(tau);
                                        if (u.get(j, col) < 0) {
                                            tau = -tau;
                                        }
                                        return tau;
                                    };
                                    QRDecompositionHouseholderColumn_D64.prototype.inputModified = function () {
                                        return false;
                                    };
                                    QRDecompositionHouseholderColumn_D64.rank1UpdateMultR = function (A, u, col, gamma, colA0, w0, w1, _temp) {
                                        for (var i = colA0; i < A.numCols; i++) {
                                            _temp[i] = u.get(w0, col) * A.data[w0 * A.numCols + i];
                                        }
                                        for (var k = w0 + 1; k < w1; k++) {
                                            var indexA = k * A.numCols + colA0;
                                            var valU = u.get(k, col);
                                            for (var i = colA0; i < A.numCols; i++) {
                                                _temp[i] += valU * A.data[indexA++];
                                            }
                                        }
                                        for (var i = colA0; i < A.numCols; i++) {
                                            _temp[i] *= gamma;
                                        }
                                        for (var i = w0; i < w1; i++) {
                                            var valU = u.get(i, col);
                                            var indexA = i * A.numCols + colA0;
                                            for (var j = colA0; j < A.numCols; j++) {
                                                A.data[indexA++] -= valU * _temp[j];
                                            }
                                        }
                                    };
                                    return QRDecompositionHouseholderColumn_D64;
                                })();
                                decomposition.QRDecompositionHouseholderColumn_D64 = QRDecompositionHouseholderColumn_D64;
                                var QRxColPivDecompositionHouseholderColumn_D64 = (function (_super) {
                                    __extends(QRxColPivDecompositionHouseholderColumn_D64, _super);
                                    function QRxColPivDecompositionHouseholderColumn_D64() {
                                        _super.call(this);
                                        this.singularThreshold = org.kevoree.modeling.util.maths.matrix.CommonOps.EPS;
                                    }
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.setSingularThreshold = function (threshold) {
                                        this.singularThreshold = threshold;
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.setExpectedMaxSize = function (numRows, numCols) {
                                        _super.prototype.setExpectedMaxSize.call(this, numRows, numCols);
                                        if (this.pivots == null || this.pivots.length < numCols) {
                                            this.pivots = new Int32Array(numCols);
                                            this.normsCol = new Float64Array(numCols);
                                        }
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.getQ = function (Q, compact) {
                                        if (compact) {
                                            if (Q == null) {
                                                Q = org.kevoree.modeling.util.maths.matrix.CommonOps.identity(this.numRows, this.minLength);
                                            }
                                            else {
                                                if (Q.numRows != this.numRows || Q.numCols != this.minLength) {
                                                    throw new Error("Unexpected matrix dimension.");
                                                }
                                                else {
                                                    org.kevoree.modeling.util.maths.matrix.CommonOps.setIdentity(Q);
                                                }
                                            }
                                        }
                                        else {
                                            if (Q == null) {
                                                Q = org.kevoree.modeling.util.maths.matrix.CommonOps.identity1D(this.numRows);
                                            }
                                            else {
                                                if (Q.numRows != this.numRows || Q.numCols != this.numRows) {
                                                    throw new Error("Unexpected matrix dimension.");
                                                }
                                                else {
                                                    org.kevoree.modeling.util.maths.matrix.CommonOps.setIdentity(Q);
                                                }
                                            }
                                        }
                                        for (var j = this.rank - 1; j >= 0; j--) {
                                            var vv = this.dataQR.get(j, j);
                                            this.dataQR.set(j, j, 1);
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultRArray(Q, this.dataQR, j, this.gammas[j], j, j, this.numRows, this.v);
                                            this.dataQR.set(j, j, vv);
                                        }
                                        return Q;
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.decompose = function (A) {
                                        this.setExpectedMaxSize(A.numRows, A.numCols);
                                        this.convertToColumnMajor(A);
                                        this.maxAbs = org.kevoree.modeling.util.maths.matrix.CommonOps.elementMaxAbs(A);
                                        this.setupPivotInfo();
                                        for (var j = 0; j < this.minLength; j++) {
                                            if (j > 0) {
                                                this.updateNorms(j);
                                            }
                                            this.swapColumns(j);
                                            if (!this.householderPivot(j)) {
                                                break;
                                            }
                                            this.updateA(j);
                                            this.rank = j + 1;
                                        }
                                        return true;
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.setupPivotInfo = function () {
                                        for (var col = 0; col < this.numCols; col++) {
                                            this.pivots[col] = col;
                                            var norm = 0;
                                            for (var row = 0; row < this.numRows; row++) {
                                                var element = this.dataQR.get(row, col);
                                                norm += element * element;
                                            }
                                            this.normsCol[col] = norm;
                                        }
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.updateNorms = function (j) {
                                        var foundNegative = false;
                                        for (var col = j; col < this.numCols; col++) {
                                            var e = this.dataQR.get(j - 1, col);
                                            this.normsCol[col] -= e * e;
                                            if (this.normsCol[col] < 0) {
                                                foundNegative = true;
                                                break;
                                            }
                                        }
                                        if (foundNegative) {
                                            for (var col = j; col < this.numCols; col++) {
                                                var actual = 0;
                                                for (var i = j; i < this.numRows; i++) {
                                                    var v = this.dataQR.get(i, col);
                                                    actual += v * v;
                                                }
                                                this.normsCol[col] = actual;
                                            }
                                        }
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.swapColumns = function (j) {
                                        var largestIndex = j;
                                        var largestNorm = this.normsCol[j];
                                        for (var col = j + 1; col < this.numCols; col++) {
                                            var n = this.normsCol[col];
                                            if (n > largestNorm) {
                                                largestNorm = n;
                                                largestIndex = col;
                                            }
                                        }
                                        var val = 0;
                                        for (var k = 0; k < this.dataQR.rows(); k++) {
                                            val = this.dataQR.get(k, j);
                                            this.dataQR.set(k, j, this.dataQR.get(k, largestIndex));
                                            this.dataQR.set(k, largestIndex, val);
                                        }
                                        var tempN = this.normsCol[j];
                                        this.normsCol[j] = this.normsCol[largestIndex];
                                        this.normsCol[largestIndex] = tempN;
                                        var tempP = this.pivots[j];
                                        this.pivots[j] = this.pivots[largestIndex];
                                        this.pivots[largestIndex] = tempP;
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.householderPivot = function (j) {
                                        var max = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.findMaxArray(this.dataQR, j, j, this.numRows - j);
                                        if (max <= 0) {
                                            return false;
                                        }
                                        else {
                                            this.tau = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.computeTauAndDivide4argArray(j, this.numRows, this.dataQR, j, max);
                                            var u_0 = this.dataQR.get(j, j) + this.tau;
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.divideElements4argArray(j + 1, this.numRows, this.dataQR, j, u_0);
                                            this.gamma = u_0 / this.tau;
                                            this.tau *= max;
                                            this.dataQR.set(j, j, -this.tau);
                                            if (Math.abs(this.tau) <= this.singularThreshold) {
                                                return false;
                                            }
                                        }
                                        this.gammas[j] = this.gamma;
                                        return true;
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.getRank = function () {
                                        return this.rank;
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.getPivots = function () {
                                        return this.pivots;
                                    };
                                    QRxColPivDecompositionHouseholderColumn_D64.prototype.getPivotMatrix = function (P) {
                                        if (P == null) {
                                            P = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.numCols, this.numCols);
                                        }
                                        else {
                                            if (P.numRows != this.numCols) {
                                                throw new Error("Number of rows must be " + this.numCols);
                                            }
                                            else {
                                                if (P.numCols != this.numCols) {
                                                    throw new Error("Number of columns must be " + this.numCols);
                                                }
                                                else {
                                                    P.zero();
                                                }
                                            }
                                        }
                                        for (var i = 0; i < this.numCols; i++) {
                                            P.set(this.pivots[i], i, 1);
                                        }
                                        return P;
                                    };
                                    return QRxColPivDecompositionHouseholderColumn_D64;
                                })(org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QRDecompositionHouseholderColumn_D64);
                                decomposition.QRxColPivDecompositionHouseholderColumn_D64 = QRxColPivDecompositionHouseholderColumn_D64;
                                var QrHelperFunctions_D64 = (function () {
                                    function QrHelperFunctions_D64() {
                                    }
                                    QrHelperFunctions_D64.findMax = function (u, startU, length) {
                                        var max = -1;
                                        var index = startU;
                                        var stopIndex = startU + length;
                                        for (; index < stopIndex; index++) {
                                            var val = u[index];
                                            val = (val < 0.0) ? -val : val;
                                            if (val > max) {
                                                max = val;
                                            }
                                        }
                                        return max;
                                    };
                                    QrHelperFunctions_D64.findMaxArray = function (u, col, startU, length) {
                                        var max = -1;
                                        var index = startU;
                                        var stopIndex = startU + length;
                                        for (; index < stopIndex; index++) {
                                            var val = u.get(index, col);
                                            val = (val < 0.0) ? -val : val;
                                            if (val > max) {
                                                max = val;
                                            }
                                        }
                                        return max;
                                    };
                                    QrHelperFunctions_D64.divideElements4arg = function (j, numRows, u, u_0) {
                                        for (var i = j; i < numRows; i++) {
                                            u[i] /= u_0;
                                        }
                                    };
                                    QrHelperFunctions_D64.divideElements4argArray = function (j, numRows, u, col, u_0) {
                                        for (var i = j; i < numRows; i++) {
                                            u.set(i, col, u.get(i, col) / u_0);
                                        }
                                    };
                                    QrHelperFunctions_D64.divideElements = function (j, numRows, u, startU, u_0) {
                                        for (var i = j; i < numRows; i++) {
                                            u[i + startU] /= u_0;
                                        }
                                    };
                                    QrHelperFunctions_D64.divideElements_Brow = function (j, numRows, u, b, startB, u_0) {
                                        for (var i = j; i < numRows; i++) {
                                            u[i] = b[i + startB] /= u_0;
                                        }
                                    };
                                    QrHelperFunctions_D64.divideElements_Bcol = function (j, numRows, numCols, u, b, startB, u_0) {
                                        var indexB = j * numCols + startB;
                                        for (var i = j; i < numRows; i++) {
                                            b[indexB] = u[i] /= u_0;
                                            indexB += numCols;
                                        }
                                    };
                                    QrHelperFunctions_D64.computeTauAndDivide = function (j, numRows, u, startU, max) {
                                        var tau = 0;
                                        for (var i = j; i < numRows; i++) {
                                            var d = u[startU + i] /= max;
                                            tau += d * d;
                                        }
                                        tau = Math.sqrt(tau);
                                        if (u[startU + j] < 0) {
                                            tau = -tau;
                                        }
                                        return tau;
                                    };
                                    QrHelperFunctions_D64.computeTauAndDivide4arg = function (j, numRows, u, max) {
                                        var tau = 0;
                                        for (var i = j; i < numRows; i++) {
                                            var d = u[i] /= max;
                                            tau += d * d;
                                        }
                                        tau = Math.sqrt(tau);
                                        if (u[j] < 0) {
                                            tau = -tau;
                                        }
                                        return tau;
                                    };
                                    QrHelperFunctions_D64.computeTauAndDivide4argArray = function (j, numRows, u, col, max) {
                                        var tau = 0;
                                        for (var i = j; i < numRows; i++) {
                                            u.set(i, col, u.get(i, col) / max);
                                            var d = u.get(i, col);
                                            tau += d * d;
                                        }
                                        tau = Math.sqrt(tau);
                                        if (u.get(j, col) < 0) {
                                            tau = -tau;
                                        }
                                        return tau;
                                    };
                                    QrHelperFunctions_D64.rank1UpdateMultR = function (A, u, gamma, colA0, w0, w1, _temp) {
                                        for (var i = colA0; i < A.numCols; i++) {
                                            _temp[i] = u[w0] * A.data[w0 * A.numCols + i];
                                        }
                                        for (var k = w0 + 1; k < w1; k++) {
                                            var indexA = k * A.numCols + colA0;
                                            var valU = u[k];
                                            for (var i = colA0; i < A.numCols; i++) {
                                                _temp[i] += valU * A.data[indexA++];
                                            }
                                        }
                                        for (var i = colA0; i < A.numCols; i++) {
                                            _temp[i] *= gamma;
                                        }
                                        for (var i = w0; i < w1; i++) {
                                            var valU = u[i];
                                            var indexA = i * A.numCols + colA0;
                                            for (var j = colA0; j < A.numCols; j++) {
                                                A.data[indexA++] -= valU * _temp[j];
                                            }
                                        }
                                    };
                                    QrHelperFunctions_D64.rank1UpdateMultRArray = function (A, u, col, gamma, colA0, w0, w1, _temp) {
                                        for (var i = colA0; i < A.numCols; i++) {
                                            _temp[i] = u.get(w0, col) * A.data[w0 * A.numCols + i];
                                        }
                                        for (var k = w0 + 1; k < w1; k++) {
                                            var indexA = k * A.numCols + colA0;
                                            var valU = u.get(k, col);
                                            for (var i = colA0; i < A.numCols; i++) {
                                                _temp[i] += valU * A.data[indexA++];
                                            }
                                        }
                                        for (var i = colA0; i < A.numCols; i++) {
                                            _temp[i] *= gamma;
                                        }
                                        for (var i = w0; i < w1; i++) {
                                            var valU = u.get(i, col);
                                            var indexA = i * A.numCols + colA0;
                                            for (var j = colA0; j < A.numCols; j++) {
                                                A.data[indexA++] -= valU * _temp[j];
                                            }
                                        }
                                    };
                                    QrHelperFunctions_D64.rank1UpdateMultR8param = function (A, u, offsetU, gamma, colA0, w0, w1, _temp) {
                                        for (var i = colA0; i < A.numCols; i++) {
                                            _temp[i] = u[w0 + offsetU] * A.data[w0 * A.numCols + i];
                                        }
                                        for (var k = w0 + 1; k < w1; k++) {
                                            var indexA = k * A.numCols + colA0;
                                            var valU = u[k + offsetU];
                                            for (var i = colA0; i < A.numCols; i++) {
                                                _temp[i] += valU * A.data[indexA++];
                                            }
                                        }
                                        for (var i = colA0; i < A.numCols; i++) {
                                            _temp[i] *= gamma;
                                        }
                                        for (var i = w0; i < w1; i++) {
                                            var valU = u[i + offsetU];
                                            var indexA = i * A.numCols + colA0;
                                            for (var j = colA0; j < A.numCols; j++) {
                                                A.data[indexA++] -= valU * _temp[j];
                                            }
                                        }
                                    };
                                    QrHelperFunctions_D64.rank1UpdateMultL = function (A, u, gamma, colA0, w0, w1) {
                                        for (var i = colA0; i < A.numRows; i++) {
                                            var startIndex = i * A.numCols + w0;
                                            var sum = 0;
                                            var rowIndex = startIndex;
                                            for (var j = w0; j < w1; j++) {
                                                sum += A.data[rowIndex++] * u[j];
                                            }
                                            sum = -gamma * sum;
                                            rowIndex = startIndex;
                                            for (var j = w0; j < w1; j++) {
                                                A.data[rowIndex++] += sum * u[j];
                                            }
                                        }
                                    };
                                    return QrHelperFunctions_D64;
                                })();
                                decomposition.QrHelperFunctions_D64 = QrHelperFunctions_D64;
                                var SwitchingEigenDecomposition = (function () {
                                    function SwitchingEigenDecomposition(matrixSize, computeVectors, tol) {
                                        this.A = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(1, 1);
                                        var decomp = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.TridiagonalDecompositionHouseholder_D64();
                                        this.symmetricAlg = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.SymmetricQRAlgorithmDecomposition_D64(decomp, computeVectors);
                                        this.generalAlg = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.WatchedDoubleStepQRDecomposition_D64(computeVectors);
                                        this.computeVectors = computeVectors;
                                        this.tol = tol;
                                    }
                                    SwitchingEigenDecomposition.prototype.getNumberOfEigenvalues = function () {
                                        return this.symmetric ? this.symmetricAlg.getNumberOfEigenvalues() : this.generalAlg.getNumberOfEigenvalues();
                                    };
                                    SwitchingEigenDecomposition.prototype.getEigenvalue = function (index) {
                                        return this.symmetric ? this.symmetricAlg.getEigenvalue(index) : this.generalAlg.getEigenvalue(index);
                                    };
                                    SwitchingEigenDecomposition.prototype.getEigenVector = function (index) {
                                        if (!this.computeVectors) {
                                            throw new Error("Configured to not compute eignevectors");
                                        }
                                        return this.symmetric ? this.symmetricAlg.getEigenVector(index) : this.generalAlg.getEigenVector(index);
                                    };
                                    SwitchingEigenDecomposition.prototype.decompose = function (orig) {
                                        this.A.setMatrix(orig);
                                        this.symmetric = org.kevoree.modeling.util.maths.matrix.MatrixFeatures.isSymmetricDouble(this.A, this.tol);
                                        return this.symmetric ? this.symmetricAlg.decompose(this.A) : this.generalAlg.decompose(this.A);
                                    };
                                    SwitchingEigenDecomposition.prototype.inputModified = function () {
                                        return false;
                                    };
                                    return SwitchingEigenDecomposition;
                                })();
                                decomposition.SwitchingEigenDecomposition = SwitchingEigenDecomposition;
                                var SymmetricQRAlgorithmDecomposition_D64 = (function () {
                                    function SymmetricQRAlgorithmDecomposition_D64(decomp, computeVectors) {
                                        this.computeVectorsWithValues = false;
                                        this.decomp = decomp;
                                        this.computeVectors = computeVectors;
                                        this.helper = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.SymmetricQREigenHelper();
                                        this.vector = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.SymmetricQrAlgorithm(this.helper);
                                    }
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.setComputeVectorsWithValues = function (computeVectorsWithValues) {
                                        if (!this.computeVectors) {
                                            throw new Error("Compute eigenvalues has been set to false");
                                        }
                                        this.computeVectorsWithValues = computeVectorsWithValues;
                                    };
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.setMaxIterations = function (max) {
                                        this.vector.setMaxIterations(max);
                                    };
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.getNumberOfEigenvalues = function () {
                                        return this.helper.getMatrixSize();
                                    };
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.getEigenvalue = function (index) {
                                        var c = new org.kevoree.modeling.util.maths.matrix.Complex64F();
                                        c.setValues(this.values[index], 0);
                                        return c;
                                    };
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.getEigenVector = function (index) {
                                        return this.eigenvectors[index];
                                    };
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.decompose = function (orig) {
                                        if (orig.numCols != orig.numRows) {
                                            throw new Error("Matrix must be square.");
                                        }
                                        if (orig.numCols <= 0) {
                                            return false;
                                        }
                                        var N = orig.numRows;
                                        if (!this.decomp.decompose(orig)) {
                                            return false;
                                        }
                                        if (this.diag == null || this.diag.length < N) {
                                            this.diag = new Float64Array(N);
                                            this.off = new Float64Array(N - 1);
                                        }
                                        this.decomp.getDiagonal(this.diag, this.off);
                                        this.helper.init(this.diag, this.off, N);
                                        if (this.computeVectors) {
                                            if (this.computeVectorsWithValues) {
                                                return this.extractTogether();
                                            }
                                            else {
                                                return this.extractSeparate(N);
                                            }
                                        }
                                        else {
                                            return this.computeEigenValues();
                                        }
                                    };
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.inputModified = function () {
                                        return this.decomp.inputModified();
                                    };
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.extractTogether = function () {
                                        this.V = this.decomp.getQ(this.V, true);
                                        this.helper.setQ(this.V);
                                        this.vector.setFastEigenvalues(false);
                                        if (!this.vector.process3arg(-1, null, null)) {
                                            return false;
                                        }
                                        this.eigenvectors = org.kevoree.modeling.util.maths.matrix.CommonOps.rowsToVector(this.V, this.eigenvectors);
                                        this.values = this.helper.copyEigenvalues(this.values);
                                        return true;
                                    };
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.extractSeparate = function (numCols) {
                                        if (!this.computeEigenValues()) {
                                            return false;
                                        }
                                        this.helper.reset(numCols);
                                        this.diagSaved = this.helper.swapDiag(this.diagSaved);
                                        this.offSaved = this.helper.swapOff(this.offSaved);
                                        this.V = this.decomp.getQ(this.V, true);
                                        this.vector.setQ(this.V);
                                        if (!this.vector.process(-1, null, null, this.values)) {
                                            return false;
                                        }
                                        this.values = this.helper.copyEigenvalues(this.values);
                                        this.eigenvectors = org.kevoree.modeling.util.maths.matrix.CommonOps.rowsToVector(this.V, this.eigenvectors);
                                        return true;
                                    };
                                    SymmetricQRAlgorithmDecomposition_D64.prototype.computeEigenValues = function () {
                                        this.diagSaved = this.helper.copyDiag(this.diagSaved);
                                        this.offSaved = this.helper.copyOff(this.offSaved);
                                        this.vector.setQ(null);
                                        this.vector.setFastEigenvalues(true);
                                        if (!this.vector.process3arg(-1, null, null)) {
                                            return false;
                                        }
                                        this.values = this.helper.copyEigenvalues(this.values);
                                        return true;
                                    };
                                    return SymmetricQRAlgorithmDecomposition_D64;
                                })();
                                decomposition.SymmetricQRAlgorithmDecomposition_D64 = SymmetricQRAlgorithmDecomposition_D64;
                                var SymmetricQREigenHelper = (function () {
                                    function SymmetricQREigenHelper() {
                                        this.rand = new java.util.Random();
                                        this.eigenSmall = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.EigenvalueSmall();
                                        this.splits = new Int32Array(1);
                                    }
                                    SymmetricQREigenHelper.prototype.setQ = function (q) {
                                        this.Q = q;
                                    };
                                    SymmetricQREigenHelper.prototype.incrementSteps = function () {
                                        this.steps++;
                                    };
                                    SymmetricQREigenHelper.prototype.init = function (diag, off, numCols) {
                                        this.reset(numCols);
                                        this.diag = diag;
                                        this.off = off;
                                    };
                                    SymmetricQREigenHelper.prototype.swapDiag = function (diag) {
                                        var ret = this.diag;
                                        this.diag = diag;
                                        return ret;
                                    };
                                    SymmetricQREigenHelper.prototype.swapOff = function (off) {
                                        var ret = this.off;
                                        this.off = off;
                                        return ret;
                                    };
                                    SymmetricQREigenHelper.prototype.reset = function (N) {
                                        this.N = N;
                                        this.diag = null;
                                        this.off = null;
                                        if (this.splits.length < N) {
                                            this.splits = new Int32Array(N);
                                        }
                                        this.numSplits = 0;
                                        this.x1 = 0;
                                        this.x2 = N - 1;
                                        this.steps = this.numExceptional = this.lastExceptional = 0;
                                        this.Q = null;
                                    };
                                    SymmetricQREigenHelper.prototype.copyDiag = function (ret) {
                                        if (ret == null || ret.length < this.N) {
                                            ret = new Float64Array(this.N);
                                        }
                                        java.lang.System.arraycopy(this.diag, 0, ret, 0, this.N);
                                        return ret;
                                    };
                                    SymmetricQREigenHelper.prototype.copyOff = function (ret) {
                                        if (ret == null || ret.length < this.N - 1) {
                                            ret = new Float64Array(this.N - 1);
                                        }
                                        java.lang.System.arraycopy(this.off, 0, ret, 0, this.N - 1);
                                        return ret;
                                    };
                                    SymmetricQREigenHelper.prototype.copyEigenvalues = function (ret) {
                                        if (ret == null || ret.length < this.N) {
                                            ret = new Float64Array(this.N);
                                        }
                                        java.lang.System.arraycopy(this.diag, 0, ret, 0, this.N);
                                        return ret;
                                    };
                                    SymmetricQREigenHelper.prototype.setSubmatrix = function (x1, x2) {
                                        this.x1 = x1;
                                        this.x2 = x2;
                                    };
                                    SymmetricQREigenHelper.prototype.isZero = function (index) {
                                        var bottom = Math.abs(this.diag[index]) + Math.abs(this.diag[index + 1]);
                                        return (Math.abs(this.off[index]) <= bottom * org.kevoree.modeling.util.maths.matrix.CommonOps.EPS);
                                    };
                                    SymmetricQREigenHelper.prototype.performImplicitSingleStep = function (lambda, byAngle) {
                                        if (this.x2 - this.x1 == 1) {
                                            this.createBulge2by2(this.x1, lambda, byAngle);
                                        }
                                        else {
                                            this.createBulge(this.x1, lambda, byAngle);
                                            for (var i = this.x1; i < this.x2 - 2 && this.bulge != 0.0; i++) {
                                                this.removeBulge(i);
                                            }
                                            if (this.bulge != 0.0) {
                                                this.removeBulgeEnd(this.x2 - 2);
                                            }
                                        }
                                    };
                                    SymmetricQREigenHelper.prototype.updateQ = function (m, n, c, s) {
                                        var rowA = m * this.N;
                                        var rowB = n * this.N;
                                        var endA = rowA + this.N;
                                        while (rowA < endA) {
                                            var a = this.Q.data[rowA];
                                            var b = this.Q.data[rowB];
                                            this.Q.data[rowA++] = c * a + s * b;
                                            this.Q.data[rowB++] = -s * a + c * b;
                                        }
                                    };
                                    SymmetricQREigenHelper.prototype.createBulge = function (x1, p, byAngle) {
                                        var a11 = this.diag[x1];
                                        var a22 = this.diag[x1 + 1];
                                        var a12 = this.off[x1];
                                        var a23 = this.off[x1 + 1];
                                        if (byAngle) {
                                            this.c = Math.cos(p);
                                            this.s = Math.sin(p);
                                            this.c2 = this.c * this.c;
                                            this.s2 = this.s * this.s;
                                            this.cs = this.c * this.s;
                                        }
                                        else {
                                            this.computeRotation(a11 - p, a12);
                                        }
                                        this.diag[x1] = this.c2 * a11 + 2.0 * this.cs * a12 + this.s2 * a22;
                                        this.diag[x1 + 1] = this.c2 * a22 - 2.0 * this.cs * a12 + this.s2 * a11;
                                        this.off[x1] = a12 * (this.c2 - this.s2) + this.cs * (a22 - a11);
                                        this.off[x1 + 1] = this.c * a23;
                                        this.bulge = this.s * a23;
                                        if (this.Q != null) {
                                            this.updateQ(x1, x1 + 1, this.c, this.s);
                                        }
                                    };
                                    SymmetricQREigenHelper.prototype.createBulge2by2 = function (x1, p, byAngle) {
                                        var a11 = this.diag[x1];
                                        var a22 = this.diag[x1 + 1];
                                        var a12 = this.off[x1];
                                        if (byAngle) {
                                            this.c = Math.cos(p);
                                            this.s = Math.sin(p);
                                            this.c2 = this.c * this.c;
                                            this.s2 = this.s * this.s;
                                            this.cs = this.c * this.s;
                                        }
                                        else {
                                            this.computeRotation(a11 - p, a12);
                                        }
                                        this.diag[x1] = this.c2 * a11 + 2.0 * this.cs * a12 + this.s2 * a22;
                                        this.diag[x1 + 1] = this.c2 * a22 - 2.0 * this.cs * a12 + this.s2 * a11;
                                        this.off[x1] = a12 * (this.c2 - this.s2) + this.cs * (a22 - a11);
                                        if (this.Q != null) {
                                            this.updateQ(x1, x1 + 1, this.c, this.s);
                                        }
                                    };
                                    SymmetricQREigenHelper.prototype.computeRotation = function (run, rise) {
                                        if (Math.abs(rise) > Math.abs(run)) {
                                            var k = run / rise;
                                            var bottom = 1.0 + k * k;
                                            var bottom_sq = Math.sqrt(bottom);
                                            this.s2 = 1.0 / bottom;
                                            this.c2 = k * k / bottom;
                                            this.cs = k / bottom;
                                            this.s = 1.0 / bottom_sq;
                                            this.c = k / bottom_sq;
                                        }
                                        else {
                                            var t = rise / run;
                                            var bottom = 1.0 + t * t;
                                            var bottom_sq = Math.sqrt(bottom);
                                            this.c2 = 1.0 / bottom;
                                            this.s2 = t * t / bottom;
                                            this.cs = t / bottom;
                                            this.c = 1.0 / bottom_sq;
                                            this.s = t / bottom_sq;
                                        }
                                    };
                                    SymmetricQREigenHelper.prototype.removeBulge = function (x1) {
                                        var a22 = this.diag[x1 + 1];
                                        var a33 = this.diag[x1 + 2];
                                        var a12 = this.off[x1];
                                        var a23 = this.off[x1 + 1];
                                        var a34 = this.off[x1 + 2];
                                        this.computeRotation(a12, this.bulge);
                                        this.diag[x1 + 1] = this.c2 * a22 + 2.0 * this.cs * a23 + this.s2 * a33;
                                        this.diag[x1 + 2] = this.c2 * a33 - 2.0 * this.cs * a23 + this.s2 * a22;
                                        this.off[x1] = this.c * a12 + this.s * this.bulge;
                                        this.off[x1 + 1] = a23 * (this.c2 - this.s2) + this.cs * (a33 - a22);
                                        this.off[x1 + 2] = this.c * a34;
                                        this.bulge = this.s * a34;
                                        if (this.Q != null) {
                                            this.updateQ(x1 + 1, x1 + 2, this.c, this.s);
                                        }
                                    };
                                    SymmetricQREigenHelper.prototype.removeBulgeEnd = function (x1) {
                                        var a22 = this.diag[x1 + 1];
                                        var a12 = this.off[x1];
                                        var a23 = this.off[x1 + 1];
                                        var a33 = this.diag[x1 + 2];
                                        this.computeRotation(a12, this.bulge);
                                        this.diag[x1 + 1] = this.c2 * a22 + 2.0 * this.cs * a23 + this.s2 * a33;
                                        this.diag[x1 + 2] = this.c2 * a33 - 2.0 * this.cs * a23 + this.s2 * a22;
                                        this.off[x1] = this.c * a12 + this.s * this.bulge;
                                        this.off[x1 + 1] = a23 * (this.c2 - this.s2) + this.cs * (a33 - a22);
                                        if (this.Q != null) {
                                            this.updateQ(x1 + 1, x1 + 2, this.c, this.s);
                                        }
                                    };
                                    SymmetricQREigenHelper.prototype.eigenvalue2by2 = function (x1) {
                                        var a = this.diag[x1];
                                        var b = this.off[x1];
                                        var c = this.diag[x1 + 1];
                                        var absA = Math.abs(a);
                                        var absB = Math.abs(b);
                                        var absC = Math.abs(c);
                                        var scale = absA > absB ? absA : absB;
                                        if (absC > scale) {
                                            scale = absC;
                                        }
                                        if (scale == 0) {
                                            this.off[x1] = 0;
                                            this.diag[x1] = 0;
                                            this.diag[x1 + 1] = 0;
                                            return;
                                        }
                                        a /= scale;
                                        b /= scale;
                                        c /= scale;
                                        this.eigenSmall.symm2x2_fast(a, b, c);
                                        this.off[x1] = 0;
                                        this.diag[x1] = scale * this.eigenSmall.value0.real;
                                        this.diag[x1 + 1] = scale * this.eigenSmall.value1.real;
                                    };
                                    SymmetricQREigenHelper.prototype.exceptionalShift = function () {
                                        this.numExceptional++;
                                        var mag = 0.05 * this.numExceptional;
                                        if (mag > 1.0) {
                                            mag = 1.0;
                                        }
                                        var theta = 2.0 * (this.rand.nextDouble() - 0.5) * mag;
                                        this.performImplicitSingleStep(theta, true);
                                        this.lastExceptional = this.steps;
                                    };
                                    SymmetricQREigenHelper.prototype.nextSplit = function () {
                                        if (this.numSplits == 0) {
                                            return false;
                                        }
                                        this.x2 = this.splits[--this.numSplits];
                                        if (this.numSplits > 0) {
                                            this.x1 = this.splits[this.numSplits - 1] + 1;
                                        }
                                        else {
                                            this.x1 = 0;
                                        }
                                        return true;
                                    };
                                    SymmetricQREigenHelper.prototype.computeShift = function () {
                                        if (this.x2 - this.x1 >= 1) {
                                            return this.computeWilkinsonShift();
                                        }
                                        else {
                                            return this.diag[this.x2];
                                        }
                                    };
                                    SymmetricQREigenHelper.prototype.computeWilkinsonShift = function () {
                                        var a = this.diag[this.x2 - 1];
                                        var b = this.off[this.x2 - 1];
                                        var c = this.diag[this.x2];
                                        var absA = Math.abs(a);
                                        var absB = Math.abs(b);
                                        var absC = Math.abs(c);
                                        var scale = absA > absB ? absA : absB;
                                        if (absC > scale) {
                                            scale = absC;
                                        }
                                        if (scale == 0) {
                                            throw new Error("this should never happen");
                                        }
                                        a /= scale;
                                        b /= scale;
                                        c /= scale;
                                        this.eigenSmall.symm2x2_fast(a, b, c);
                                        var diff0 = Math.abs(this.eigenSmall.value0.real - c);
                                        var diff1 = Math.abs(this.eigenSmall.value1.real - c);
                                        if (diff0 < diff1) {
                                            return scale * this.eigenSmall.value0.real;
                                        }
                                        else {
                                            return scale * this.eigenSmall.value1.real;
                                        }
                                    };
                                    SymmetricQREigenHelper.prototype.getMatrixSize = function () {
                                        return this.N;
                                    };
                                    SymmetricQREigenHelper.prototype.resetSteps = function () {
                                        this.steps = 0;
                                        this.lastExceptional = 0;
                                    };
                                    return SymmetricQREigenHelper;
                                })();
                                decomposition.SymmetricQREigenHelper = SymmetricQREigenHelper;
                                var SymmetricQrAlgorithm = (function () {
                                    function SymmetricQrAlgorithm(helper) {
                                        this.exceptionalThresh = 15;
                                        this.maxIterations = this.exceptionalThresh * 15;
                                        this.helper = helper;
                                    }
                                    SymmetricQrAlgorithm.prototype.setMaxIterations = function (maxIterations) {
                                        this.maxIterations = maxIterations;
                                    };
                                    SymmetricQrAlgorithm.prototype.getQ = function () {
                                        return this.Q;
                                    };
                                    SymmetricQrAlgorithm.prototype.setQ = function (q) {
                                        this.Q = q;
                                    };
                                    SymmetricQrAlgorithm.prototype.setFastEigenvalues = function (fastEigenvalues) {
                                        this.fastEigenvalues = fastEigenvalues;
                                    };
                                    SymmetricQrAlgorithm.prototype.getEigenvalue = function (index) {
                                        return this.helper.diag[index];
                                    };
                                    SymmetricQrAlgorithm.prototype.getNumberOfEigenvalues = function () {
                                        return this.helper.N;
                                    };
                                    SymmetricQrAlgorithm.prototype.process = function (sideLength, diag, off, eigenvalues) {
                                        if (diag != null) {
                                            this.helper.init(diag, off, sideLength);
                                        }
                                        if (this.Q == null) {
                                            this.Q = org.kevoree.modeling.util.maths.matrix.CommonOps.identity1D(this.helper.N);
                                        }
                                        this.helper.setQ(this.Q);
                                        this.followingScript = true;
                                        this.eigenvalues = eigenvalues;
                                        this.fastEigenvalues = false;
                                        return this._process();
                                    };
                                    SymmetricQrAlgorithm.prototype.process3arg = function (sideLength, diag, off) {
                                        if (diag != null) {
                                            this.helper.init(diag, off, sideLength);
                                        }
                                        this.followingScript = false;
                                        this.eigenvalues = null;
                                        return this._process();
                                    };
                                    SymmetricQrAlgorithm.prototype._process = function () {
                                        while (this.helper.x2 >= 0) {
                                            if (this.helper.steps > this.maxIterations) {
                                                return false;
                                            }
                                            if (this.helper.x1 == this.helper.x2) {
                                                this.helper.resetSteps();
                                                if (!this.helper.nextSplit()) {
                                                    break;
                                                }
                                            }
                                            else {
                                                if (this.fastEigenvalues && this.helper.x2 - this.helper.x1 == 1) {
                                                    this.helper.resetSteps();
                                                    this.helper.eigenvalue2by2(this.helper.x1);
                                                    this.helper.setSubmatrix(this.helper.x2, this.helper.x2);
                                                }
                                                else {
                                                    if (this.helper.steps - this.helper.lastExceptional > this.exceptionalThresh) {
                                                        this.helper.exceptionalShift();
                                                    }
                                                    else {
                                                        this.performStep();
                                                    }
                                                }
                                            }
                                            this.helper.incrementSteps();
                                        }
                                        return true;
                                    };
                                    SymmetricQrAlgorithm.prototype.performStep = function () {
                                        for (var i = this.helper.x2 - 1; i >= this.helper.x1; i--) {
                                            if (this.helper.isZero(i)) {
                                                this.helper.splits[this.helper.numSplits++] = i;
                                                this.helper.x1 = i + 1;
                                                return;
                                            }
                                        }
                                        var lambda;
                                        if (this.followingScript) {
                                            if (this.helper.steps > 10) {
                                                this.followingScript = false;
                                                return;
                                            }
                                            else {
                                                lambda = this.eigenvalues[this.helper.x2];
                                            }
                                        }
                                        else {
                                            lambda = this.helper.computeShift();
                                        }
                                        this.helper.performImplicitSingleStep(lambda, false);
                                    };
                                    return SymmetricQrAlgorithm;
                                })();
                                decomposition.SymmetricQrAlgorithm = SymmetricQrAlgorithm;
                                var TridiagonalDecompositionHouseholder_D64 = (function () {
                                    function TridiagonalDecompositionHouseholder_D64() {
                                        this.N = 1;
                                        this.w = new Float64Array(this.N);
                                        this.b = new Float64Array(this.N);
                                        this.gammas = new Float64Array(this.N);
                                    }
                                    TridiagonalDecompositionHouseholder_D64.prototype.getQT = function () {
                                        return this.QT;
                                    };
                                    TridiagonalDecompositionHouseholder_D64.prototype.getDiagonal = function (diag, off) {
                                        for (var i = 0; i < this.N; i++) {
                                            diag[i] = this.QT.data[i * this.N + i];
                                            if (i + 1 < this.N) {
                                                off[i] = this.QT.data[i * this.N + i + 1];
                                            }
                                        }
                                    };
                                    TridiagonalDecompositionHouseholder_D64.prototype.getT = function (T) {
                                        if (T == null) {
                                            T = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.N, this.N);
                                        }
                                        else {
                                            if (this.N != T.numRows || this.N != T.numCols) {
                                                throw new Error("The provided H must have the same dimensions as the decomposed matrix.");
                                            }
                                            else {
                                                T.zero();
                                            }
                                        }
                                        T.data[0] = this.QT.data[0];
                                        for (var i = 1; i < this.N; i++) {
                                            T.set(i, i, this.QT.get(i, i));
                                            var a = this.QT.get(i - 1, i);
                                            T.set(i - 1, i, a);
                                            T.set(i, i - 1, a);
                                        }
                                        if (this.N > 1) {
                                            T.data[(this.N - 1) * this.N + this.N - 1] = this.QT.data[(this.N - 1) * this.N + this.N - 1];
                                            T.data[(this.N - 1) * this.N + this.N - 2] = this.QT.data[(this.N - 2) * this.N + this.N - 1];
                                        }
                                        return T;
                                    };
                                    TridiagonalDecompositionHouseholder_D64.prototype.getQ = function (Q, transposed) {
                                        if (Q == null) {
                                            Q = org.kevoree.modeling.util.maths.matrix.CommonOps.identity1D(this.N);
                                        }
                                        else {
                                            if (this.N != Q.numRows || this.N != Q.numCols) {
                                                throw new Error("The provided H must have the same dimensions as the decomposed matrix.");
                                            }
                                            else {
                                                org.kevoree.modeling.util.maths.matrix.CommonOps.setIdentity(Q);
                                            }
                                        }
                                        for (var i = 0; i < this.N; i++) {
                                            this.w[i] = 0;
                                        }
                                        if (transposed) {
                                            for (var j = this.N - 2; j >= 0; j--) {
                                                this.w[j + 1] = 1;
                                                for (var i = j + 2; i < this.N; i++) {
                                                    this.w[i] = this.QT.data[j * this.N + i];
                                                }
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultL(Q, this.w, this.gammas[j + 1], j + 1, j + 1, this.N);
                                            }
                                        }
                                        else {
                                            for (var j = this.N - 2; j >= 0; j--) {
                                                this.w[j + 1] = 1;
                                                for (var i = j + 2; i < this.N; i++) {
                                                    this.w[i] = this.QT.get(j, i);
                                                }
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(Q, this.w, this.gammas[j + 1], j + 1, j + 1, this.N, this.b);
                                            }
                                        }
                                        return Q;
                                    };
                                    TridiagonalDecompositionHouseholder_D64.prototype.decompose = function (A) {
                                        this.init(A);
                                        for (var k = 1; k < this.N; k++) {
                                            this.similarTransform(k);
                                        }
                                        return true;
                                    };
                                    TridiagonalDecompositionHouseholder_D64.prototype.similarTransform = function (k) {
                                        var t = this.QT.data;
                                        var max = 0;
                                        var rowU = (k - 1) * this.N;
                                        for (var i = k; i < this.N; i++) {
                                            var val = Math.abs(t[rowU + i]);
                                            if (val > max) {
                                                max = val;
                                            }
                                        }
                                        if (max > 0) {
                                            var tau = org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.computeTauAndDivide(k, this.N, t, rowU, max);
                                            var nu = t[rowU + k] + tau;
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.divideElements(k + 1, this.N, t, rowU, nu);
                                            t[rowU + k] = 1.0;
                                            var gamma = nu / tau;
                                            this.gammas[k] = gamma;
                                            this.householderSymmetric(k, gamma);
                                            t[rowU + k] = -tau * max;
                                        }
                                        else {
                                            this.gammas[k] = 0;
                                        }
                                    };
                                    TridiagonalDecompositionHouseholder_D64.prototype.householderSymmetric = function (row, gamma) {
                                        var startU = (row - 1) * this.N;
                                        for (var i = row; i < this.N; i++) {
                                            var total = 0;
                                            for (var j = row; j < i; j++) {
                                                total += this.QT.data[j * this.N + i] * this.QT.data[startU + j];
                                            }
                                            for (var j = i; j < this.N; j++) {
                                                total += this.QT.data[i * this.N + j] * this.QT.data[startU + j];
                                            }
                                            this.w[i] = -gamma * total;
                                        }
                                        var alpha = 0;
                                        for (var i = row; i < this.N; i++) {
                                            alpha += this.QT.data[startU + i] * this.w[i];
                                        }
                                        alpha *= -0.5 * gamma;
                                        for (var i = row; i < this.N; i++) {
                                            this.w[i] += alpha * this.QT.data[startU + i];
                                        }
                                        for (var i = row; i < this.N; i++) {
                                            var ww = this.w[i];
                                            var uu = this.QT.data[startU + i];
                                            var rowA = i * this.N;
                                            for (var j = i; j < this.N; j++) {
                                                this.QT.data[rowA + j] += ww * this.QT.data[startU + j] + this.w[j] * uu;
                                            }
                                        }
                                    };
                                    TridiagonalDecompositionHouseholder_D64.prototype.init = function (A) {
                                        if (A.numRows != A.numCols) {
                                            throw new Error("Must be square");
                                        }
                                        if (A.numCols != this.N) {
                                            this.N = A.numCols;
                                            if (this.w.length < this.N) {
                                                this.w = new Float64Array(this.N);
                                                this.gammas = new Float64Array(this.N);
                                                this.b = new Float64Array(this.N);
                                            }
                                        }
                                        this.QT = A;
                                    };
                                    TridiagonalDecompositionHouseholder_D64.prototype.inputModified = function () {
                                        return true;
                                    };
                                    return TridiagonalDecompositionHouseholder_D64;
                                })();
                                decomposition.TridiagonalDecompositionHouseholder_D64 = TridiagonalDecompositionHouseholder_D64;
                                var WatchedDoubleStepQRDecomposition_D64 = (function () {
                                    function WatchedDoubleStepQRDecomposition_D64(computeVectors) {
                                        this.hessenberg = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.HessenbergSimilarDecomposition_D64(10);
                                        this.algValue = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.WatchedDoubleStepQREigenvalue();
                                        this.algVector = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.WatchedDoubleStepQREigenvector();
                                        this.computeVectors = computeVectors;
                                    }
                                    WatchedDoubleStepQRDecomposition_D64.prototype.decompose = function (A) {
                                        if (!this.hessenberg.decompose(A)) {
                                            return false;
                                        }
                                        this.H = this.hessenberg.getH(null);
                                        this.algValue.getImplicitQR().createR = false;
                                        if (!this.algValue.process(this.H)) {
                                            return false;
                                        }
                                        this.algValue.getImplicitQR().createR = true;
                                        if (this.computeVectors) {
                                            return this.algVector.process(this.algValue.getImplicitQR(), this.H, this.hessenberg.getQ(null));
                                        }
                                        else {
                                            return true;
                                        }
                                    };
                                    WatchedDoubleStepQRDecomposition_D64.prototype.inputModified = function () {
                                        return this.hessenberg.inputModified();
                                    };
                                    WatchedDoubleStepQRDecomposition_D64.prototype.getNumberOfEigenvalues = function () {
                                        return this.algValue.getEigenvalues().length;
                                    };
                                    WatchedDoubleStepQRDecomposition_D64.prototype.getEigenvalue = function (index) {
                                        return this.algValue.getEigenvalues()[index];
                                    };
                                    WatchedDoubleStepQRDecomposition_D64.prototype.getEigenVector = function (index) {
                                        return this.algVector.getEigenvectors()[index];
                                    };
                                    return WatchedDoubleStepQRDecomposition_D64;
                                })();
                                decomposition.WatchedDoubleStepQRDecomposition_D64 = WatchedDoubleStepQRDecomposition_D64;
                                var WatchedDoubleStepQREigen = (function () {
                                    function WatchedDoubleStepQREigen() {
                                        this.rand = new java.util.Random();
                                        this.valueSmall = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.EigenvalueSmall();
                                        this.temp = new Float64Array(9);
                                        this.printHumps = false;
                                        this.checkHessenberg = false;
                                        this.checkOrthogonal = false;
                                        this.checkUncountable = false;
                                        this.useStandardEq = false;
                                        this.useCareful2x2 = true;
                                        this.normalize = true;
                                        this.exceptionalThreshold = 20;
                                        this.maxIterations = this.exceptionalThreshold * 20;
                                        this.createR = true;
                                    }
                                    WatchedDoubleStepQREigen.prototype.incrementSteps = function () {
                                        this.steps++;
                                    };
                                    WatchedDoubleStepQREigen.prototype.setQ = function (Q) {
                                        this.Q = Q;
                                    };
                                    WatchedDoubleStepQREigen.prototype.addEigenvalue = function (v) {
                                        this.numStepsFind[this.numEigen] = this.steps;
                                        this.eigenvalues[this.numEigen].setValues(v, 0);
                                        this.numEigen++;
                                        this.steps = 0;
                                        this.lastExceptional = 0;
                                    };
                                    WatchedDoubleStepQREigen.prototype.addEigenvalue2arg = function (v, i) {
                                        this.numStepsFind[this.numEigen] = this.steps;
                                        this.eigenvalues[this.numEigen].setValues(v, i);
                                        this.numEigen++;
                                        this.steps = 0;
                                        this.lastExceptional = 0;
                                    };
                                    WatchedDoubleStepQREigen.prototype.setChecks = function (hessenberg, orthogonal, uncountable) {
                                        this.checkHessenberg = hessenberg;
                                        this.checkOrthogonal = orthogonal;
                                        this.checkUncountable = uncountable;
                                    };
                                    WatchedDoubleStepQREigen.prototype.isZero = function (x1, x2) {
                                        var target = Math.abs(this.A.get(x1, x2));
                                        var above = Math.abs(this.A.get(x1 - 1, x2));
                                        var right = Math.abs(this.A.get(x1, x2 + 1));
                                        return target <= 0.5 * org.kevoree.modeling.util.maths.matrix.CommonOps.EPS * (above + right);
                                    };
                                    WatchedDoubleStepQREigen.prototype.setup = function (A) {
                                        if (A.numRows != A.numCols) {
                                            throw new Error("Must be square");
                                        }
                                        if (this.N != A.numRows) {
                                            this.N = A.numRows;
                                            this.A = A.copy();
                                            this.u = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(A.numRows, 1);
                                            this._temp = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(A.numRows, 1);
                                            this.numStepsFind = new Int32Array(A.numRows);
                                        }
                                        else {
                                            this.A.setMatrix(A);
                                        }
                                        for (var i = 2; i < this.N; i++) {
                                            for (var j = 0; j < i - 1; j++) {
                                                this.A.set(i, j, 0);
                                            }
                                        }
                                        this.eigenvalues = new Array();
                                        for (var i = 0; i < this.eigenvalues.length; i++) {
                                            this.eigenvalues[i] = new org.kevoree.modeling.util.maths.matrix.Complex64F();
                                        }
                                        this.numEigen = 0;
                                        this.lastExceptional = 0;
                                        this.numExceptional = 0;
                                        this.steps = 0;
                                    };
                                    WatchedDoubleStepQREigen.prototype.exceptionalShift = function (x1, x2) {
                                        if (this.printHumps) {
                                            console.log("Performing exceptional implicit double step");
                                            ;
                                        }
                                        var val = Math.abs(this.A.get(x2, x2));
                                        if (val == 0) {
                                            val = 1;
                                        }
                                        this.numExceptional++;
                                        var p = 1 - Math.pow(0.1, this.numExceptional);
                                        val *= p + 2.0 * (1.0 - p) * (this.rand.nextDouble() - 0.5);
                                        if (this.rand.nextBoolean()) {
                                            val = -val;
                                        }
                                        this.performImplicitSingleStep(x1, x2, val);
                                        this.lastExceptional = this.steps;
                                    };
                                    WatchedDoubleStepQREigen.prototype.implicitDoubleStep = function (x1, x2) {
                                        if (this.printHumps) {
                                            console.log("Performing implicit double step");
                                            ;
                                        }
                                        var z11 = this.A.get(x2 - 1, x2 - 1);
                                        var z12 = this.A.get(x2 - 1, x2);
                                        var z21 = this.A.get(x2, x2 - 1);
                                        var z22 = this.A.get(x2, x2);
                                        var a11 = this.A.get(x1, x1);
                                        var a21 = this.A.get(x1 + 1, x1);
                                        var a12 = this.A.get(x1, x1 + 1);
                                        var a22 = this.A.get(x1 + 1, x1 + 1);
                                        var a32 = this.A.get(x1 + 2, x1 + 1);
                                        if (this.normalize) {
                                            this.temp[0] = a11;
                                            this.temp[1] = a21;
                                            this.temp[2] = a12;
                                            this.temp[3] = a22;
                                            this.temp[4] = a32;
                                            this.temp[5] = z11;
                                            this.temp[6] = z22;
                                            this.temp[7] = z12;
                                            this.temp[8] = z21;
                                            var max = Math.abs(this.temp[0]);
                                            for (var j = 1; j < this.temp.length; j++) {
                                                if (Math.abs(this.temp[j]) > max) {
                                                    max = Math.abs(this.temp[j]);
                                                }
                                            }
                                            a11 /= max;
                                            a21 /= max;
                                            a12 /= max;
                                            a22 /= max;
                                            a32 /= max;
                                            z11 /= max;
                                            z22 /= max;
                                            z12 /= max;
                                            z21 /= max;
                                        }
                                        var b11, b21, b31;
                                        if (this.useStandardEq) {
                                            b11 = ((a11 - z11) * (a11 - z22) - z21 * z12) / a21 + a12;
                                            b21 = a11 + a22 - z11 - z22;
                                            b31 = a32;
                                        }
                                        else {
                                            b11 = ((a11 - z11) * (a11 - z22) - z21 * z12) + a12 * a21;
                                            b21 = (a11 + a22 - z11 - z22) * a21;
                                            b31 = a32 * a21;
                                        }
                                        this.performImplicitDoubleStep5arg(x1, x2, b11, b21, b31);
                                    };
                                    WatchedDoubleStepQREigen.prototype.performImplicitDoubleStep = function (x1, x2, real, img) {
                                        var a11 = this.A.get(x1, x1);
                                        var a21 = this.A.get(x1 + 1, x1);
                                        var a12 = this.A.get(x1, x1 + 1);
                                        var a22 = this.A.get(x1 + 1, x1 + 1);
                                        var a32 = this.A.get(x1 + 2, x1 + 1);
                                        var p_plus_t = 2.0 * real;
                                        var p_times_t = real * real + img * img;
                                        var b11, b21, b31;
                                        if (this.useStandardEq) {
                                            b11 = (a11 * a11 - p_plus_t * a11 + p_times_t) / a21 + a12;
                                            b21 = a11 + a22 - p_plus_t;
                                            b31 = a32;
                                        }
                                        else {
                                            b11 = (a11 * a11 - p_plus_t * a11 + p_times_t) + a12 * a21;
                                            b21 = (a11 + a22 - p_plus_t) * a21;
                                            b31 = a32 * a21;
                                        }
                                        this.performImplicitDoubleStep5arg(x1, x2, b11, b21, b31);
                                    };
                                    WatchedDoubleStepQREigen.prototype.performImplicitDoubleStep5arg = function (x1, x2, b11, b21, b31) {
                                        if (!this.bulgeDoubleStepQn6arg(x1, b11, b21, b31, 0, false)) {
                                            return;
                                        }
                                        if (this.Q != null) {
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(this.Q, this.u.data, this.gamma, 0, x1, x1 + 3, this._temp.data);
                                        }
                                        for (var i = x1; i < x2 - 2; i++) {
                                            if (this.bulgeDoubleStepQn(i) && this.Q != null) {
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(this.Q, this.u.data, this.gamma, 0, i + 1, i + 4, this._temp.data);
                                            }
                                        }
                                        if (x2 - 2 >= 0 && this.bulgeSingleStepQn(x2 - 2) && this.Q != null) {
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(this.Q, this.u.data, this.gamma, 0, x2 - 1, x2 + 1, this._temp.data);
                                        }
                                    };
                                    WatchedDoubleStepQREigen.prototype.performImplicitSingleStep = function (x1, x2, eigenvalue) {
                                        if (!this.createBulgeSingleStep(x1, eigenvalue)) {
                                            return;
                                        }
                                        if (this.Q != null) {
                                            org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(this.Q, this.u.data, this.gamma, 0, x1, x1 + 2, this._temp.data);
                                        }
                                        for (var i = x1; i < x2 - 1; i++) {
                                            if (this.bulgeSingleStepQn(i) && this.Q != null) {
                                                org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(this.Q, this.u.data, this.gamma, 0, i + 1, i + 3, this._temp.data);
                                            }
                                        }
                                    };
                                    WatchedDoubleStepQREigen.prototype.createBulgeSingleStep = function (x1, eigenvalue) {
                                        var b11 = this.A.get(x1, x1) - eigenvalue;
                                        var b21 = this.A.get(x1 + 1, x1);
                                        var threshold = Math.abs(this.A.get(x1, x1)) * org.kevoree.modeling.util.maths.matrix.CommonOps.EPS;
                                        return this.bulgeSingleStepQn5arg(x1, b11, b21, threshold, false);
                                    };
                                    WatchedDoubleStepQREigen.prototype.bulgeDoubleStepQn = function (i) {
                                        var a11 = this.A.get(i + 1, i);
                                        var a21 = this.A.get(i + 2, i);
                                        var a31 = this.A.get(i + 3, i);
                                        var threshold = Math.abs(this.A.get(i, i)) * org.kevoree.modeling.util.maths.matrix.CommonOps.EPS;
                                        return this.bulgeDoubleStepQn6arg(i + 1, a11, a21, a31, threshold, true);
                                    };
                                    WatchedDoubleStepQREigen.prototype.bulgeDoubleStepQn6arg = function (i, a11, a21, a31, threshold, set) {
                                        var max;
                                        if (this.normalize) {
                                            var absA11 = Math.abs(a11);
                                            var absA21 = Math.abs(a21);
                                            var absA31 = Math.abs(a31);
                                            max = absA11 > absA21 ? absA11 : absA21;
                                            if (absA31 > max) {
                                                max = absA31;
                                            }
                                            if (max <= threshold) {
                                                if (set) {
                                                    this.A.set(i, i - 1, 0);
                                                    this.A.set(i + 1, i - 1, 0);
                                                    this.A.set(i + 2, i - 1, 0);
                                                }
                                                return false;
                                            }
                                            a11 /= max;
                                            a21 /= max;
                                            a31 /= max;
                                        }
                                        else {
                                            max = 1;
                                        }
                                        var tau = Math.sqrt(a11 * a11 + a21 * a21 + a31 * a31);
                                        if (a11 < 0) {
                                            tau = -tau;
                                        }
                                        var div = a11 + tau;
                                        this.u.set(i, 0, 1);
                                        this.u.set(i + 1, 0, a21 / div);
                                        this.u.set(i + 2, 0, a31 / div);
                                        this.gamma = div / tau;
                                        org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(this.A, this.u.data, this.gamma, 0, i, i + 3, this._temp.data);
                                        if (set) {
                                            this.A.set(i, i - 1, -max * tau);
                                            this.A.set(i + 1, i - 1, 0);
                                            this.A.set(i + 2, i - 1, 0);
                                        }
                                        org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultL(this.A, this.u.data, this.gamma, 0, i, i + 3);
                                        return true;
                                    };
                                    WatchedDoubleStepQREigen.prototype.bulgeSingleStepQn = function (i) {
                                        var a11 = this.A.get(i + 1, i);
                                        var a21 = this.A.get(i + 2, i);
                                        var threshold = Math.abs(this.A.get(i, i)) * org.kevoree.modeling.util.maths.matrix.CommonOps.EPS;
                                        return this.bulgeSingleStepQn5arg(i + 1, a11, a21, threshold, true);
                                    };
                                    WatchedDoubleStepQREigen.prototype.bulgeSingleStepQn5arg = function (i, a11, a21, threshold, set) {
                                        var max;
                                        if (this.normalize) {
                                            max = Math.abs(a11);
                                            if (max < Math.abs(a21)) {
                                                max = Math.abs(a21);
                                            }
                                            if (max <= threshold) {
                                                if (set) {
                                                    this.A.set(i, i - 1, 0);
                                                    this.A.set(i + 1, i - 1, 0);
                                                }
                                                return false;
                                            }
                                            a11 /= max;
                                            a21 /= max;
                                        }
                                        else {
                                            max = 1;
                                        }
                                        var tau = Math.sqrt(a11 * a11 + a21 * a21);
                                        if (a11 < 0) {
                                            tau = -tau;
                                        }
                                        var div = a11 + tau;
                                        this.u.set(i, 0, 1);
                                        this.u.set(i + 1, 0, a21 / div);
                                        this.gamma = div / tau;
                                        org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultR(this.A, this.u.data, this.gamma, 0, i, i + 2, this._temp.data);
                                        if (set) {
                                            this.A.set(i, i - 1, -max * tau);
                                            this.A.set(i + 1, i - 1, 0);
                                        }
                                        org.kevoree.modeling.util.maths.matrix.solvers.decomposition.QrHelperFunctions_D64.rank1UpdateMultL(this.A, this.u.data, this.gamma, 0, i, i + 2);
                                        return true;
                                    };
                                    WatchedDoubleStepQREigen.prototype.eigen2by2_scale = function (a11, a12, a21, a22) {
                                        var abs11 = Math.abs(a11);
                                        var abs22 = Math.abs(a22);
                                        var abs12 = Math.abs(a12);
                                        var abs21 = Math.abs(a21);
                                        var max = abs11 > abs22 ? abs11 : abs22;
                                        if (max < abs12) {
                                            max = abs12;
                                        }
                                        if (max < abs21) {
                                            max = abs21;
                                        }
                                        if (max == 0) {
                                            this.valueSmall.value0.real = 0;
                                            this.valueSmall.value0.imaginary = 0;
                                            this.valueSmall.value1.real = 0;
                                            this.valueSmall.value1.imaginary = 0;
                                        }
                                        else {
                                            a12 /= max;
                                            a21 /= max;
                                            a11 /= max;
                                            a22 /= max;
                                            if (this.useCareful2x2) {
                                                this.valueSmall.value2x2(a11, a12, a21, a22);
                                            }
                                            else {
                                                this.valueSmall.value2x2_fast(a11, a12, a21, a22);
                                            }
                                            this.valueSmall.value0.real *= max;
                                            this.valueSmall.value0.imaginary *= max;
                                            this.valueSmall.value1.real *= max;
                                            this.valueSmall.value1.imaginary *= max;
                                        }
                                    };
                                    WatchedDoubleStepQREigen.prototype.getNumberOfEigenvalues = function () {
                                        return this.numEigen;
                                    };
                                    WatchedDoubleStepQREigen.prototype.getEigenvalues = function () {
                                        return this.eigenvalues;
                                    };
                                    WatchedDoubleStepQREigen.prototype.addComputedEigen2x2 = function (x1, x2) {
                                        this.eigen2by2_scale(this.A.get(x1, x1), this.A.get(x1, x2), this.A.get(x2, x1), this.A.get(x2, x2));
                                        if (this.checkUncountable && (org.kevoree.modeling.util.PrimitiveHelper.isNaN(this.valueSmall.value0.real) || org.kevoree.modeling.util.PrimitiveHelper.isNaN(this.valueSmall.value1.real))) {
                                            throw new Error("Uncountable");
                                        }
                                        this.addEigenvalue2arg(this.valueSmall.value0.real, this.valueSmall.value0.imaginary);
                                        this.addEigenvalue2arg(this.valueSmall.value1.real, this.valueSmall.value1.imaginary);
                                    };
                                    WatchedDoubleStepQREigen.prototype.isReal2x2 = function (x1, x2) {
                                        this.eigen2by2_scale(this.A.get(x1, x1), this.A.get(x1, x2), this.A.get(x2, x1), this.A.get(x2, x2));
                                        return this.valueSmall.value0.isReal();
                                    };
                                    WatchedDoubleStepQREigen.prototype.addEigenAt = function (x1) {
                                        this.addEigenvalue(this.A.get(x1, x1));
                                    };
                                    WatchedDoubleStepQREigen.prototype.printSteps = function () {
                                        for (var i = 0; i < this.N; i++) {
                                            console.log("Step[" + i + "] = " + this.numStepsFind[i]);
                                            ;
                                        }
                                    };
                                    return WatchedDoubleStepQREigen;
                                })();
                                decomposition.WatchedDoubleStepQREigen = WatchedDoubleStepQREigen;
                                var WatchedDoubleStepQREigenvalue = (function () {
                                    function WatchedDoubleStepQREigenvalue() {
                                        this.implicitQR = new org.kevoree.modeling.util.maths.matrix.solvers.decomposition.WatchedDoubleStepQREigen();
                                    }
                                    WatchedDoubleStepQREigenvalue.prototype.setup = function (A) {
                                        this.implicitQR.setup(A);
                                        this.implicitQR.setQ(null);
                                        this.splits = new Int32Array(A.numRows);
                                        this.numSplits = 0;
                                    };
                                    WatchedDoubleStepQREigenvalue.prototype.process = function (origA) {
                                        this.setup(origA);
                                        this.x1 = 0;
                                        this.x2 = origA.numRows - 1;
                                        while (this.implicitQR.numEigen < origA.numRows) {
                                            if (this.implicitQR.steps > this.implicitQR.maxIterations) {
                                                return false;
                                            }
                                            this.implicitQR.incrementSteps();
                                            if (this.x2 < this.x1) {
                                                this.moveToNextSplit();
                                            }
                                            else {
                                                if (this.x2 - this.x1 == 0) {
                                                    this.implicitQR.addEigenAt(this.x1);
                                                    this.x2--;
                                                }
                                                else {
                                                    if (this.x2 - this.x1 == 1) {
                                                        this.implicitQR.addComputedEigen2x2(this.x1, this.x2);
                                                        this.x2 -= 2;
                                                    }
                                                    else {
                                                        if (this.implicitQR.steps - this.implicitQR.lastExceptional > this.implicitQR.exceptionalThreshold) {
                                                            if (org.kevoree.modeling.util.PrimitiveHelper.isNaN(this.implicitQR.A.get(this.x2, this.x2))) {
                                                                return false;
                                                            }
                                                            this.implicitQR.exceptionalShift(this.x1, this.x2);
                                                        }
                                                        else {
                                                            if (this.implicitQR.isZero(this.x2, this.x2 - 1)) {
                                                                this.implicitQR.addEigenAt(this.x2);
                                                                this.x2--;
                                                            }
                                                            else {
                                                                this.performIteration();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        return true;
                                    };
                                    WatchedDoubleStepQREigenvalue.prototype.moveToNextSplit = function () {
                                        if (this.numSplits <= 0) {
                                            throw new Error("bad");
                                        }
                                        this.x2 = this.splits[--this.numSplits];
                                        if (this.numSplits > 0) {
                                            this.x1 = this.splits[this.numSplits - 1] + 1;
                                        }
                                        else {
                                            this.x1 = 0;
                                        }
                                    };
                                    WatchedDoubleStepQREigenvalue.prototype.performIteration = function () {
                                        var changed = false;
                                        for (var i = this.x2; i > this.x1; i--) {
                                            if (this.implicitQR.isZero(i, i - 1)) {
                                                this.x1 = i;
                                                this.splits[this.numSplits++] = i - 1;
                                                changed = true;
                                                break;
                                            }
                                        }
                                        if (!changed) {
                                            this.implicitQR.implicitDoubleStep(this.x1, this.x2);
                                        }
                                    };
                                    WatchedDoubleStepQREigenvalue.prototype.getNumberOfEigenvalues = function () {
                                        return this.implicitQR.getNumberOfEigenvalues();
                                    };
                                    WatchedDoubleStepQREigenvalue.prototype.getEigenvalues = function () {
                                        return this.implicitQR.getEigenvalues();
                                    };
                                    WatchedDoubleStepQREigenvalue.prototype.getImplicitQR = function () {
                                        return this.implicitQR;
                                    };
                                    return WatchedDoubleStepQREigenvalue;
                                })();
                                decomposition.WatchedDoubleStepQREigenvalue = WatchedDoubleStepQREigenvalue;
                                var WatchedDoubleStepQREigenvector = (function () {
                                    function WatchedDoubleStepQREigenvector() {
                                    }
                                    WatchedDoubleStepQREigenvector.prototype.process = function (implicit, A, Q_h) {
                                        this.implicit = implicit;
                                        if (this.N != A.numRows) {
                                            this.N = A.numRows;
                                            this.Q = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.N, this.N);
                                            this.splits = new Int32Array(this.N);
                                            this.origEigenvalues = new Array();
                                            this.eigenvectors = new Array();
                                            this.eigenvectorTemp = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.N, 1);
                                            this.solver = new org.kevoree.modeling.util.maths.matrix.solvers.LinearSolverLu_D64(new org.kevoree.modeling.util.maths.matrix.solvers.LUDecompositionAlt_D64());
                                        }
                                        else {
                                            this.eigenvectors = new Array();
                                        }
                                        java.lang.System.arraycopy(implicit.eigenvalues, 0, this.origEigenvalues, 0, this.N);
                                        implicit.setup(A);
                                        implicit.setQ(this.Q);
                                        this.numSplits = 0;
                                        this.onscript = true;
                                        if (!this.findQandR()) {
                                            return false;
                                        }
                                        return this.extractVectors(Q_h);
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.extractVectors = function (Q_h) {
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.memset(this.eigenvectorTemp.data, 0);
                                        var triangular = true;
                                        for (var i = 0; i < this.N; i++) {
                                            var c = this.implicit.eigenvalues[this.N - i - 1];
                                            if (triangular && !c.isReal()) {
                                                triangular = false;
                                            }
                                            if (c.isReal() && this.eigenvectors[this.N - i - 1] == null) {
                                                this.solveEigenvectorDuplicateEigenvalue(c.real, i, triangular);
                                            }
                                        }
                                        if (Q_h != null) {
                                            var temp = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.N, 1);
                                            for (var i = 0; i < this.N; i++) {
                                                var v = this.eigenvectors[i];
                                                if (v != null) {
                                                    org.kevoree.modeling.util.maths.matrix.CommonOps.mult(Q_h, v, temp);
                                                    this.eigenvectors[i] = temp;
                                                    temp = v;
                                                }
                                            }
                                        }
                                        return true;
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.solveEigenvectorDuplicateEigenvalue = function (real, first, isTriangle) {
                                        var scale = Math.abs(real);
                                        if (scale == 0) {
                                            scale = 1;
                                        }
                                        this.eigenvectorTemp.reshapeBoolean(this.N, 1, false);
                                        this.eigenvectorTemp.zero();
                                        if (first > 0) {
                                            if (isTriangle) {
                                                this.solveUsingTriangle(real, first, this.eigenvectorTemp);
                                            }
                                            else {
                                                this.solveWithLU(real, first, this.eigenvectorTemp);
                                            }
                                        }
                                        this.eigenvectorTemp.reshapeBoolean(this.N, 1, false);
                                        for (var i = first; i < this.N; i++) {
                                            var c = this.implicit.eigenvalues[this.N - i - 1];
                                            if (c.isReal() && Math.abs(c.real - real) / scale < 100.0 * org.kevoree.modeling.util.maths.matrix.CommonOps.EPS) {
                                                this.eigenvectorTemp.data[i] = 1;
                                                var v = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(this.N, 1);
                                                org.kevoree.modeling.util.maths.matrix.CommonOps.multTransA(this.Q, this.eigenvectorTemp, v);
                                                this.eigenvectors[this.N - i - 1] = v;
                                                org.kevoree.modeling.util.maths.matrix.CommonOps.normalizeF(v);
                                                this.eigenvectorTemp.data[i] = 0;
                                            }
                                        }
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.solveUsingTriangle = function (real, index, r) {
                                        for (var i = 0; i < index; i++) {
                                            this.implicit.A.add(i, i, -real);
                                        }
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.subvector(this.implicit.A, 0, index, index, false, 0, r);
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.changeSign(r);
                                        org.kevoree.modeling.util.maths.matrix.solvers.TriangularSolver.solveU(this.implicit.A.data, r.data, this.implicit.A.numRows, 0, index);
                                        for (var i = 0; i < index; i++) {
                                            this.implicit.A.add(i, i, real);
                                        }
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.solveWithLU = function (real, index, r) {
                                        var A = new org.kevoree.modeling.util.maths.matrix.DenseMatrix64F(index, index);
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.extract6M(this.implicit.A, 0, index, 0, index, A, 0, 0);
                                        for (var i = 0; i < index; i++) {
                                            A.add(i, i, -real);
                                        }
                                        r.reshapeBoolean(index, 1, false);
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.subvector(this.implicit.A, 0, index, index, false, 0, r);
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.changeSign(r);
                                        if (!this.solver.setA(A)) {
                                            throw new Error("Solve failed");
                                        }
                                        this.solver.solve(r, r);
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.findQandR = function () {
                                        org.kevoree.modeling.util.maths.matrix.CommonOps.setIdentity(this.Q);
                                        this.x1 = 0;
                                        this.x2 = this.N - 1;
                                        this.indexVal = 0;
                                        while (this.indexVal < this.N) {
                                            if (!this.findNextEigenvalue()) {
                                                return false;
                                            }
                                        }
                                        return true;
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.findNextEigenvalue = function () {
                                        var foundEigen = false;
                                        while (!foundEigen && this.implicit.steps < this.implicit.maxIterations) {
                                            this.implicit.incrementSteps();
                                            if (this.x2 < this.x1) {
                                                this.moveToNextSplit();
                                            }
                                            else {
                                                if (this.x2 - this.x1 == 0) {
                                                    this.implicit.addEigenAt(this.x1);
                                                    this.x2--;
                                                    this.indexVal++;
                                                    foundEigen = true;
                                                }
                                                else {
                                                    if (this.x2 - this.x1 == 1 && !this.implicit.isReal2x2(this.x1, this.x2)) {
                                                        this.implicit.addComputedEigen2x2(this.x1, this.x2);
                                                        this.x2 -= 2;
                                                        this.indexVal += 2;
                                                        foundEigen = true;
                                                    }
                                                    else {
                                                        if (this.implicit.steps - this.implicit.lastExceptional > this.implicit.exceptionalThreshold) {
                                                            this.implicit.exceptionalShift(this.x1, this.x2);
                                                            this.implicit.lastExceptional = this.implicit.steps;
                                                        }
                                                        else {
                                                            if (this.implicit.isZero(this.x2, this.x2 - 1)) {
                                                                this.implicit.addEigenAt(this.x2);
                                                                foundEigen = true;
                                                                this.x2--;
                                                                this.indexVal++;
                                                            }
                                                            else {
                                                                this.checkSplitPerformImplicit();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        return foundEigen;
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.checkSplitPerformImplicit = function () {
                                        for (var i = this.x2; i > this.x1; i--) {
                                            if (this.implicit.isZero(i, i - 1)) {
                                                this.x1 = i;
                                                this.splits[this.numSplits++] = i - 1;
                                                return;
                                            }
                                        }
                                        if (this.onscript) {
                                            if (this.implicit.steps > this.implicit.exceptionalThreshold / 2) {
                                                this.onscript = false;
                                            }
                                            else {
                                                var a = this.origEigenvalues[this.indexVal];
                                                if (a.isReal()) {
                                                    this.implicit.performImplicitSingleStep(this.x1, this.x2, a.getReal());
                                                }
                                                else {
                                                    if (this.x2 < this.N - 2) {
                                                        this.implicit.performImplicitDoubleStep(this.x1, this.x2, a.real, a.imaginary);
                                                    }
                                                    else {
                                                        this.onscript = false;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (this.x2 - this.x1 >= 1 && this.x2 < this.N - 2) {
                                                this.implicit.implicitDoubleStep(this.x1, this.x2);
                                            }
                                            else {
                                                this.implicit.performImplicitSingleStep(this.x1, this.x2, this.implicit.A.get(this.x2, this.x2));
                                            }
                                        }
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.moveToNextSplit = function () {
                                        if (this.numSplits <= 0) {
                                            throw new Error("bad");
                                        }
                                        this.x2 = this.splits[--this.numSplits];
                                        if (this.numSplits > 0) {
                                            this.x1 = this.splits[this.numSplits - 1] + 1;
                                        }
                                        else {
                                            this.x1 = 0;
                                        }
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.getQ = function () {
                                        return this.Q;
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.getImplicit = function () {
                                        return this.implicit;
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.getEigenvectors = function () {
                                        return this.eigenvectors;
                                    };
                                    WatchedDoubleStepQREigenvector.prototype.getEigenvalues = function () {
                                        return this.implicit.eigenvalues;
                                    };
                                    return WatchedDoubleStepQREigenvector;
                                })();
                                decomposition.WatchedDoubleStepQREigenvector = WatchedDoubleStepQREigenvector;
                            })(decomposition = solvers.decomposition || (solvers.decomposition = {}));
                        })(solvers = matrix_1.solvers || (matrix_1.solvers = {}));
                    })(matrix = maths.matrix || (maths.matrix = {}));
                    var structure;
                    (function (structure) {
                        var blas;
                        (function (blas) {
                            var KBlasDirectionType = (function () {
                                function KBlasDirectionType() {
                                }
                                KBlasDirectionType.prototype.equals = function (other) {
                                    return this == other;
                                };
                                KBlasDirectionType.values = function () {
                                    return KBlasDirectionType._KBlasDirectionTypeVALUES;
                                };
                                KBlasDirectionType.FORWARD = new KBlasDirectionType();
                                KBlasDirectionType.BACKWARD = new KBlasDirectionType();
                                KBlasDirectionType._KBlasDirectionTypeVALUES = [
                                    KBlasDirectionType.FORWARD,
                                    KBlasDirectionType.BACKWARD
                                ];
                                return KBlasDirectionType;
                            })();
                            blas.KBlasDirectionType = KBlasDirectionType;
                            var KBlasMajorType = (function () {
                                function KBlasMajorType() {
                                }
                                KBlasMajorType.prototype.equals = function (other) {
                                    return this == other;
                                };
                                KBlasMajorType.values = function () {
                                    return KBlasMajorType._KBlasMajorTypeVALUES;
                                };
                                KBlasMajorType.COLUMNWISE = new KBlasMajorType();
                                KBlasMajorType.ROWWISE = new KBlasMajorType();
                                KBlasMajorType._KBlasMajorTypeVALUES = [
                                    KBlasMajorType.COLUMNWISE,
                                    KBlasMajorType.ROWWISE
                                ];
                                return KBlasMajorType;
                            })();
                            blas.KBlasMajorType = KBlasMajorType;
                            var KBlasOrientationType = (function () {
                                function KBlasOrientationType() {
                                }
                                KBlasOrientationType.prototype.equals = function (other) {
                                    return this == other;
                                };
                                KBlasOrientationType.values = function () {
                                    return KBlasOrientationType._KBlasOrientationTypeVALUES;
                                };
                                KBlasOrientationType.UPPER = new KBlasOrientationType();
                                KBlasOrientationType.LOWER = new KBlasOrientationType();
                                KBlasOrientationType._KBlasOrientationTypeVALUES = [
                                    KBlasOrientationType.UPPER,
                                    KBlasOrientationType.LOWER
                                ];
                                return KBlasOrientationType;
                            })();
                            blas.KBlasOrientationType = KBlasOrientationType;
                            var KBlasSideType = (function () {
                                function KBlasSideType() {
                                }
                                KBlasSideType.prototype.equals = function (other) {
                                    return this == other;
                                };
                                KBlasSideType.values = function () {
                                    return KBlasSideType._KBlasSideTypeVALUES;
                                };
                                KBlasSideType.LEFT = new KBlasSideType();
                                KBlasSideType.RIGHT = new KBlasSideType();
                                KBlasSideType._KBlasSideTypeVALUES = [
                                    KBlasSideType.LEFT,
                                    KBlasSideType.RIGHT
                                ];
                                return KBlasSideType;
                            })();
                            blas.KBlasSideType = KBlasSideType;
                            var KBlasTransposeType = (function () {
                                function KBlasTransposeType() {
                                }
                                KBlasTransposeType.prototype.equals = function (other) {
                                    return this == other;
                                };
                                KBlasTransposeType.values = function () {
                                    return KBlasTransposeType._KBlasTransposeTypeVALUES;
                                };
                                KBlasTransposeType.NOTRANSPOSE = new KBlasTransposeType();
                                KBlasTransposeType.TRANSPOSE = new KBlasTransposeType();
                                KBlasTransposeType.CONJUGATE = new KBlasTransposeType();
                                KBlasTransposeType._KBlasTransposeTypeVALUES = [
                                    KBlasTransposeType.NOTRANSPOSE,
                                    KBlasTransposeType.TRANSPOSE,
                                    KBlasTransposeType.CONJUGATE
                                ];
                                return KBlasTransposeType;
                            })();
                            blas.KBlasTransposeType = KBlasTransposeType;
                            var KBlasUnitType = (function () {
                                function KBlasUnitType() {
                                }
                                KBlasUnitType.prototype.equals = function (other) {
                                    return this == other;
                                };
                                KBlasUnitType.values = function () {
                                    return KBlasUnitType._KBlasUnitTypeVALUES;
                                };
                                KBlasUnitType.UNIT = new KBlasUnitType();
                                KBlasUnitType.NONUNIT = new KBlasUnitType();
                                KBlasUnitType._KBlasUnitTypeVALUES = [
                                    KBlasUnitType.UNIT,
                                    KBlasUnitType.NONUNIT
                                ];
                                return KBlasUnitType;
                            })();
                            blas.KBlasUnitType = KBlasUnitType;
                            var impl;
                            (function (impl) {
                                var JavaBlas = (function () {
                                    function JavaBlas() {
                                    }
                                    JavaBlas.prototype.dgemm = function (paramString1, paramString2, paramInt1, paramInt2, paramInt3, paramDouble1, paramArrayOfDouble1, paramInt4, paramInt5, paramArrayOfDouble2, paramInt6, paramInt7, paramDouble2, paramArrayOfDouble3, paramInt8, paramInt9) {
                                        var d = 0.0;
                                        var i = 0;
                                        var k = 0;
                                        var m = 0;
                                        var bool1 = false;
                                        var bool2 = false;
                                        bool1 = paramString1.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE);
                                        bool2 = paramString2.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE);
                                        var i3;
                                        var i4;
                                        if ((paramDouble1 == 0)) {
                                            if ((paramDouble2 == 0)) {
                                                k = 1;
                                                for (i3 = paramInt2; i3 > 0; i3--) {
                                                    i = 1;
                                                    for (i4 = paramInt1; i4 > 0; i4--) {
                                                        paramArrayOfDouble3[(i - 1 + (k - 1) * paramInt9 + paramInt8)] = 0.0;
                                                        i++;
                                                    }
                                                    k++;
                                                }
                                            }
                                            else {
                                                k = 1;
                                                for (i3 = paramInt2; i3 > 0; i3--) {
                                                    i = 1;
                                                    for (i4 = paramInt1; i4 > 0; i4--) {
                                                        paramArrayOfDouble3[(i - 1 + (k - 1) * paramInt9 + paramInt8)] = (paramDouble2 * paramArrayOfDouble3[(i - 1 + (k - 1) * paramInt9 + paramInt8)]);
                                                        i++;
                                                    }
                                                    k++;
                                                }
                                            }
                                            return;
                                        }
                                        var i5;
                                        if (bool2) {
                                            if (bool1) {
                                                k = 1;
                                                for (i3 = paramInt2; i3 > 0; i3--) {
                                                    if ((paramDouble2 == 0)) {
                                                        i = 1;
                                                        for (i4 = paramInt1; i4 > 0; i4--) {
                                                            paramArrayOfDouble3[(i - 1 + (k - 1) * paramInt9 + paramInt8)] = 0.0;
                                                            i++;
                                                        }
                                                    }
                                                    else {
                                                        i = 1;
                                                        i4 = paramInt1;
                                                        for (;;) {
                                                            paramArrayOfDouble3[(i - 1 + (k - 1) * paramInt9 + paramInt8)] = (paramDouble2 * paramArrayOfDouble3[(i - 1 + (k - 1) * paramInt9 + paramInt8)]);
                                                            i++;
                                                            i4--;
                                                            if (i4 <= 0) {
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    m = 1;
                                                    for (i4 = paramInt3; i4 > 0; i4--) {
                                                        if ((paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt7 + paramInt6)] != 0.0)) {
                                                            d = paramDouble1 * paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt7 + paramInt6)];
                                                            i = 1;
                                                            for (i5 = paramInt1; i5 > 0; i5--) {
                                                                paramArrayOfDouble3[(i - 1 + (k - 1) * paramInt9 + paramInt8)] += d * paramArrayOfDouble1[(i - 1 + (m - 1) * paramInt5 + paramInt4)];
                                                                i++;
                                                            }
                                                        }
                                                        m++;
                                                    }
                                                    k++;
                                                }
                                            }
                                            else {
                                                k = 1;
                                                for (i3 = paramInt2; i3 > 0; i3--) {
                                                    i = 1;
                                                    for (i4 = paramInt1; i4 > 0; i4--) {
                                                        d = 0.0;
                                                        m = 1;
                                                        for (i5 = paramInt3; i5 > 0; i5--) {
                                                            d += paramArrayOfDouble1[(m - 1 + (i - 1) * paramInt5 + paramInt4)] * paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt7 + paramInt6)];
                                                            m++;
                                                        }
                                                        if ((paramDouble2 == 0)) {
                                                            paramArrayOfDouble3[(i - 1 + (k - 1) * paramInt9 + paramInt8)] = (paramDouble1 * d);
                                                        }
                                                        else {
                                                            paramArrayOfDouble3[(i - 1 + (k - 1) * paramInt9 + paramInt8)] = (paramDouble1 * d + paramDouble2 * paramArrayOfDouble3[(i - 1 + (k - 1) * paramInt9 + paramInt8)]);
                                                        }
                                                        i++;
                                                    }
                                                    k++;
                                                }
                                            }
                                        }
                                        else {
                                            if (bool1) {
                                                k = 1;
                                                for (i3 = paramInt2; i3 > 0; i3--) {
                                                    if ((paramDouble2 == 0)) {
                                                        i = 1;
                                                        for (i4 = paramInt1; i4 > 0; i4--) {
                                                            paramArrayOfDouble3[(i - 1 + (k - 1) * paramInt9 + paramInt8)] = 0.0;
                                                            i++;
                                                        }
                                                    }
                                                    else {
                                                        if ((paramDouble2 != 1.0)) {
                                                            i = 1;
                                                            i4 = paramInt1;
                                                            for (;;) {
                                                                paramArrayOfDouble3[(i - 1 + (k - 1) * paramInt9 + paramInt8)] = (paramDouble2 * paramArrayOfDouble3[(i - 1 + (k - 1) * paramInt9 + paramInt8)]);
                                                                i++;
                                                                i4--;
                                                                if (i4 <= 0) {
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    m = 1;
                                                    for (i4 = paramInt3; i4 > 0; i4--) {
                                                        if ((paramArrayOfDouble2[(k - 1 + (m - 1) * paramInt7 + paramInt6)] != 0.0)) {
                                                            d = paramDouble1 * paramArrayOfDouble2[(k - 1 + (m - 1) * paramInt7 + paramInt6)];
                                                            i = 1;
                                                            for (i5 = paramInt1; i5 > 0; i5--) {
                                                                paramArrayOfDouble3[(i - 1 + (k - 1) * paramInt9 + paramInt8)] += d * paramArrayOfDouble1[(i - 1 + (m - 1) * paramInt5 + paramInt4)];
                                                                i++;
                                                            }
                                                        }
                                                        m++;
                                                    }
                                                    k++;
                                                }
                                            }
                                            else {
                                                k = 1;
                                                for (i3 = paramInt2; i3 > 0; i3--) {
                                                    i = 1;
                                                    for (i4 = paramInt1; i4 > 0; i4--) {
                                                        d = 0.0;
                                                        m = 1;
                                                        for (i5 = paramInt3; i5 > 0; i5--) {
                                                            d += paramArrayOfDouble1[(m - 1 + (i - 1) * paramInt5 + paramInt4)] * paramArrayOfDouble2[(k - 1 + (m - 1) * paramInt7 + paramInt6)];
                                                            m++;
                                                        }
                                                        if ((paramDouble2 == 0)) {
                                                            paramArrayOfDouble3[(i - 1 + (k - 1) * paramInt9 + paramInt8)] = (paramDouble1 * d);
                                                        }
                                                        else {
                                                            paramArrayOfDouble3[(i - 1 + (k - 1) * paramInt9 + paramInt8)] = (paramDouble1 * d + paramDouble2 * paramArrayOfDouble3[(i - 1 + (k - 1) * paramInt9 + paramInt8)]);
                                                        }
                                                        i++;
                                                    }
                                                    k++;
                                                }
                                            }
                                        }
                                    };
                                    JavaBlas.prototype.dgetri = function (paramInt1, paramArrayOfDouble1, paramInt2, paramInt3, paramArrayOfInt, paramInt4, paramArrayOfDouble2, paramInt5, paramInt6, paramintW) {
                                        var i = 0;
                                        var j = 0;
                                        var k = 0;
                                        var m = 0;
                                        var n = 0;
                                        var i1 = 0;
                                        var i2 = 0;
                                        var i3 = 0;
                                        var i4 = 0;
                                        var i5 = 0;
                                        var i6 = 0;
                                        var i7 = 0;
                                        paramintW[0] = 0;
                                        i5 = this.ilaenv(1, "DGETRI", " ", paramInt1, -1, -1, -1);
                                        i4 = paramInt1 * i5;
                                        paramArrayOfDouble2[paramInt5] = i4;
                                        i = paramInt6 != -1 ? 0 : 1;
                                        if ((paramInt1 < 0)) {
                                            paramintW[0] = -1;
                                        }
                                        else {
                                            if ((paramInt3 < Math.max(1, paramInt1))) {
                                                paramintW[0] = -3;
                                            }
                                        }
                                        if ((paramintW[0] != 0)) {
                                            return;
                                        }
                                        if (i != 0) {
                                            return;
                                        }
                                        if ((paramInt1 == 0)) {
                                            return;
                                        }
                                        this.dtrtri(org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.NONUNIT, paramInt1, paramArrayOfDouble1, paramInt2, paramInt3, paramintW);
                                        if ((paramintW[0] > 0)) {
                                            return;
                                        }
                                        i6 = 2;
                                        i3 = paramInt1;
                                        if (((i5 < paramInt1) ? 1 : 0) != 0) {
                                            k = Math.max(i3 * i5, 1);
                                            if ((paramInt6 < k)) {
                                                i5 = this.floorDiv(paramInt6, i3);
                                                i6 = Math.max(2, this.ilaenv(2, "DGETRI", " ", paramInt1, -1, -1, -1));
                                            }
                                        }
                                        else {
                                            k = paramInt1;
                                        }
                                        var i9;
                                        if (((i5 >= paramInt1))) {
                                            m = paramInt1;
                                            for (var i8 = paramInt1; i8 > 0; i8--) {
                                                j = m + 1;
                                                for (i9 = paramInt1 - (m + 1) + 1; i9 > 0; i9--) {
                                                    paramArrayOfDouble2[(j - 1 + paramInt5)] = paramArrayOfDouble1[(j - 1 + (m - 1) * paramInt3 + paramInt2)];
                                                    paramArrayOfDouble1[(j - 1 + (m - 1) * paramInt3 + paramInt2)] = 0.0;
                                                    j++;
                                                }
                                                if ((m < paramInt1)) {
                                                    this.dgemv(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, paramInt1, paramInt1 - m, -1.0, paramArrayOfDouble1, (m) * paramInt3 + paramInt2, paramInt3, paramArrayOfDouble2, m + paramInt5, 1, 1.0, paramArrayOfDouble1, (m - 1) * paramInt3 + paramInt2, 1);
                                                }
                                                m += -1;
                                            }
                                        }
                                        else {
                                            i7 = this.floorDiv((paramInt1 - 1), i5) * i5 + 1;
                                            m = i7;
                                            for (var i8 = this.floorDiv((1 - i7 + -i5), -i5); i8 > 0; i8--) {
                                                n = Math.min(i5, paramInt1 - m + 1);
                                                i1 = m;
                                                for (i9 = n; i9 > 0; i9--) {
                                                    j = i1 + 1;
                                                    for (var i10 = paramInt1 - (i1 + 1) + 1; i10 > 0; i10--) {
                                                        paramArrayOfDouble2[(j + (i1 - m) * i3 - 1 + paramInt5)] = paramArrayOfDouble1[(j - 1 + (i1 - 1) * paramInt3 + paramInt2)];
                                                        paramArrayOfDouble1[(j - 1 + (i1 - 1) * paramInt3 + paramInt2)] = 0.0;
                                                        j++;
                                                    }
                                                    i1++;
                                                }
                                                if ((m + n <= paramInt1)) {
                                                    this.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, paramInt1, n, paramInt1 - m - n + 1, -1.0, paramArrayOfDouble1, (m + n - 1) * paramInt3 + paramInt2, paramInt3, paramArrayOfDouble2, m + n - 1 + paramInt5, i3, 1.0, paramArrayOfDouble1, (m - 1) * paramInt3 + paramInt2, paramInt3);
                                                }
                                                this.dtrsm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, paramInt1, n, 1.0, paramArrayOfDouble2, m - 1 + paramInt5, i3, paramArrayOfDouble1, (m - 1) * paramInt3 + paramInt2, paramInt3);
                                                m += -i5;
                                            }
                                        }
                                        m = paramInt1 - 1;
                                        for (var i8 = -1 + paramInt1; i8 > 0; i8--) {
                                            i2 = paramArrayOfInt[(m - 1 + paramInt4)];
                                            if ((i2 != m)) {
                                                this.dswap(paramInt1, paramArrayOfDouble1, (m - 1) * paramInt3 + paramInt2, 1, paramArrayOfDouble1, (i2 - 1) * paramInt3 + paramInt2, 1);
                                            }
                                            m += -1;
                                        }
                                        paramArrayOfDouble2[(paramInt5)] = k;
                                    };
                                    JavaBlas.prototype.dgetrf = function (paramInt1, paramInt2, paramArrayOfDouble, paramInt3, paramInt4, paramArrayOfInt, paramInt5, info) {
                                        var i = 0;
                                        info[0] = 0;
                                        var j = 0;
                                        var k = 0;
                                        var m = 0;
                                        info[0] = 0;
                                        var localintW = new Int32Array(1);
                                        localintW[0] = 0;
                                        if ((paramInt1 < 0)) {
                                            info[0] = -1;
                                        }
                                        else {
                                            if ((paramInt2 < 0)) {
                                                info[0] = -2;
                                            }
                                            else {
                                                if ((paramInt4 < Math.max(1, paramInt1))) {
                                                    info[0] = -4;
                                                }
                                            }
                                        }
                                        if ((info[0] != 0)) {
                                            return;
                                        }
                                        if (((paramInt2 == 0))) {
                                            return;
                                        }
                                        m = this.ilaenv(1, "DGETRF", " ", paramInt1, paramInt2, -1, -1);
                                        if (((m >= Math.min(paramInt1, paramInt2)))) {
                                            this.dgetf2(paramInt1, paramInt2, paramArrayOfDouble, paramInt3, paramInt4, paramArrayOfInt, paramInt5, info);
                                        }
                                        else {
                                            j = 1;
                                            for (var n = this.floorDiv((Math.min(paramInt1, paramInt2) - 1 + m), m); n > 0; n--) {
                                                k = Math.min(Math.min(paramInt1, paramInt2) - j + 1, m);
                                                this.dgetf2(paramInt1 - j + 1, k, paramArrayOfDouble, j - 1 + (j - 1) * paramInt4 + paramInt3, paramInt4, paramArrayOfInt, j - 1 + paramInt5, localintW);
                                                i = j;
                                                for (var i1 = Math.min(paramInt1, j + k - 1) - j + 1; i1 > 0; i1--) {
                                                    paramArrayOfInt[(i - 1 + paramInt5)] = (j - 1 + paramArrayOfInt[(i - 1 + paramInt5)]);
                                                    i++;
                                                }
                                                this.dlaswp(j - 1, paramArrayOfDouble, paramInt3, paramInt4, j, j + k - 1, paramArrayOfInt, paramInt5, 1);
                                                if ((j + k <= paramInt2)) {
                                                    this.dlaswp(paramInt2 - j - k + 1, paramArrayOfDouble, (j + k - 1) * paramInt4 + paramInt3, paramInt4, j, j + k - 1, paramArrayOfInt, paramInt5, 1);
                                                    this.dtrsm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.LEFT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, k, paramInt2 - j - k + 1, 1.0, paramArrayOfDouble, j - 1 + (j - 1) * paramInt4 + paramInt3, paramInt4, paramArrayOfDouble, j - 1 + (j + k - 1) * paramInt4 + paramInt3, paramInt4);
                                                    if ((j + k <= paramInt1)) {
                                                        this.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, paramInt1 - j - k + 1, paramInt2 - j - k + 1, k, -1.0, paramArrayOfDouble, j + k - 1 + (j - 1) * paramInt4 + paramInt3, paramInt4, paramArrayOfDouble, j - 1 + (j + k - 1) * paramInt4 + paramInt3, paramInt4, 1.0, paramArrayOfDouble, j + k - 1 + (j + k - 1) * paramInt4 + paramInt3, paramInt4);
                                                    }
                                                }
                                                j += m;
                                            }
                                        }
                                    };
                                    JavaBlas.prototype.dgetrs = function (trans, nOrder, nrhs, matA, offsetA, ldA, ipiv, offsetIpiV, matB, offsetB, ldB, info) {
                                        var bool = false;
                                        info[0] = 0;
                                        bool = trans.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE);
                                        if (bool) {
                                            this.dlaswp(nrhs, matB, offsetB, ldB, 1, nOrder, ipiv, offsetIpiV, 1);
                                            this.dtrsm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.LEFT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, nOrder, nrhs, 1.0, matA, offsetA, ldA, matB, offsetB, ldB);
                                            this.dtrsm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.LEFT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.NONUNIT, nOrder, nrhs, 1.0, matA, offsetA, ldA, matB, offsetB, ldB);
                                        }
                                        else {
                                            this.dtrsm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.LEFT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.NONUNIT, nOrder, nrhs, 1.0, matA, offsetA, ldA, matB, offsetB, ldB);
                                            this.dtrsm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.LEFT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, nOrder, nrhs, 1.0, matA, offsetA, ldA, matB, offsetB, ldB);
                                            this.dlaswp(nrhs, matB, offsetB, ldB, 1, nOrder, ipiv, offsetIpiV, -1);
                                        }
                                    };
                                    JavaBlas.prototype.dorgqr = function (paramInt1, paramInt2, paramInt3, paramArrayOfDouble1, paramInt4, paramInt5, paramArrayOfDouble2, paramInt6, paramArrayOfDouble3, paramInt7, paramInt8, paramintW) {
                                        var i = 0;
                                        var j = 0;
                                        var k = 0;
                                        var localintW = new Int32Array(1);
                                        var m = 0;
                                        var n = 0;
                                        var i1 = 0;
                                        var i2 = 0;
                                        var i3 = 0;
                                        var i4 = 0;
                                        var i5 = 0;
                                        var i6 = 0;
                                        var i7 = 0;
                                        var i8 = 0;
                                        paramintW[0] = 0;
                                        i6 = this.ilaenv(1, "DORGQR", " ", paramInt1, paramInt2, paramInt3, -1);
                                        i5 = Math.max(1, paramInt2) * i6;
                                        paramArrayOfDouble3[(paramInt7)] = i5;
                                        i = paramInt8 != -1 ? 0 : 1;
                                        if ((paramInt1 >= 0 ? 0 : 1) != 0) {
                                            paramintW[0] = -1;
                                        }
                                        else {
                                            if (((paramInt2 <= paramInt1 ? 0 : 1) == 0 ? 0 : 1) != 0) {
                                                paramintW[0] = -2;
                                            }
                                            else {
                                                if (((paramInt3 <= paramInt2 ? 0 : 1) == 0 ? 0 : 1) != 0) {
                                                    paramintW[0] = -3;
                                                }
                                                else {
                                                    if ((paramInt5 >= Math.max(1, paramInt1) ? 0 : 1) != 0) {
                                                        paramintW[0] = -5;
                                                    }
                                                }
                                            }
                                        }
                                        if ((paramintW[0] == 0 ? 0 : 1) != 0) {
                                            return;
                                        }
                                        if (i != 0) {
                                            return;
                                        }
                                        if ((paramInt2 > 0 ? 0 : 1) != 0) {
                                            paramArrayOfDouble3[(paramInt7)] = 1;
                                            return;
                                        }
                                        i7 = 2;
                                        i8 = 0;
                                        m = paramInt2;
                                        if (((i6 >= paramInt3 ? 0 : 1) != 0 ? 1 : 0) != 0) {
                                            i8 = Math.max(0, this.ilaenv(3, "DORGQR", " ", paramInt1, paramInt2, paramInt3, -1));
                                            if ((i8 >= paramInt3 ? 0 : 1) != 0) {
                                                i4 = paramInt2;
                                                m = i4 * i6;
                                                if ((paramInt8 >= m ? 0 : 1) != 0) {
                                                    i6 = paramInt8 / i4;
                                                    i7 = Math.max(2, this.ilaenv(2, "DORGQR", " ", paramInt1, paramInt2, paramInt3, -1));
                                                }
                                            }
                                        }
                                        var i9;
                                        var i10;
                                        if (((i8 >= paramInt3 ? 0 : 1) != 0 ? 1 : 0) != 0) {
                                            i1 = (paramInt3 - i8 - 1) / i6 * i6;
                                            i2 = Math.min(paramInt3, i1 + i6);
                                            n = i2 + 1;
                                            for (i9 = paramInt2 - (i2 + 1) + 1; i9 > 0; i9--) {
                                                j = 1;
                                                for (i10 = i2; i10 > 0; i10--) {
                                                    paramArrayOfDouble1[(j - 1 + (n - 1) * paramInt5 + paramInt4)] = 0.0;
                                                    j += 1;
                                                }
                                                n += 1;
                                            }
                                        }
                                        else {
                                            i2 = 0;
                                        }
                                        if ((i2 >= paramInt2 ? 0 : 1) != 0) {
                                            this.dorg2r(paramInt1 - i2, paramInt2 - i2, paramInt3 - i2, paramArrayOfDouble1, i2 + (i2) * paramInt5 + paramInt4, paramInt5, paramArrayOfDouble2, i2 + paramInt6, paramArrayOfDouble3, paramInt7, localintW);
                                        }
                                        if ((i2 <= 0 ? 0 : 1) != 0) {
                                            j = i1 + 1;
                                            for (i9 = (1 - (i1 + 1) + -i6) / -i6; i9 > 0; i9--) {
                                                k = Math.min(i6, paramInt3 - j + 1);
                                                if ((j + k > paramInt2 ? 0 : 1) != 0) {
                                                    this.dlarft(org.kevoree.modeling.util.maths.structure.blas.KBlasDirectionType.FORWARD, org.kevoree.modeling.util.maths.structure.blas.KBlasMajorType.COLUMNWISE, paramInt1 - j + 1, k, paramArrayOfDouble1, j - 1 + (j - 1) * paramInt5 + paramInt4, paramInt5, paramArrayOfDouble2, j - 1 + paramInt6, paramArrayOfDouble3, paramInt7, i4);
                                                    this.dlarfb(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.LEFT, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasDirectionType.FORWARD, org.kevoree.modeling.util.maths.structure.blas.KBlasMajorType.COLUMNWISE, paramInt1 - j + 1, paramInt2 - j - k + 1, k, paramArrayOfDouble1, j - 1 + (j - 1) * paramInt5 + paramInt4, paramInt5, paramArrayOfDouble3, paramInt7, i4, paramArrayOfDouble1, j - 1 + (j + k - 1) * paramInt5 + paramInt4, paramInt5, paramArrayOfDouble3, k + paramInt7, i4);
                                                }
                                                this.dorg2r(paramInt1 - j + 1, k, k, paramArrayOfDouble1, j - 1 + (j - 1) * paramInt5 + paramInt4, paramInt5, paramArrayOfDouble2, j - 1 + paramInt6, paramArrayOfDouble3, paramInt7, localintW);
                                                n = j;
                                                for (i10 = j + k - 1 - j + 1; i10 > 0; i10--) {
                                                    i3 = 1;
                                                    for (var i11 = j - 1; i11 > 0; i11--) {
                                                        paramArrayOfDouble1[(i3 - 1 + (n - 1) * paramInt5 + paramInt4)] = 0.0;
                                                        i3 += 1;
                                                    }
                                                    n += 1;
                                                }
                                                j += -i6;
                                            }
                                        }
                                        paramArrayOfDouble3[(paramInt7)] = m;
                                    };
                                    JavaBlas.prototype.dgeqrf = function (paramInt1, paramInt2, paramArrayOfDouble1, paramInt3, paramInt4, paramArrayOfDouble2, paramInt5, paramArrayOfDouble3, paramInt6, paramInt7, paramintW) {
                                        var i = 0;
                                        var j = 0;
                                        var k = 0;
                                        var localintW = new Int32Array(1);
                                        var m = 0;
                                        var n = 0;
                                        var i1 = 0;
                                        var i2 = 0;
                                        var i3 = 0;
                                        var i4 = 0;
                                        var i5 = 0;
                                        paramintW[0] = 0;
                                        i3 = this.ilaenv(1, "DGEQRF", " ", paramInt1, paramInt2, -1, -1);
                                        i2 = paramInt2 * i3;
                                        paramArrayOfDouble3[paramInt6] = i2;
                                        i = paramInt7 != -1 ? 0 : 1;
                                        if ((paramInt1 >= 0 ? 0 : 1) != 0) {
                                            paramintW[0] = -1;
                                        }
                                        else {
                                            if ((paramInt2 >= 0 ? 0 : 1) != 0) {
                                                paramintW[0] = -2;
                                            }
                                            else {
                                                if ((paramInt4 >= Math.max(1, paramInt1) ? 0 : 1) != 0) {
                                                    paramintW[0] = -4;
                                                }
                                            }
                                        }
                                        if ((paramintW[0] == 0 ? 0 : 1) != 0) {
                                            return;
                                        }
                                        if (i != 0) {
                                            return;
                                        }
                                        n = Math.min(paramInt1, paramInt2);
                                        if ((n != 0 ? 0 : 1) != 0) {
                                            paramArrayOfDouble3[paramInt6] = 1;
                                            return;
                                        }
                                        i4 = 2;
                                        i5 = 0;
                                        m = paramInt2;
                                        if (((i3 >= n ? 0 : 1) != 0 ? 1 : 0) != 0) {
                                            i5 = Math.max(0, this.ilaenv(3, "DGEQRF", " ", paramInt1, paramInt2, -1, -1));
                                            if ((i5 >= n ? 0 : 1) != 0) {
                                                i1 = paramInt2;
                                                m = i1 * i3;
                                                if ((paramInt7 >= m ? 0 : 1) != 0) {
                                                    i3 = paramInt7 / i1;
                                                    i4 = Math.max(2, this.ilaenv(2, "DGEQRF", " ", paramInt1, paramInt2, -1, -1));
                                                }
                                            }
                                        }
                                        if (((i5 >= n ? 0 : 1) != 0 ? 1 : 0) != 0) {
                                            j = 1;
                                            for (var i6 = (n - i5 - 1 + i3) / i3; i6 > 0; i6--) {
                                                k = Math.min(n - j + 1, i3);
                                                this.dgeqr2(paramInt1 - j + 1, k, paramArrayOfDouble1, j - 1 + (j - 1) * paramInt4 + paramInt3, paramInt4, paramArrayOfDouble2, j - 1 + paramInt5, paramArrayOfDouble3, paramInt6, localintW);
                                                if ((j + k > paramInt2 ? 0 : 1) != 0) {
                                                    this.dlarft(org.kevoree.modeling.util.maths.structure.blas.KBlasDirectionType.FORWARD, org.kevoree.modeling.util.maths.structure.blas.KBlasMajorType.COLUMNWISE, paramInt1 - j + 1, k, paramArrayOfDouble1, j - 1 + (j - 1) * paramInt4 + paramInt3, paramInt4, paramArrayOfDouble2, j - 1 + paramInt5, paramArrayOfDouble3, paramInt6, i1);
                                                    this.dlarfb(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.LEFT, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasDirectionType.FORWARD, org.kevoree.modeling.util.maths.structure.blas.KBlasMajorType.COLUMNWISE, paramInt1 - j + 1, paramInt2 - j - k + 1, k, paramArrayOfDouble1, j - 1 + (j - 1) * paramInt4 + paramInt3, paramInt4, paramArrayOfDouble3, paramInt6, i1, paramArrayOfDouble1, j - 1 + (j + k - 1) * paramInt4 + paramInt3, paramInt4, paramArrayOfDouble3, k + paramInt6, i1);
                                                }
                                                j += i3;
                                            }
                                        }
                                        else {
                                            j = 1;
                                        }
                                        if ((j > n ? 0 : 1) != 0) {
                                            this.dgeqr2(paramInt1 - j + 1, paramInt2 - j + 1, paramArrayOfDouble1, j - 1 + (j - 1) * paramInt4 + paramInt3, paramInt4, paramArrayOfDouble2, j - 1 + paramInt5, paramArrayOfDouble3, paramInt6, localintW);
                                        }
                                        paramArrayOfDouble3[(paramInt6)] = m;
                                    };
                                    JavaBlas.prototype.dorg2r = function (paramInt1, paramInt2, paramInt3, paramArrayOfDouble1, paramInt4, paramInt5, paramArrayOfDouble2, paramInt6, paramArrayOfDouble3, paramInt7, paramintW) {
                                        var i = 0;
                                        var j = 0;
                                        var k = 0;
                                        paramintW[0] = 0;
                                        if ((paramInt1 >= 0 ? 0 : 1) != 0) {
                                            paramintW[0] = -1;
                                        }
                                        else {
                                            if (((paramInt2 <= paramInt1 ? 0 : 1) == 0 ? 0 : 1) != 0) {
                                                paramintW[0] = -2;
                                            }
                                            else {
                                                if (((paramInt3 <= paramInt2 ? 0 : 1) == 0 ? 0 : 1) != 0) {
                                                    paramintW[0] = -3;
                                                }
                                                else {
                                                    if ((paramInt5 >= Math.max(1, paramInt1) ? 0 : 1) != 0) {
                                                        paramintW[0] = -5;
                                                    }
                                                }
                                            }
                                        }
                                        if ((paramintW[0] == 0 ? 0 : 1) != 0) {
                                            return;
                                        }
                                        if ((paramInt2 > 0 ? 0 : 1) != 0) {
                                            return;
                                        }
                                        j = paramInt3 + 1;
                                        var n;
                                        for (var m = paramInt2 - (paramInt3 + 1) + 1; m > 0; m--) {
                                            k = 1;
                                            for (n = paramInt1; n > 0; n--) {
                                                paramArrayOfDouble1[(k - 1 + (j - 1) * paramInt5 + paramInt4)] = 0.0;
                                                k += 1;
                                            }
                                            paramArrayOfDouble1[(j - 1 + (j - 1) * paramInt5 + paramInt4)] = 1.0;
                                            j += 1;
                                        }
                                        i = paramInt3;
                                        for (var m = (1 - paramInt3 + -1) / -1; m > 0; m--) {
                                            if ((i >= paramInt2 ? 0 : 1) != 0) {
                                                paramArrayOfDouble1[(i - 1 + (i - 1) * paramInt5 + paramInt4)] = 1.0;
                                                this.dlarf(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.LEFT, paramInt1 - i + 1, paramInt2 - i, paramArrayOfDouble1, i - 1 + (i - 1) * paramInt5 + paramInt4, 1, paramArrayOfDouble2[(i - 1 + paramInt6)], paramArrayOfDouble1, i - 1 + (i) * paramInt5 + paramInt4, paramInt5, paramArrayOfDouble3, paramInt7);
                                            }
                                            if ((i >= paramInt1 ? 0 : 1) != 0) {
                                                this.dscal(paramInt1 - i, -paramArrayOfDouble2[(i - 1 + paramInt6)], paramArrayOfDouble1, i + (i - 1) * paramInt5 + paramInt4, 1);
                                            }
                                            paramArrayOfDouble1[(i - 1 + (i - 1) * paramInt5 + paramInt4)] = (1.0 - paramArrayOfDouble2[(i - 1 + paramInt6)]);
                                            k = 1;
                                            for (n = i - 1; n > 0; n--) {
                                                paramArrayOfDouble1[(k - 1 + (i - 1) * paramInt5 + paramInt4)] = 0.0;
                                                k += 1;
                                            }
                                            i += -1;
                                        }
                                    };
                                    JavaBlas.prototype.dlarfb = function (paramString1, paramString2, paramString3, paramString4, paramInt1, paramInt2, paramInt3, paramArrayOfDouble1, paramInt4, paramInt5, paramArrayOfDouble2, paramInt6, paramInt7, paramArrayOfDouble3, paramInt8, paramInt9, paramArrayOfDouble4, paramInt10, paramInt11) {
                                        var str;
                                        var i = 0;
                                        var j = 0;
                                        if (((paramInt2 > 0 ? 0 : 1) == 0 ? 0 : 1) != 0) {
                                            return;
                                        }
                                        if (paramString2.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE)) {
                                            str = org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE;
                                        }
                                        else {
                                            str = org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE;
                                        }
                                        var k;
                                        var m;
                                        if (paramString4.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasMajorType.COLUMNWISE)) {
                                            if (paramString3.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasDirectionType.FORWARD)) {
                                                if (paramString1.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.LEFT)) {
                                                    j = 1;
                                                    for (k = paramInt3; k > 0; k--) {
                                                        this.dcopy(paramInt2, paramArrayOfDouble3, j - 1 + paramInt8, paramInt9, paramArrayOfDouble4, (j - 1) * paramInt11 + paramInt10, 1);
                                                        j += 1;
                                                    }
                                                    this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, paramInt2, paramInt3, 1.0, paramArrayOfDouble1, paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11);
                                                    if ((paramInt1 <= paramInt3 ? 0 : 1) != 0) {
                                                        this.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, paramInt2, paramInt3, paramInt1 - paramInt3, 1.0, paramArrayOfDouble3, paramInt3 + paramInt8, paramInt9, paramArrayOfDouble1, paramInt3 + paramInt4, paramInt5, 1.0, paramArrayOfDouble4, paramInt10, paramInt11);
                                                    }
                                                    this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, str, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.NONUNIT, paramInt2, paramInt3, 1.0, paramArrayOfDouble2, paramInt6, paramInt7, paramArrayOfDouble4, paramInt10, paramInt11);
                                                    if ((paramInt1 <= paramInt3 ? 0 : 1) != 0) {
                                                        this.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, paramInt1 - paramInt3, paramInt2, paramInt3, -1.0, paramArrayOfDouble1, paramInt3 + paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11, 1.0, paramArrayOfDouble3, paramInt3 + (1 - 1) * paramInt9 + paramInt8, paramInt9);
                                                    }
                                                    this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, paramInt2, paramInt3, 1.0, paramArrayOfDouble1, paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11);
                                                    j = 1;
                                                    for (k = paramInt3; k > 0; k--) {
                                                        i = 1;
                                                        for (m = paramInt2; m > 0; m--) {
                                                            paramArrayOfDouble3[(j - 1 + (i - 1) * paramInt9 + paramInt8)] -= paramArrayOfDouble4[(i - 1 + (j - 1) * paramInt11 + paramInt10)];
                                                            i += 1;
                                                        }
                                                        j += 1;
                                                    }
                                                }
                                                else {
                                                    if (paramString1.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT)) {
                                                        j = 1;
                                                        for (k = paramInt3; k > 0; k--) {
                                                            this.dcopy(paramInt1, paramArrayOfDouble3, (j - 1) * paramInt9 + paramInt8, 1, paramArrayOfDouble4, (j - 1) * paramInt11 + paramInt10, 1);
                                                            j += 1;
                                                        }
                                                        this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, paramInt1, paramInt3, 1.0, paramArrayOfDouble1, paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11);
                                                        if ((paramInt2 <= paramInt3 ? 0 : 1) != 0) {
                                                            this.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, paramInt1, paramInt3, paramInt2 - paramInt3, 1.0, paramArrayOfDouble3, (paramInt3) * paramInt9 + paramInt8, paramInt9, paramArrayOfDouble1, paramInt3 + paramInt4, paramInt5, 1.0, paramArrayOfDouble4, paramInt10, paramInt11);
                                                        }
                                                        this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, paramString2, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.NONUNIT, paramInt1, paramInt3, 1.0, paramArrayOfDouble2, paramInt6, paramInt7, paramArrayOfDouble4, paramInt10, paramInt11);
                                                        if ((paramInt2 <= paramInt3 ? 0 : 1) != 0) {
                                                            this.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, paramInt1, paramInt2 - paramInt3, paramInt3, -1.0, paramArrayOfDouble4, paramInt10, paramInt11, paramArrayOfDouble1, paramInt3 + paramInt4, paramInt5, 1.0, paramArrayOfDouble3, (paramInt3) * paramInt9 + paramInt8, paramInt9);
                                                        }
                                                        this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, paramInt1, paramInt3, 1.0, paramArrayOfDouble1, paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11);
                                                        j = 1;
                                                        k = paramInt3;
                                                        for (;;) {
                                                            i = 1;
                                                            for (m = paramInt1; m > 0; m--) {
                                                                paramArrayOfDouble3[(i - 1 + (j - 1) * paramInt9 + paramInt8)] -= paramArrayOfDouble4[(i - 1 + (j - 1) * paramInt11 + paramInt10)];
                                                                i += 1;
                                                            }
                                                            j += 1;
                                                            k--;
                                                            if (k <= 0) {
                                                                break;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                if (paramString1.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.LEFT)) {
                                                    j = 1;
                                                    for (k = paramInt3; k > 0; k--) {
                                                        this.dcopy(paramInt2, paramArrayOfDouble3, paramInt1 - paramInt3 + j - 1 + paramInt8, paramInt9, paramArrayOfDouble4, (j - 1) * paramInt11 + paramInt10, 1);
                                                        j += 1;
                                                    }
                                                    this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, paramInt2, paramInt3, 1.0, paramArrayOfDouble1, paramInt1 - paramInt3 + paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11);
                                                    if ((paramInt1 <= paramInt3 ? 0 : 1) != 0) {
                                                        this.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, paramInt2, paramInt3, paramInt1 - paramInt3, 1.0, paramArrayOfDouble3, paramInt8, paramInt9, paramArrayOfDouble1, paramInt4, paramInt5, 1.0, paramArrayOfDouble4, paramInt10, paramInt11);
                                                    }
                                                    this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, str, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.NONUNIT, paramInt2, paramInt3, 1.0, paramArrayOfDouble2, paramInt6, paramInt7, paramArrayOfDouble4, paramInt10, paramInt11);
                                                    if ((paramInt1 <= paramInt3 ? 0 : 1) != 0) {
                                                        this.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, paramInt1 - paramInt3, paramInt2, paramInt3, -1.0, paramArrayOfDouble1, paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11, 1.0, paramArrayOfDouble3, paramInt8, paramInt9);
                                                    }
                                                    this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, paramInt2, paramInt3, 1.0, paramArrayOfDouble1, paramInt1 - paramInt3 + paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11);
                                                    j = 1;
                                                    for (k = paramInt3; k > 0; k--) {
                                                        i = 1;
                                                        for (m = paramInt2; m > 0; m--) {
                                                            paramArrayOfDouble3[(paramInt1 - paramInt3 + j - 1 + (i - 1) * paramInt9 + paramInt8)] -= paramArrayOfDouble4[(i - 1 + (j - 1) * paramInt11 + paramInt10)];
                                                            i += 1;
                                                        }
                                                        j += 1;
                                                    }
                                                }
                                                else {
                                                    if (paramString1.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT)) {
                                                        j = 1;
                                                        for (k = paramInt3; k > 0; k--) {
                                                            this.dcopy(paramInt1, paramArrayOfDouble3, (paramInt2 - paramInt3 + j - 1) * paramInt9 + paramInt8, 1, paramArrayOfDouble4, (j - 1) * paramInt11 + paramInt10, 1);
                                                            j += 1;
                                                        }
                                                        this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, paramInt1, paramInt3, 1.0, paramArrayOfDouble1, paramInt2 - paramInt3 + paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11);
                                                        if ((paramInt2 <= paramInt3 ? 0 : 1) != 0) {
                                                            this.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, paramInt1, paramInt3, paramInt2 - paramInt3, 1.0, paramArrayOfDouble3, paramInt8, paramInt9, paramArrayOfDouble1, paramInt4, paramInt5, 1.0, paramArrayOfDouble4, paramInt10, paramInt11);
                                                        }
                                                        this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, paramString2, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.NONUNIT, paramInt1, paramInt3, 1.0, paramArrayOfDouble2, paramInt6, paramInt7, paramArrayOfDouble4, paramInt10, paramInt11);
                                                        if ((paramInt2 <= paramInt3 ? 0 : 1) != 0) {
                                                            this.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, paramInt1, paramInt2 - paramInt3, paramInt3, -1.0, paramArrayOfDouble4, paramInt10, paramInt11, paramArrayOfDouble1, paramInt4, paramInt5, 1.0, paramArrayOfDouble3, paramInt8, paramInt9);
                                                        }
                                                        this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, paramInt1, paramInt3, 1.0, paramArrayOfDouble1, paramInt2 - paramInt3 + paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11);
                                                        j = 1;
                                                        k = paramInt3;
                                                        for (;;) {
                                                            i = 1;
                                                            for (m = paramInt1; m > 0; m--) {
                                                                paramArrayOfDouble3[(i - 1 + (paramInt2 - paramInt3 + j - 1) * paramInt9 + paramInt8)] -= paramArrayOfDouble4[(i - 1 + (j - 1) * paramInt11 + paramInt10)];
                                                                i += 1;
                                                            }
                                                            j += 1;
                                                            k--;
                                                            if (k <= 0) {
                                                                break;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (paramString4.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasMajorType.ROWWISE)) {
                                                if (paramString3.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasDirectionType.FORWARD)) {
                                                    if (paramString1.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.LEFT)) {
                                                        j = 1;
                                                        for (k = paramInt3; k > 0; k--) {
                                                            this.dcopy(paramInt2, paramArrayOfDouble3, j - 1 + paramInt8, paramInt9, paramArrayOfDouble4, (j - 1) * paramInt11 + paramInt10, 1);
                                                            j += 1;
                                                        }
                                                        this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, paramInt2, paramInt3, 1.0, paramArrayOfDouble1, paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11);
                                                        if ((paramInt1 <= paramInt3 ? 0 : 1) != 0) {
                                                            this.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, paramInt2, paramInt3, paramInt1 - paramInt3, 1.0, paramArrayOfDouble3, paramInt3 + paramInt8, paramInt9, paramArrayOfDouble1, (paramInt3) * paramInt5 + paramInt4, paramInt5, 1.0, paramArrayOfDouble4, paramInt10, paramInt11);
                                                        }
                                                        this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, str, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.NONUNIT, paramInt2, paramInt3, 1.0, paramArrayOfDouble2, paramInt6, paramInt7, paramArrayOfDouble4, paramInt10, paramInt11);
                                                        if ((paramInt1 <= paramInt3 ? 0 : 1) != 0) {
                                                            this.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, paramInt1 - paramInt3, paramInt2, paramInt3, -1.0, paramArrayOfDouble1, (paramInt3) * paramInt5 + paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11, 1.0, paramArrayOfDouble3, paramInt3 + (1 - 1) * paramInt9 + paramInt8, paramInt9);
                                                        }
                                                        this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, paramInt2, paramInt3, 1.0, paramArrayOfDouble1, paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11);
                                                        j = 1;
                                                        for (k = paramInt3; k > 0; k--) {
                                                            i = 1;
                                                            for (m = paramInt2; m > 0; m--) {
                                                                paramArrayOfDouble3[(j - 1 + (i - 1) * paramInt9 + paramInt8)] -= paramArrayOfDouble4[(i - 1 + (j - 1) * paramInt11 + paramInt10)];
                                                                i += 1;
                                                            }
                                                            j += 1;
                                                        }
                                                    }
                                                    else {
                                                        if (paramString1.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT)) {
                                                            j = 1;
                                                            for (k = paramInt3; k > 0; k--) {
                                                                this.dcopy(paramInt1, paramArrayOfDouble3, (j - 1) * paramInt9 + paramInt8, 1, paramArrayOfDouble4, (j - 1) * paramInt11 + paramInt10, 1);
                                                                j += 1;
                                                            }
                                                            this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, paramInt1, paramInt3, 1.0, paramArrayOfDouble1, paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11);
                                                            if ((paramInt2 <= paramInt3 ? 0 : 1) != 0) {
                                                                this.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, paramInt1, paramInt3, paramInt2 - paramInt3, 1.0, paramArrayOfDouble3, (paramInt3) * paramInt9 + paramInt8, paramInt9, paramArrayOfDouble1, (paramInt3) * paramInt5 + paramInt4, paramInt5, 1.0, paramArrayOfDouble4, paramInt10, paramInt11);
                                                            }
                                                            this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, paramString2, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.NONUNIT, paramInt1, paramInt3, 1.0, paramArrayOfDouble2, paramInt6, paramInt7, paramArrayOfDouble4, paramInt10, paramInt11);
                                                            if ((paramInt2 <= paramInt3 ? 0 : 1) != 0) {
                                                                this.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, paramInt1, paramInt2 - paramInt3, paramInt3, -1.0, paramArrayOfDouble4, paramInt10, paramInt11, paramArrayOfDouble1, (paramInt3) * paramInt5 + paramInt4, paramInt5, 1.0, paramArrayOfDouble3, (paramInt3) * paramInt9 + paramInt8, paramInt9);
                                                            }
                                                            this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, paramInt1, paramInt3, 1.0, paramArrayOfDouble1, paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11);
                                                            j = 1;
                                                            k = paramInt3;
                                                            for (;;) {
                                                                i = 1;
                                                                for (m = paramInt1; m > 0; m--) {
                                                                    paramArrayOfDouble3[(i - 1 + (j - 1) * paramInt9 + paramInt8)] -= paramArrayOfDouble4[(i - 1 + (j - 1) * paramInt11 + paramInt10)];
                                                                    i += 1;
                                                                }
                                                                j += 1;
                                                                k--;
                                                                if (k <= 0) {
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    if (paramString1.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.LEFT)) {
                                                        j = 1;
                                                        for (k = paramInt3; k > 0; k--) {
                                                            this.dcopy(paramInt2, paramArrayOfDouble3, paramInt1 - paramInt3 + j - 1 + paramInt8, paramInt9, paramArrayOfDouble4, (j - 1) * paramInt11 + paramInt10, 1);
                                                            j += 1;
                                                        }
                                                        this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, paramInt2, paramInt3, 1.0, paramArrayOfDouble1, (paramInt1 - paramInt3) * paramInt5 + paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11);
                                                        if ((paramInt1 <= paramInt3 ? 0 : 1) != 0) {
                                                            this.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, paramInt2, paramInt3, paramInt1 - paramInt3, 1.0, paramArrayOfDouble3, paramInt8, paramInt9, paramArrayOfDouble1, paramInt4, paramInt5, 1.0, paramArrayOfDouble4, paramInt10, paramInt11);
                                                        }
                                                        this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, str, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.NONUNIT, paramInt2, paramInt3, 1.0, paramArrayOfDouble2, paramInt6, paramInt7, paramArrayOfDouble4, paramInt10, paramInt11);
                                                        if ((paramInt1 <= paramInt3 ? 0 : 1) != 0) {
                                                            this.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, paramInt1 - paramInt3, paramInt2, paramInt3, -1.0, paramArrayOfDouble1, paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11, 1.0, paramArrayOfDouble3, paramInt8, paramInt9);
                                                        }
                                                        this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, paramInt2, paramInt3, 1.0, paramArrayOfDouble1, (paramInt1 - paramInt3) * paramInt5 + paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11);
                                                        j = 1;
                                                        for (k = paramInt3; k > 0; k--) {
                                                            i = 1;
                                                            for (m = paramInt2; m > 0; m--) {
                                                                paramArrayOfDouble3[(paramInt1 - paramInt3 + j - 1 + (i - 1) * paramInt9 + paramInt8)] -= paramArrayOfDouble4[(i - 1 + (j - 1) * paramInt11 + paramInt10)];
                                                                i += 1;
                                                            }
                                                            j += 1;
                                                        }
                                                    }
                                                    else {
                                                        if (paramString1.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT)) {
                                                            j = 1;
                                                            for (k = paramInt3; k > 0; k--) {
                                                                this.dcopy(paramInt1, paramArrayOfDouble3, (paramInt2 - paramInt3 + j - 1) * paramInt9 + paramInt8, 1, paramArrayOfDouble4, (j - 1) * paramInt11 + paramInt10, 1);
                                                                j += 1;
                                                            }
                                                            this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, paramInt1, paramInt3, 1.0, paramArrayOfDouble1, (paramInt2 - paramInt3) * paramInt5 + paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11);
                                                            if ((paramInt2 <= paramInt3 ? 0 : 1) != 0) {
                                                                this.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, paramInt1, paramInt3, paramInt2 - paramInt3, 1.0, paramArrayOfDouble3, paramInt8, paramInt9, paramArrayOfDouble1, paramInt4, paramInt5, 1.0, paramArrayOfDouble4, paramInt10, paramInt11);
                                                            }
                                                            this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, paramString2, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.NONUNIT, paramInt1, paramInt3, 1.0, paramArrayOfDouble2, paramInt6, paramInt7, paramArrayOfDouble4, paramInt10, paramInt11);
                                                            if ((paramInt2 <= paramInt3 ? 0 : 1) != 0) {
                                                                this.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, paramInt1, paramInt2 - paramInt3, paramInt3, -1.0, paramArrayOfDouble4, paramInt10, paramInt11, paramArrayOfDouble1, paramInt4, paramInt5, 1.0, paramArrayOfDouble3, paramInt8, paramInt9);
                                                            }
                                                            this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT, paramInt1, paramInt3, 1.0, paramArrayOfDouble1, (paramInt2 - paramInt3) * paramInt5 + paramInt4, paramInt5, paramArrayOfDouble4, paramInt10, paramInt11);
                                                            j = 1;
                                                            k = paramInt3;
                                                            for (;;) {
                                                                i = 1;
                                                                for (m = paramInt1; m > 0; m--) {
                                                                    paramArrayOfDouble3[(i - 1 + (paramInt2 - paramInt3 + j - 1) * paramInt9 + paramInt8)] -= paramArrayOfDouble4[(i - 1 + (j - 1) * paramInt11 + paramInt10)];
                                                                    i += 1;
                                                                }
                                                                j += 1;
                                                                k--;
                                                                if (k <= 0) {
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    };
                                    JavaBlas.prototype.dcopy = function (n, x, offsetx, incx, y, offsety, incy) {
                                        if (n <= 0) {
                                            return;
                                        }
                                        var indexX = offsetx;
                                        var indexY = offsety;
                                        for (var i = 0; i < n; i++) {
                                            y[indexY] = x[indexX];
                                            indexY += incy;
                                            indexX += incx;
                                        }
                                    };
                                    JavaBlas.prototype.dlarft = function (paramString1, paramString2, paramInt1, paramInt2, paramArrayOfDouble1, paramInt3, paramInt4, paramArrayOfDouble2, paramInt5, paramArrayOfDouble3, paramInt6, paramInt7) {
                                        var i = 0;
                                        var j = 0;
                                        var d = 0.0;
                                        if ((paramInt1 != 0 ? 0 : 1) != 0) {
                                            return;
                                        }
                                        var k;
                                        var m;
                                        if (paramString1.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasDirectionType.FORWARD)) {
                                            i = 1;
                                            for (k = paramInt2; k > 0; k--) {
                                                if ((paramArrayOfDouble2[(i - 1 + paramInt5)] != 0.0 ? 0 : 1) != 0) {
                                                    j = 1;
                                                    for (m = i; m > 0; m--) {
                                                        paramArrayOfDouble3[(j - 1 + (i - 1) * paramInt7 + paramInt6)] = 0.0;
                                                        j += 1;
                                                    }
                                                }
                                                else {
                                                    d = paramArrayOfDouble1[(i - 1 + (i - 1) * paramInt4 + paramInt3)];
                                                    paramArrayOfDouble1[(i - 1 + (i - 1) * paramInt4 + paramInt3)] = 1.0;
                                                    if (paramString2.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasMajorType.COLUMNWISE)) {
                                                        this.dgemv(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, paramInt1 - i + 1, i - 1, -paramArrayOfDouble2[(i - 1 + paramInt5)], paramArrayOfDouble1, i - 1 + paramInt3, paramInt4, paramArrayOfDouble1, i - 1 + (i - 1) * paramInt4 + paramInt3, 1, 0.0, paramArrayOfDouble3, (i - 1) * paramInt7 + paramInt6, 1);
                                                    }
                                                    else {
                                                        this.dgemv(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, i - 1, paramInt1 - i + 1, -paramArrayOfDouble2[(i - 1 + paramInt5)], paramArrayOfDouble1, (i - 1) * paramInt4 + paramInt3, paramInt4, paramArrayOfDouble1, i - 1 + (i - 1) * paramInt4 + paramInt3, paramInt4, 0.0, paramArrayOfDouble3, (i - 1) * paramInt7 + paramInt6, 1);
                                                    }
                                                    paramArrayOfDouble1[(i - 1 + (i - 1) * paramInt4 + paramInt3)] = d;
                                                    this.dtrmv(org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.NONUNIT, i - 1, paramArrayOfDouble3, paramInt6, paramInt7, paramArrayOfDouble3, (i - 1) * paramInt7 + paramInt6, 1);
                                                    paramArrayOfDouble3[(i - 1 + (i - 1) * paramInt7 + paramInt6)] = paramArrayOfDouble2[(i - 1 + paramInt5)];
                                                }
                                                i += 1;
                                            }
                                        }
                                        else {
                                            i = paramInt2;
                                            for (k = (1 - paramInt2 + -1) / -1; k > 0; k--) {
                                                if ((paramArrayOfDouble2[(i - 1 + paramInt5)] != 0.0 ? 0 : 1) != 0) {
                                                    j = i;
                                                    for (m = paramInt2 - i + 1; m > 0; m--) {
                                                        paramArrayOfDouble3[(j - 1 + (i - 1) * paramInt7 + paramInt6)] = 0.0;
                                                        j += 1;
                                                    }
                                                }
                                                else {
                                                    if ((i >= paramInt2 ? 0 : 1) != 0) {
                                                        if (paramString2.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasMajorType.COLUMNWISE)) {
                                                            d = paramArrayOfDouble1[(paramInt1 - paramInt2 + i - 1 + (i - 1) * paramInt4 + paramInt3)];
                                                            paramArrayOfDouble1[(paramInt1 - paramInt2 + i - 1 + (i - 1) * paramInt4 + paramInt3)] = 1.0;
                                                            this.dgemv(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, paramInt1 - paramInt2 + i, paramInt2 - i, -paramArrayOfDouble2[(i - 1 + paramInt5)], paramArrayOfDouble1, (i) * paramInt4 + paramInt3, paramInt4, paramArrayOfDouble1, (i - 1) * paramInt4 + paramInt3, 1, 0.0, paramArrayOfDouble3, i + (i - 1) * paramInt7 + paramInt6, 1);
                                                            paramArrayOfDouble1[(paramInt1 - paramInt2 + i - 1 + (i - 1) * paramInt4 + paramInt3)] = d;
                                                        }
                                                        else {
                                                            d = paramArrayOfDouble1[(i - 1 + (paramInt1 - paramInt2 + i - 1) * paramInt4 + paramInt3)];
                                                            paramArrayOfDouble1[(i - 1 + (paramInt1 - paramInt2 + i - 1) * paramInt4 + paramInt3)] = 1.0;
                                                            this.dgemv(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, paramInt2 - i, paramInt1 - paramInt2 + i, -paramArrayOfDouble2[(i - 1 + paramInt5)], paramArrayOfDouble1, i + paramInt3, paramInt4, paramArrayOfDouble1, i - 1 + paramInt3, paramInt4, 0.0, paramArrayOfDouble3, i + (i - 1) * paramInt7 + paramInt6, 1);
                                                            paramArrayOfDouble1[(i - 1 + (paramInt1 - paramInt2 + i - 1) * paramInt4 + paramInt3)] = d;
                                                        }
                                                        this.dtrmv(org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.NONUNIT, paramInt2 - i, paramArrayOfDouble3, i + (i) * paramInt7 + paramInt6, paramInt7, paramArrayOfDouble3, i + (i - 1) * paramInt7 + paramInt6, 1);
                                                    }
                                                    paramArrayOfDouble3[(i - 1 + (i - 1) * paramInt7 + paramInt6)] = paramArrayOfDouble2[(i - 1 + paramInt5)];
                                                }
                                                i += -1;
                                            }
                                        }
                                    };
                                    JavaBlas.prototype.dgeqr2 = function (paramInt1, paramInt2, paramArrayOfDouble1, paramInt3, paramInt4, paramArrayOfDouble2, paramInt5, paramArrayOfDouble3, paramInt6, paramintW) {
                                        var i = 0;
                                        var j = 0;
                                        var d = 0.0;
                                        paramintW[0] = 0;
                                        if ((paramInt1 >= 0 ? 0 : 1) != 0) {
                                            paramintW[0] = -1;
                                        }
                                        else {
                                            if ((paramInt2 >= 0 ? 0 : 1) != 0) {
                                                paramintW[0] = -2;
                                            }
                                            else {
                                                if ((paramInt4 >= Math.max(1, paramInt1) ? 0 : 1) != 0) {
                                                    paramintW[0] = -4;
                                                }
                                            }
                                        }
                                        if ((paramintW[0] == 0 ? 0 : 1) != 0) {
                                            return;
                                        }
                                        j = Math.min(paramInt1, paramInt2);
                                        i = 1;
                                        for (var k = j; k > 0; k--) {
                                            this.dlarfg_adapter(paramInt1 - i + 1, paramArrayOfDouble1, i - 1 + (i - 1) * paramInt4 + paramInt3, paramArrayOfDouble1, Math.min(i + 1, paramInt1) - 1 + (i - 1) * paramInt4 + paramInt3, 1, paramArrayOfDouble2, i - 1 + paramInt5);
                                            if ((i >= paramInt2 ? 0 : 1) != 0) {
                                                d = paramArrayOfDouble1[(i - 1 + (i - 1) * paramInt4 + paramInt3)];
                                                paramArrayOfDouble1[(i - 1 + (i - 1) * paramInt4 + paramInt3)] = 1.0;
                                                this.dlarf(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.LEFT, paramInt1 - i + 1, paramInt2 - i, paramArrayOfDouble1, i - 1 + (i - 1) * paramInt4 + paramInt3, 1, paramArrayOfDouble2[(i - 1 + paramInt5)], paramArrayOfDouble1, i - 1 + (i) * paramInt4 + paramInt3, paramInt4, paramArrayOfDouble3, paramInt6);
                                                paramArrayOfDouble1[(i - 1 + (i - 1) * paramInt4 + paramInt3)] = d;
                                            }
                                            i += 1;
                                        }
                                    };
                                    JavaBlas.prototype.dlarfg_adapter = function (paramInt1, paramArrayOfDouble1, paramInt2, paramArrayOfDouble2, paramInt3, paramInt4, paramArrayOfDouble3, paramInt5) {
                                        var localdoubleW1 = new Float64Array(1);
                                        localdoubleW1[0] = (paramArrayOfDouble1[paramInt2]);
                                        var localdoubleW2 = new Float64Array(1);
                                        localdoubleW2[0] = (paramArrayOfDouble3[paramInt5]);
                                        this.dlarfg(paramInt1, localdoubleW1, paramArrayOfDouble2, paramInt3, paramInt4, localdoubleW2);
                                        paramArrayOfDouble1[paramInt2] = localdoubleW1[0];
                                        paramArrayOfDouble3[paramInt5] = localdoubleW2[0];
                                    };
                                    JavaBlas.prototype.dlarf = function (paramString, paramInt1, paramInt2, paramArrayOfDouble1, paramInt3, paramInt4, paramDouble, paramArrayOfDouble2, paramInt5, paramInt6, paramArrayOfDouble3, paramInt7) {
                                        if (paramString.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.LEFT)) {
                                            if ((paramDouble == 0.0 ? 0 : 1) != 0) {
                                                this.dgemv(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.TRANSPOSE, paramInt1, paramInt2, 1.0, paramArrayOfDouble2, paramInt5, paramInt6, paramArrayOfDouble1, paramInt3, paramInt4, 0.0, paramArrayOfDouble3, paramInt7, 1);
                                                this.dger(paramInt1, paramInt2, -paramDouble, paramArrayOfDouble1, paramInt3, paramInt4, paramArrayOfDouble3, paramInt7, 1, paramArrayOfDouble2, paramInt5, paramInt6);
                                            }
                                        }
                                        else {
                                            if ((paramDouble == 0.0 ? 0 : 1) != 0) {
                                                this.dgemv(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, paramInt1, paramInt2, 1.0, paramArrayOfDouble2, paramInt5, paramInt6, paramArrayOfDouble1, paramInt3, paramInt4, 0.0, paramArrayOfDouble3, paramInt7, 1);
                                                this.dger(paramInt1, paramInt2, -paramDouble, paramArrayOfDouble3, paramInt7, 1, paramArrayOfDouble1, paramInt3, paramInt4, paramArrayOfDouble2, paramInt5, paramInt6);
                                            }
                                        }
                                    };
                                    JavaBlas.prototype.dnrm2 = function (paramInt1, paramArrayOfDouble, paramInt2, paramInt3) {
                                        var d1 = 0.0;
                                        var d2 = 0.0;
                                        var d3 = 0.0;
                                        var d4 = 0.0;
                                        var i = 0;
                                        var d5 = 0.0;
                                        if (((paramInt3 >= 1 ? 0 : 1) == 0 ? 0 : 1) != 0) {
                                            d2 = 0.0;
                                        }
                                        else {
                                            if ((paramInt1 != 1 ? 0 : 1) != 0) {
                                                d2 = Math.abs(paramArrayOfDouble[(paramInt2)]);
                                            }
                                            else {
                                                d3 = 0.0;
                                                d4 = 1.0;
                                                i = 1;
                                                for (var j = (1 + (paramInt1 - 1) * paramInt3 - 1 + paramInt3) / paramInt3; j > 0; j--) {
                                                    if ((paramArrayOfDouble[(i - 1 + paramInt2)] == 0.0 ? 0 : 1) != 0) {
                                                        d1 = Math.abs(paramArrayOfDouble[(i - 1 + paramInt2)]);
                                                        if ((d3 >= d1 ? 0 : 1) != 0) {
                                                            d4 = 1.0 + d4 * Math.pow(d3 / d1, 2);
                                                            d3 = d1;
                                                        }
                                                        else {
                                                            d4 += Math.pow(d1 / d3, 2);
                                                        }
                                                    }
                                                    i += paramInt3;
                                                }
                                                d2 = d3 * Math.sqrt(d4);
                                            }
                                        }
                                        d5 = d2;
                                        return d5;
                                    };
                                    JavaBlas.prototype.dlapy2 = function (paramDouble1, paramDouble2) {
                                        var d1 = 0.0;
                                        var d2 = 0.0;
                                        var d3 = 0.0;
                                        var d4 = 0.0;
                                        var d5 = 0.0;
                                        d2 = Math.abs(paramDouble1);
                                        d3 = Math.abs(paramDouble2);
                                        d1 = Math.max(d2, d3);
                                        d4 = Math.min(d2, d3);
                                        if ((d4 != 0.0 ? 0 : 1) != 0) {
                                            d5 = d1;
                                        }
                                        else {
                                            d5 = d1 * Math.sqrt(1.0 + Math.pow(d4 / d1, 2));
                                        }
                                        return d5;
                                    };
                                    JavaBlas.prototype.dsign = function (paramDouble1, paramDouble2) {
                                        if (paramDouble2 > 0.0) {
                                            return Math.abs(paramDouble1);
                                        }
                                        if (paramDouble2 < 0.0) {
                                            return -Math.abs(paramDouble1);
                                        }
                                        return 0.0;
                                    };
                                    JavaBlas.prototype.dlarfg = function (paramInt1, paramdoubleW1, paramArrayOfDouble, paramInt2, paramInt3, paramdoubleW2) {
                                        var i = 0;
                                        var j = 0;
                                        var d1 = 0.0;
                                        var d2 = 0.0;
                                        var d3 = 0.0;
                                        var d4 = 0.0;
                                        if ((paramInt1 > 1 ? 0 : 1) != 0) {
                                            paramdoubleW2[0] = 0.0;
                                            return;
                                        }
                                        d4 = this.dnrm2(paramInt1 - 1, paramArrayOfDouble, paramInt2, paramInt3);
                                        if ((d4 != 0.0 ? 0 : 1) != 0) {
                                            paramdoubleW2[0] = 0.0;
                                        }
                                        else {
                                            d1 = -this.dsign(this.dlapy2(paramdoubleW1[0], d4), paramdoubleW1[0]);
                                            d3 = org.kevoree.modeling.util.PrimitiveHelper.DOUBLE_MIN_VALUE();
                                            if ((Math.abs(d1) >= d3 ? 0 : 1) != 0) {
                                                d2 = 1.0 / d3;
                                                j = 0;
                                                do {
                                                    j += 1;
                                                    this.dscal(paramInt1 - 1, d2, paramArrayOfDouble, paramInt2, paramInt3);
                                                    d1 *= d2;
                                                    paramdoubleW1[0] *= d2;
                                                } while ((Math.abs(d1) >= d3 ? 0 : 1) != 0);
                                                d4 = this.dnrm2(paramInt1 - 1, paramArrayOfDouble, paramInt2, paramInt3);
                                                d1 = -this.dsign(this.dlapy2(paramdoubleW1[0], d4), paramdoubleW1[0]);
                                                paramdoubleW2[0] = ((d1 - paramdoubleW1[0]) / d1);
                                                this.dscal(paramInt1 - 1, 1.0 / (paramdoubleW1[0] - d1), paramArrayOfDouble, paramInt2, paramInt3);
                                                paramdoubleW1[0] = d1;
                                                i = 1;
                                                for (var k = j; k > 0; k--) {
                                                    paramdoubleW1[0] *= d3;
                                                    i += 1;
                                                }
                                            }
                                            else {
                                                paramdoubleW2[0] = ((d1 - paramdoubleW1[0]) / d1);
                                                this.dscal(paramInt1 - 1, 1.0 / (paramdoubleW1[0] - d1), paramArrayOfDouble, paramInt2, paramInt3);
                                                paramdoubleW1[0] = d1;
                                            }
                                        }
                                    };
                                    JavaBlas.prototype.shutdown = function () {
                                    };
                                    JavaBlas.prototype.dtrti2 = function (paramString1, paramString2, paramInt1, paramArrayOfDouble, paramInt2, paramInt3, paramintW) {
                                        var bool1 = false;
                                        var bool2 = false;
                                        var i = 0;
                                        var d = 0.0;
                                        paramintW[0] = 0;
                                        bool2 = paramString1.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER);
                                        bool1 = paramString2.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.NONUNIT);
                                        if ((((!bool2)) && ((!paramString1.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER))) ? 1 : 0) != 0) {
                                            paramintW[0] = -1;
                                        }
                                        else {
                                            if ((((!bool1)) && ((!paramString2.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT))) ? 1 : 0) != 0) {
                                                paramintW[0] = -2;
                                            }
                                            else {
                                                if ((paramInt1 < 0)) {
                                                    paramintW[0] = -3;
                                                }
                                                else {
                                                    if ((paramInt3 < Math.max(1, paramInt1))) {
                                                        paramintW[0] = -5;
                                                    }
                                                }
                                            }
                                        }
                                        if ((paramintW[0] != 0)) {
                                            return;
                                        }
                                        var j;
                                        if (bool2) {
                                            i = 1;
                                            for (j = paramInt1; j > 0; j--) {
                                                if (bool1) {
                                                    paramArrayOfDouble[(i - 1 + (i - 1) * paramInt3 + paramInt2)] = (1.0 / paramArrayOfDouble[(i - 1 + (i - 1) * paramInt3 + paramInt2)]);
                                                    d = -paramArrayOfDouble[(i - 1 + (i - 1) * paramInt3 + paramInt2)];
                                                }
                                                else {
                                                    d = -1.0;
                                                }
                                                this.dtrmv(org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, paramString2, i - 1, paramArrayOfDouble, paramInt2, paramInt3, paramArrayOfDouble, (i - 1) * paramInt3 + paramInt2, 1);
                                                this.dscal(i - 1, d, paramArrayOfDouble, (i - 1) * paramInt3 + paramInt2, 1);
                                                i++;
                                            }
                                        }
                                        else {
                                            i = paramInt1;
                                            for (j = paramInt1; j > 0; j--) {
                                                if (bool1) {
                                                    paramArrayOfDouble[(i - 1 + (i - 1) * paramInt3 + paramInt2)] = (1.0 / paramArrayOfDouble[(i - 1 + (i - 1) * paramInt3 + paramInt2)]);
                                                    d = -paramArrayOfDouble[(i - 1 + (i - 1) * paramInt3 + paramInt2)];
                                                }
                                                else {
                                                    d = -1.0;
                                                }
                                                if ((i < paramInt1)) {
                                                    this.dtrmv(org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, paramString2, paramInt1 - i, paramArrayOfDouble, i + (i) * paramInt3 + paramInt2, paramInt3, paramArrayOfDouble, i + (i - 1) * paramInt3 + paramInt2, 1);
                                                    this.dscal(paramInt1 - i, d, paramArrayOfDouble, i + (i - 1) * paramInt3 + paramInt2, 1);
                                                }
                                                i += -1;
                                            }
                                        }
                                    };
                                    JavaBlas.prototype.print = function (paramArrayOfDouble, s) {
                                        var t = s + ": ";
                                        for (var i = 0; i < paramArrayOfDouble.length; i++) {
                                            t = t + paramArrayOfDouble[i] + " ";
                                        }
                                        console.log(t);
                                        ;
                                    };
                                    JavaBlas.prototype.dtrmv = function (paramString1, paramString2, paramString3, paramInt1, paramArrayOfDouble1, paramInt2, paramInt3, paramArrayOfDouble2, paramInt4, paramInt5) {
                                        var d = 0.0;
                                        var i = 0;
                                        var j = 0;
                                        var k = 0;
                                        var m = 0;
                                        var n = 0;
                                        var i1 = 0;
                                        var bool = false;
                                        bool = paramString3.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.NONUNIT);
                                        if ((paramInt5 <= 0)) {
                                            i1 = 1 - (paramInt1 - 1) * paramInt5;
                                        }
                                        else {
                                            if ((paramInt5 != 1)) {
                                                i1 = 1;
                                            }
                                        }
                                        var i2;
                                        var i3;
                                        if (paramString2.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE)) {
                                            if (paramString1.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER)) {
                                                if ((paramInt5 == 1)) {
                                                    m = 1;
                                                    for (i2 = paramInt1; i2 > 0; i2--) {
                                                        if ((paramArrayOfDouble2[(m - 1 + paramInt4)] != 0.0)) {
                                                            d = paramArrayOfDouble2[(m - 1 + paramInt4)];
                                                            i = 1;
                                                            for (i3 = m - 1; i3 > 0; i3--) {
                                                                paramArrayOfDouble2[(i - 1 + paramInt4)] += d * paramArrayOfDouble1[(i - 1 + (m - 1) * paramInt3 + paramInt2)];
                                                                i++;
                                                            }
                                                            if (bool) {
                                                                paramArrayOfDouble2[(m - 1 + paramInt4)] *= paramArrayOfDouble1[(m - 1 + (m - 1) * paramInt3 + paramInt2)];
                                                            }
                                                        }
                                                        m++;
                                                    }
                                                }
                                                else {
                                                    n = i1;
                                                    m = 1;
                                                    for (i2 = paramInt1; i2 > 0; i2--) {
                                                        if ((paramArrayOfDouble2[(n - 1 + paramInt4)] != 0.0)) {
                                                            d = paramArrayOfDouble2[(n - 1 + paramInt4)];
                                                            k = i1;
                                                            i = 1;
                                                            for (i3 = m - 1; i3 > 0; i3--) {
                                                                paramArrayOfDouble2[(k - 1 + paramInt4)] += d * paramArrayOfDouble1[(i - 1 + (m - 1) * paramInt3 + paramInt2)];
                                                                k += paramInt5;
                                                                i++;
                                                            }
                                                            if (bool) {
                                                                paramArrayOfDouble2[(n - 1 + paramInt4)] *= paramArrayOfDouble1[(m - 1 + (m - 1) * paramInt3 + paramInt2)];
                                                            }
                                                        }
                                                        n += paramInt5;
                                                        m++;
                                                    }
                                                }
                                            }
                                            else {
                                                if ((paramInt5 == 1)) {
                                                    m = paramInt1;
                                                    for (i2 = paramInt1; i2 > 0; i2--) {
                                                        if ((paramArrayOfDouble2[(m - 1 + paramInt4)] != 0.0)) {
                                                            d = paramArrayOfDouble2[(m - 1 + paramInt4)];
                                                            i = paramInt1;
                                                            for (i3 = -(m - paramInt1); i3 > 0; i3--) {
                                                                paramArrayOfDouble2[(i - 1 + paramInt4)] += d * paramArrayOfDouble1[(i - 1 + (m - 1) * paramInt3 + paramInt2)];
                                                                i += -1;
                                                            }
                                                            if (bool) {
                                                                paramArrayOfDouble2[(m - 1 + paramInt4)] *= paramArrayOfDouble1[(m - 1 + (m - 1) * paramInt3 + paramInt2)];
                                                            }
                                                        }
                                                        m += -1;
                                                    }
                                                }
                                                else {
                                                    i1 += (paramInt1 - 1) * paramInt5;
                                                    n = i1;
                                                    m = paramInt1;
                                                    for (i2 = paramInt1; i2 > 0; i2--) {
                                                        if ((paramArrayOfDouble2[(n - 1 + paramInt4)] != 0.0)) {
                                                            d = paramArrayOfDouble2[(n - 1 + paramInt4)];
                                                            k = i1;
                                                            i = paramInt1;
                                                            for (i3 = -(m - paramInt1); i3 > 0; i3--) {
                                                                paramArrayOfDouble2[(k - 1 + paramInt4)] += d * paramArrayOfDouble1[(i - 1 + (m - 1) * paramInt3 + paramInt2)];
                                                                k -= paramInt5;
                                                                i += -1;
                                                            }
                                                            if (bool) {
                                                                paramArrayOfDouble2[(n - 1 + paramInt4)] *= paramArrayOfDouble1[(m - 1 + (m - 1) * paramInt3 + paramInt2)];
                                                            }
                                                        }
                                                        n -= paramInt5;
                                                        m += -1;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (paramString1.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER)) {
                                                if ((paramInt5 == 1)) {
                                                    m = paramInt1;
                                                    for (i2 = paramInt1; i2 > 0; i2--) {
                                                        d = paramArrayOfDouble2[(m - 1 + paramInt4)];
                                                        if (bool) {
                                                            d *= paramArrayOfDouble1[(m - 1 + (m - 1) * paramInt3 + paramInt2)];
                                                        }
                                                        i = m - 1;
                                                        for (i3 = (m - 1); i3 > 0; i3--) {
                                                            d += paramArrayOfDouble1[(i - 1 + (m - 1) * paramInt3 + paramInt2)] * paramArrayOfDouble2[(i - 1 + paramInt4)];
                                                            i += -1;
                                                        }
                                                        paramArrayOfDouble2[(m - 1 + paramInt4)] = d;
                                                        m += -1;
                                                    }
                                                }
                                                else {
                                                    n = i1 + (paramInt1 - 1) * paramInt5;
                                                    m = paramInt1;
                                                    for (i2 = -paramInt1; i2 > 0; i2--) {
                                                        d = paramArrayOfDouble2[(n - 1 + paramInt4)];
                                                        k = n;
                                                        if (bool) {
                                                            d *= paramArrayOfDouble1[(m - 1 + (m - 1) * paramInt3 + paramInt2)];
                                                        }
                                                        i = m - 1;
                                                        for (i3 = (m - 1); i3 > 0; i3--) {
                                                            k -= paramInt5;
                                                            d += paramArrayOfDouble1[(i - 1 + (m - 1) * paramInt3 + paramInt2)] * paramArrayOfDouble2[(k - 1 + paramInt4)];
                                                            i += -1;
                                                        }
                                                        paramArrayOfDouble2[(n - 1 + paramInt4)] = d;
                                                        n -= paramInt5;
                                                        m += -1;
                                                    }
                                                }
                                            }
                                            else {
                                                if ((paramInt5 == 1)) {
                                                    m = 1;
                                                    for (i2 = paramInt1; i2 > 0; i2--) {
                                                        d = paramArrayOfDouble2[(m - 1 + paramInt4)];
                                                        if (bool) {
                                                            d *= paramArrayOfDouble1[(m - 1 + (m - 1) * paramInt3 + paramInt2)];
                                                        }
                                                        i = m + 1;
                                                        for (i3 = paramInt1 - (m + 1) + 1; i3 > 0; i3--) {
                                                            d += paramArrayOfDouble1[(i - 1 + (m - 1) * paramInt3 + paramInt2)] * paramArrayOfDouble2[(i - 1 + paramInt4)];
                                                            i++;
                                                        }
                                                        paramArrayOfDouble2[(m - 1 + paramInt4)] = d;
                                                        m++;
                                                    }
                                                }
                                                else {
                                                    n = i1;
                                                    m = 1;
                                                    for (i2 = paramInt1; i2 > 0; i2--) {
                                                        d = paramArrayOfDouble2[(n - 1 + paramInt4)];
                                                        k = n;
                                                        if (bool) {
                                                            d *= paramArrayOfDouble1[(m - 1 + (m - 1) * paramInt3 + paramInt2)];
                                                        }
                                                        i = m + 1;
                                                        for (i3 = paramInt1 - (m + 1) + 1; i3 > 0; i3--) {
                                                            k += paramInt5;
                                                            d += paramArrayOfDouble1[(i - 1 + (m - 1) * paramInt3 + paramInt2)] * paramArrayOfDouble2[(k - 1 + paramInt4)];
                                                            i++;
                                                        }
                                                        paramArrayOfDouble2[(n - 1 + paramInt4)] = d;
                                                        n += paramInt5;
                                                        m++;
                                                    }
                                                }
                                            }
                                        }
                                    };
                                    JavaBlas.prototype.dtrmm = function (paramString1, paramString2, paramString3, paramString4, paramInt1, paramInt2, paramDouble, paramArrayOfDouble1, paramInt3, paramInt4, paramArrayOfDouble2, paramInt5, paramInt6) {
                                        var d = 0.0;
                                        var i = 0;
                                        var j = 0;
                                        var k = 0;
                                        var m = 0;
                                        var n = 0;
                                        var bool1 = false;
                                        var bool2 = false;
                                        var bool3 = false;
                                        bool1 = paramString1.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.LEFT);
                                        if (bool1) {
                                            n = paramInt1;
                                        }
                                        else {
                                            n = paramInt2;
                                        }
                                        bool2 = paramString4.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.NONUNIT);
                                        bool3 = paramString2.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER);
                                        var i1;
                                        var i2;
                                        if ((paramDouble == 0)) {
                                            k = 1;
                                            for (i1 = paramInt2; i1 > 0; i1--) {
                                                i = 1;
                                                for (i2 = paramInt1; i2 > 0; i2--) {
                                                    paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] = 0.0;
                                                    i++;
                                                }
                                                k++;
                                            }
                                            return;
                                        }
                                        var i3;
                                        if (bool1) {
                                            if (paramString3.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE)) {
                                                if (bool3) {
                                                    k = 1;
                                                    for (i1 = paramInt2; i1 > 0; i1--) {
                                                        m = 1;
                                                        for (i2 = paramInt1; i2 > 0; i2--) {
                                                            if ((paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt6 + paramInt5)] != 0.0)) {
                                                                d = paramDouble * paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt6 + paramInt5)];
                                                                i = 1;
                                                                for (i3 = m - 1; i3 > 0; i3--) {
                                                                    paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] += d * paramArrayOfDouble1[(i - 1 + (m - 1) * paramInt4 + paramInt3)];
                                                                    i++;
                                                                }
                                                                if (bool2) {
                                                                    d *= paramArrayOfDouble1[(m - 1 + (m - 1) * paramInt4 + paramInt3)];
                                                                }
                                                                paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt6 + paramInt5)] = d;
                                                            }
                                                            m++;
                                                        }
                                                        k++;
                                                    }
                                                }
                                                else {
                                                    k = 1;
                                                    for (i1 = paramInt2; i1 > 0; i1--) {
                                                        m = paramInt1;
                                                        for (i2 = paramInt1; i2 > 0; i2--) {
                                                            if ((paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt6 + paramInt5)] != 0.0)) {
                                                                d = paramDouble * paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt6 + paramInt5)];
                                                                paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt6 + paramInt5)] = d;
                                                                if (bool2) {
                                                                    paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt6 + paramInt5)] *= paramArrayOfDouble1[(m - 1 + (m - 1) * paramInt4 + paramInt3)];
                                                                }
                                                                i = m + 1;
                                                                for (i3 = paramInt1 - (m + 1) + 1; i3 > 0; i3--) {
                                                                    paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] += d * paramArrayOfDouble1[(i - 1 + (m - 1) * paramInt4 + paramInt3)];
                                                                    i++;
                                                                }
                                                            }
                                                            m += -1;
                                                        }
                                                        k++;
                                                    }
                                                }
                                            }
                                            else {
                                                if (bool3) {
                                                    k = 1;
                                                    for (i1 = paramInt2; i1 > 0; i1--) {
                                                        i = paramInt1;
                                                        for (i2 = paramInt1; i2 > 0; i2--) {
                                                            d = paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)];
                                                            if (bool2) {
                                                                d *= paramArrayOfDouble1[(i - 1 + (i - 1) * paramInt4 + paramInt3)];
                                                            }
                                                            m = 1;
                                                            for (i3 = i - 1; i3 > 0; i3--) {
                                                                d += paramArrayOfDouble1[(m - 1 + (i - 1) * paramInt4 + paramInt3)] * paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt6 + paramInt5)];
                                                                m++;
                                                            }
                                                            paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] = (paramDouble * d);
                                                            i += -1;
                                                        }
                                                        k++;
                                                    }
                                                }
                                                else {
                                                    k = 1;
                                                    for (i1 = paramInt2; i1 > 0; i1--) {
                                                        i = 1;
                                                        for (i2 = paramInt1; i2 > 0; i2--) {
                                                            d = paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)];
                                                            if (bool2) {
                                                                d *= paramArrayOfDouble1[(i - 1 + (i - 1) * paramInt4 + paramInt3)];
                                                            }
                                                            m = i + 1;
                                                            for (i3 = paramInt1 - (i + 1) + 1; i3 > 0; i3--) {
                                                                d += paramArrayOfDouble1[(m - 1 + (i - 1) * paramInt4 + paramInt3)] * paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt6 + paramInt5)];
                                                                m++;
                                                            }
                                                            paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] = (paramDouble * d);
                                                            i++;
                                                        }
                                                        k++;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (paramString3.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE)) {
                                                if (bool3) {
                                                    k = paramInt2;
                                                    for (i1 = paramInt2; i1 > 0; i1--) {
                                                        d = paramDouble;
                                                        if (bool2) {
                                                            d *= paramArrayOfDouble1[(k - 1 + (k - 1) * paramInt4 + paramInt3)];
                                                        }
                                                        i = 1;
                                                        for (i2 = paramInt1; i2 > 0; i2--) {
                                                            paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] = (d * paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)]);
                                                            i++;
                                                        }
                                                        m = 1;
                                                        for (i2 = k - 1; i2 > 0; i2--) {
                                                            if ((paramArrayOfDouble1[(m - 1 + (k - 1) * paramInt4 + paramInt3)] != 0.0)) {
                                                                d = paramDouble * paramArrayOfDouble1[(m - 1 + (k - 1) * paramInt4 + paramInt3)];
                                                                i = 1;
                                                                for (i3 = paramInt1; i3 > 0; i3--) {
                                                                    paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] += d * paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)];
                                                                    i++;
                                                                }
                                                            }
                                                            m++;
                                                        }
                                                        k += -1;
                                                    }
                                                }
                                                else {
                                                    k = 1;
                                                    for (i1 = paramInt2; i1 > 0; i1--) {
                                                        d = paramDouble;
                                                        if (bool2) {
                                                            d *= paramArrayOfDouble1[(k - 1 + (k - 1) * paramInt4 + paramInt3)];
                                                        }
                                                        i = 1;
                                                        for (i2 = paramInt1; i2 > 0; i2--) {
                                                            paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] = (d * paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)]);
                                                            i++;
                                                        }
                                                        m = k + 1;
                                                        for (i2 = paramInt2 - (k + 1) + 1; i2 > 0; i2--) {
                                                            if ((paramArrayOfDouble1[(m - 1 + (k - 1) * paramInt4 + paramInt3)] != 0.0)) {
                                                                d = paramDouble * paramArrayOfDouble1[(m - 1 + (k - 1) * paramInt4 + paramInt3)];
                                                                i = 1;
                                                                for (i3 = paramInt1; i3 > 0; i3--) {
                                                                    paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] += d * paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)];
                                                                    i++;
                                                                }
                                                            }
                                                            m++;
                                                        }
                                                        k++;
                                                    }
                                                }
                                            }
                                            else {
                                                if (bool3) {
                                                    m = 1;
                                                    for (i1 = paramInt2; i1 > 0; i1--) {
                                                        k = 1;
                                                        for (i2 = m - 1; i2 > 0; i2--) {
                                                            if ((paramArrayOfDouble1[(k - 1 + (m - 1) * paramInt4 + paramInt3)] != 0.0)) {
                                                                d = paramDouble * paramArrayOfDouble1[(k - 1 + (m - 1) * paramInt4 + paramInt3)];
                                                                i = 1;
                                                                for (i3 = paramInt1; i3 > 0; i3--) {
                                                                    paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] += d * paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)];
                                                                    i++;
                                                                }
                                                            }
                                                            k++;
                                                        }
                                                        d = paramDouble;
                                                        if (bool2) {
                                                            d *= paramArrayOfDouble1[(m - 1 + (m - 1) * paramInt4 + paramInt3)];
                                                        }
                                                        if ((d != 1.0)) {
                                                            i = 1;
                                                            for (i2 = paramInt1; i2 > 0; i2--) {
                                                                paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)] = (d * paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)]);
                                                                i++;
                                                            }
                                                        }
                                                        m++;
                                                    }
                                                }
                                                else {
                                                    m = paramInt2;
                                                    for (i1 = paramInt2; i1 > 0; i1--) {
                                                        k = m + 1;
                                                        for (i2 = paramInt2 - (m + 1) + 1; i2 > 0; i2--) {
                                                            if ((paramArrayOfDouble1[(k - 1 + (m - 1) * paramInt4 + paramInt3)] != 0.0)) {
                                                                d = paramDouble * paramArrayOfDouble1[(k - 1 + (m - 1) * paramInt4 + paramInt3)];
                                                                i = 1;
                                                                for (i3 = paramInt1; i3 > 0; i3--) {
                                                                    paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] += d * paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)];
                                                                    i++;
                                                                }
                                                            }
                                                            k++;
                                                        }
                                                        d = paramDouble;
                                                        if (bool2) {
                                                            d *= paramArrayOfDouble1[(m - 1 + (m - 1) * paramInt4 + paramInt3)];
                                                        }
                                                        if ((d != 1.0)) {
                                                            i = 1;
                                                            for (i2 = paramInt1; i2 > 0; i2--) {
                                                                paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)] = (d * paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)]);
                                                                i++;
                                                            }
                                                        }
                                                        m += -1;
                                                    }
                                                }
                                            }
                                        }
                                    };
                                    JavaBlas.prototype.dtrtri = function (paramString1, paramString2, paramInt1, paramArrayOfDouble, paramInt2, paramInt3, paramintW) {
                                        var bool1 = false;
                                        var bool2 = false;
                                        var i = 0;
                                        var j = 0;
                                        var k = 0;
                                        var m = 0;
                                        paramintW[0] = 0;
                                        bool2 = paramString1.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER);
                                        bool1 = paramString2.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.NONUNIT);
                                        if ((((!bool2)) && ((!paramString1.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER))) ? 1 : 0) != 0) {
                                            paramintW[0] = -1;
                                        }
                                        else {
                                            if ((((!bool1)) && ((!paramString2.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.UNIT))) ? 1 : 0) != 0) {
                                                paramintW[0] = -2;
                                            }
                                            else {
                                                if ((paramInt1 < 0)) {
                                                    paramintW[0] = -3;
                                                }
                                                else {
                                                    if ((paramInt3 < Math.max(1, paramInt1))) {
                                                        paramintW[0] = -5;
                                                    }
                                                }
                                            }
                                        }
                                        if ((paramintW[0] != 0)) {
                                            return;
                                        }
                                        if ((paramInt1 == 0)) {
                                            return;
                                        }
                                        var n;
                                        if (bool1) {
                                            paramintW[0] = 1;
                                            for (n = paramInt1; n > 0; n--) {
                                                if ((paramArrayOfDouble[(paramintW[0] - 1 + (paramintW[0] - 1) * paramInt3 + paramInt2)] == 0)) {
                                                    return;
                                                }
                                                paramintW[0]++;
                                            }
                                            paramintW[0] = 0;
                                        }
                                        k = this.ilaenv(1, "DTRTRI", "", paramInt1, -1, -1, -1);
                                        if (((k >= paramInt1))) {
                                            this.dtrti2(paramString1, paramString2, paramInt1, paramArrayOfDouble, paramInt2, paramInt3, paramintW);
                                        }
                                        else {
                                            if (bool2) {
                                                i = 1;
                                                for (n = this.floorDiv((paramInt1 - 1 + k), k); n > 0; n--) {
                                                    j = Math.min(k, paramInt1 - i + 1);
                                                    this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.LEFT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, paramString2, i - 1, j, 1.0, paramArrayOfDouble, paramInt2, paramInt3, paramArrayOfDouble, (i - 1) * paramInt3 + paramInt2, paramInt3);
                                                    this.dtrsm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, paramString2, i - 1, j, -1.0, paramArrayOfDouble, i - 1 + (i - 1) * paramInt3 + paramInt2, paramInt3, paramArrayOfDouble, (i - 1) * paramInt3 + paramInt2, paramInt3);
                                                    this.dtrti2(org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER, paramString2, j, paramArrayOfDouble, i - 1 + (i - 1) * paramInt3 + paramInt2, paramInt3, paramintW);
                                                    i += k;
                                                }
                                            }
                                            else {
                                                m = this.floorDiv((paramInt1 - 1), k) * k + 1;
                                                i = m;
                                                for (n = this.floorDiv((1 - m + -k), -k); n > 0; n--) {
                                                    j = Math.min(k, paramInt1 - i + 1);
                                                    if ((i + j <= paramInt1)) {
                                                        this.dtrmm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.LEFT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, paramString2, paramInt1 - i - j + 1, j, 1.0, paramArrayOfDouble, i + j - 1 + (i + j - 1) * paramInt3 + paramInt2, paramInt3, paramArrayOfDouble, i + j - 1 + (i - 1) * paramInt3 + paramInt2, paramInt3);
                                                        this.dtrsm(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.RIGHT, org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, paramString2, paramInt1 - i - j + 1, j, -1.0, paramArrayOfDouble, i - 1 + (i - 1) * paramInt3 + paramInt2, paramInt3, paramArrayOfDouble, i + j - 1 + (i - 1) * paramInt3 + paramInt2, paramInt3);
                                                    }
                                                    this.dtrti2(org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.LOWER, paramString2, j, paramArrayOfDouble, i - 1 + (i - 1) * paramInt3 + paramInt2, paramInt3, paramintW);
                                                    i += -k;
                                                }
                                            }
                                        }
                                    };
                                    JavaBlas.prototype.dgemv = function (paramString, paramInt1, paramInt2, paramDouble1, paramArrayOfDouble1, paramInt3, paramInt4, paramArrayOfDouble2, paramInt5, paramInt6, paramDouble2, paramArrayOfDouble3, paramInt7, paramInt8) {
                                        var d = 0.0;
                                        var i = 0;
                                        var j = 0;
                                        var k = 0;
                                        var m = 0;
                                        var n = 0;
                                        var i1 = 0;
                                        var i2 = 0;
                                        var i3 = 0;
                                        var i4 = 0;
                                        var i5 = 0;
                                        var i6 = 0;
                                        if (paramString.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE)) {
                                            i5 = paramInt2;
                                            i6 = paramInt1;
                                        }
                                        else {
                                            i5 = paramInt1;
                                            i6 = paramInt2;
                                        }
                                        if ((paramInt6 > 0)) {
                                            i3 = 1;
                                        }
                                        else {
                                            i3 = 1 - (i5 - 1) * paramInt6;
                                        }
                                        if ((paramInt8 > 0)) {
                                            i4 = 1;
                                        }
                                        else {
                                            i4 = 1 - (i6 - 1) * paramInt8;
                                        }
                                        var i7;
                                        if ((paramDouble2 != 1.0)) {
                                            if ((paramInt8 == 1)) {
                                                if ((paramDouble2 == 0)) {
                                                    i = 1;
                                                    for (i7 = i6; i7 > 0; i7--) {
                                                        paramArrayOfDouble3[(i - 1 + paramInt7)] = 0.0;
                                                        i++;
                                                    }
                                                }
                                                else {
                                                    i = 1;
                                                    for (i7 = i6; i7 > 0; i7--) {
                                                        paramArrayOfDouble3[(i - 1 + paramInt7)] = (paramDouble2 * paramArrayOfDouble3[(i - 1 + paramInt7)]);
                                                        i++;
                                                    }
                                                }
                                            }
                                            else {
                                                m = i4;
                                                if ((paramDouble2 == 0)) {
                                                    i = 1;
                                                    for (i7 = i6; i7 > 0; i7--) {
                                                        paramArrayOfDouble3[(m - 1 + paramInt7)] = 0.0;
                                                        m += paramInt8;
                                                        i++;
                                                    }
                                                }
                                                else {
                                                    i = 1;
                                                    for (i7 = i6; i7 > 0; i7--) {
                                                        paramArrayOfDouble3[(m - 1 + paramInt7)] = (paramDouble2 * paramArrayOfDouble3[(m - 1 + paramInt7)]);
                                                        m += paramInt8;
                                                        i++;
                                                    }
                                                }
                                            }
                                        }
                                        if ((paramDouble1 == 0)) {
                                            return;
                                        }
                                        var i8;
                                        if (paramString.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE)) {
                                            i1 = i3;
                                            if ((paramInt8 == 1)) {
                                                n = 1;
                                                for (i7 = paramInt2; i7 > 0; i7--) {
                                                    if ((paramArrayOfDouble2[(i1 - 1 + paramInt5)] != 0.0)) {
                                                        d = paramDouble1 * paramArrayOfDouble2[(i1 - 1 + paramInt5)];
                                                        i = 1;
                                                        for (i8 = paramInt1; i8 > 0; i8--) {
                                                            paramArrayOfDouble3[(i - 1 + paramInt7)] += d * paramArrayOfDouble1[(i - 1 + (n - 1) * paramInt4 + paramInt3)];
                                                            i++;
                                                        }
                                                    }
                                                    i1 += paramInt6;
                                                    n++;
                                                }
                                            }
                                            else {
                                                n = 1;
                                                for (i7 = paramInt2; i7 > 0; i7--) {
                                                    if ((paramArrayOfDouble2[(i1 - 1 + paramInt5)] != 0.0)) {
                                                        d = paramDouble1 * paramArrayOfDouble2[(i1 - 1 + paramInt5)];
                                                        m = i4;
                                                        i = 1;
                                                        for (i8 = paramInt1; i8 > 0; i8--) {
                                                            paramArrayOfDouble3[(m - 1 + paramInt7)] += d * paramArrayOfDouble1[(i - 1 + (n - 1) * paramInt4 + paramInt3)];
                                                            m += paramInt8;
                                                            i++;
                                                        }
                                                    }
                                                    i1 += paramInt6;
                                                    n++;
                                                }
                                            }
                                        }
                                        else {
                                            i2 = i4;
                                            if ((paramInt6 == 1)) {
                                                n = 1;
                                                for (i7 = paramInt2; i7 > 0; i7--) {
                                                    d = 0.0;
                                                    i = 1;
                                                    for (i8 = paramInt1; i8 > 0; i8--) {
                                                        d += paramArrayOfDouble1[(i - 1 + (n - 1) * paramInt4 + paramInt3)] * paramArrayOfDouble2[(i - 1 + paramInt5)];
                                                        i++;
                                                    }
                                                    paramArrayOfDouble3[(i2 - 1 + paramInt7)] += paramDouble1 * d;
                                                    i2 += paramInt8;
                                                    n++;
                                                }
                                            }
                                            else {
                                                n = 1;
                                                for (i7 = paramInt2; i7 > 0; i7--) {
                                                    d = 0.0;
                                                    k = i3;
                                                    i = 1;
                                                    for (i8 = paramInt1; i8 > 0; i8--) {
                                                        d += paramArrayOfDouble1[(i - 1 + (n - 1) * paramInt4 + paramInt3)] * paramArrayOfDouble2[(k - 1 + paramInt5)];
                                                        k += paramInt6;
                                                        i++;
                                                    }
                                                    paramArrayOfDouble3[(i2 - 1 + paramInt7)] += paramDouble1 * d;
                                                    i2 += paramInt8;
                                                    n++;
                                                }
                                            }
                                        }
                                    };
                                    JavaBlas.prototype.ilaenv = function (i, dgetrf, s, paramInt1, paramInt2, i1, i2) {
                                        return 64;
                                    };
                                    JavaBlas.prototype.dger = function (paramInt1, paramInt2, paramDouble, paramArrayOfDouble1, paramInt3, paramInt4, paramArrayOfDouble2, paramInt5, paramInt6, paramArrayOfDouble3, paramInt7, paramInt8) {
                                        var d = 0.0;
                                        var i = 0;
                                        var k = 0;
                                        var m = 0;
                                        var n = 0;
                                        var i1 = 0;
                                        if ((paramInt6 > 0)) {
                                            n = 1;
                                        }
                                        else {
                                            n = 1 - (paramInt2 - 1) * paramInt6;
                                        }
                                        var i2;
                                        var i3;
                                        if ((paramInt4 == 1)) {
                                            m = 1;
                                            for (i2 = paramInt2; i2 > 0; i2--) {
                                                if ((paramArrayOfDouble2[(n - 1 + paramInt5)] != 0.0)) {
                                                    d = paramDouble * paramArrayOfDouble2[(n - 1 + paramInt5)];
                                                    i = 1;
                                                    for (i3 = paramInt1; i3 > 0; i3--) {
                                                        paramArrayOfDouble3[(i - 1 + (m - 1) * paramInt8 + paramInt7)] += paramArrayOfDouble1[(i - 1 + paramInt3)] * d;
                                                        i++;
                                                    }
                                                }
                                                n += paramInt6;
                                                m++;
                                            }
                                        }
                                        else {
                                            if ((paramInt4 > 0)) {
                                                i1 = 1;
                                            }
                                            else {
                                                i1 = 1 - (paramInt1 - 1) * paramInt4;
                                            }
                                            m = 1;
                                            for (i2 = paramInt2; i2 > 0; i2--) {
                                                if ((paramArrayOfDouble2[(n - 1 + paramInt5)] != 0.0)) {
                                                    d = paramDouble * paramArrayOfDouble2[(n - 1 + paramInt5)];
                                                    k = i1;
                                                    i = 1;
                                                    for (i3 = paramInt1; i3 > 0; i3--) {
                                                        paramArrayOfDouble3[(i - 1 + (m - 1) * paramInt8 + paramInt7)] += paramArrayOfDouble1[(k - 1 + paramInt3)] * d;
                                                        k += paramInt4;
                                                        i++;
                                                    }
                                                }
                                                n += paramInt6;
                                                m++;
                                            }
                                        }
                                    };
                                    JavaBlas.prototype.idamax = function (paramInt1, paramArrayOfDouble, paramInt2, paramInt3) {
                                        var d = 0.0;
                                        var i = 0;
                                        var j = 0;
                                        var k = 0;
                                        k = 0;
                                        if (((paramInt3 <= 0))) {
                                            return k;
                                        }
                                        k = 1;
                                        if ((paramInt1 == 1)) {
                                            return k;
                                        }
                                        var m;
                                        if ((paramInt3 == 1)) {
                                            d = Math.abs(paramArrayOfDouble[(paramInt2)]);
                                            i = 2;
                                            for (m = paramInt1 - 1; m > 0; m--) {
                                                if ((Math.abs(paramArrayOfDouble[(i - 1 + paramInt2)]) > d)) {
                                                    k = i;
                                                    d = Math.abs(paramArrayOfDouble[(i - 1 + paramInt2)]);
                                                }
                                                i++;
                                            }
                                        }
                                        else {
                                            j = 1;
                                            d = Math.abs(paramArrayOfDouble[(paramInt2)]);
                                            j += paramInt3;
                                            i = 2;
                                            for (m = paramInt1 - 1; m > 0; m--) {
                                                if ((Math.abs(paramArrayOfDouble[(j - 1 + paramInt2)]) > d)) {
                                                    k = i;
                                                    d = Math.abs(paramArrayOfDouble[(j - 1 + paramInt2)]);
                                                }
                                                j += paramInt3;
                                                i++;
                                            }
                                        }
                                        return k;
                                    };
                                    JavaBlas.prototype.dswap = function (paramInt1, paramArrayOfDouble1, paramInt2, paramInt3, paramArrayOfDouble2, paramInt4, paramInt5) {
                                        var d = 0.0;
                                        var i = 0;
                                        var j = 0;
                                        var k = 0;
                                        var m = 0;
                                        var n = 0;
                                        if ((paramInt1 <= 0)) {
                                            return;
                                        }
                                        var i1;
                                        if (((paramInt5 == 1) ? 1 : 0) != 0) {
                                            m = paramInt1 % 3;
                                            if ((m != 0)) {
                                                i = 1;
                                                for (i1 = m; i1 > 0; i1--) {
                                                    d = paramArrayOfDouble1[(i - 1 + paramInt2)];
                                                    paramArrayOfDouble1[(i - 1 + paramInt2)] = paramArrayOfDouble2[(i - 1 + paramInt4)];
                                                    paramArrayOfDouble2[(i - 1 + paramInt4)] = d;
                                                    i++;
                                                }
                                                if ((paramInt1 < 3)) {
                                                    return;
                                                }
                                            }
                                            n = m + 1;
                                            i = n;
                                            for (i1 = this.floorDiv((paramInt1 - n + 3), 3); i1 > 0; i1--) {
                                                d = paramArrayOfDouble1[(i - 1 + paramInt2)];
                                                paramArrayOfDouble1[(i - 1 + paramInt2)] = paramArrayOfDouble2[(i - 1 + paramInt4)];
                                                paramArrayOfDouble2[(i - 1 + paramInt4)] = d;
                                                d = paramArrayOfDouble1[(i + paramInt2)];
                                                paramArrayOfDouble1[(i + paramInt2)] = paramArrayOfDouble2[(i + paramInt4)];
                                                paramArrayOfDouble2[(i + paramInt4)] = d;
                                                d = paramArrayOfDouble1[(i + 1 + paramInt2)];
                                                paramArrayOfDouble1[(i + 1 + paramInt2)] = paramArrayOfDouble2[(i + 1 + paramInt4)];
                                                paramArrayOfDouble2[(i + 1 + paramInt4)] = d;
                                                i += 3;
                                            }
                                        }
                                        else {
                                            j = 1;
                                            k = 1;
                                            if ((paramInt3 < 0)) {
                                                j = (-paramInt1 + 1) * paramInt3 + 1;
                                            }
                                            if ((paramInt5 < 0)) {
                                                k = (-paramInt1 + 1) * paramInt5 + 1;
                                            }
                                            i = 1;
                                            for (i1 = paramInt1; i1 > 0; i1--) {
                                                d = paramArrayOfDouble1[(j - 1 + paramInt2)];
                                                paramArrayOfDouble1[(j - 1 + paramInt2)] = paramArrayOfDouble2[(k - 1 + paramInt4)];
                                                paramArrayOfDouble2[(k - 1 + paramInt4)] = d;
                                                j += paramInt3;
                                                k += paramInt5;
                                                i++;
                                            }
                                        }
                                    };
                                    JavaBlas.prototype.dscal = function (paramInt1, paramDouble, paramArrayOfDouble, paramInt2, paramInt3) {
                                        var i = 0;
                                        var j = 0;
                                        var k = 0;
                                        var m = 0;
                                        var n;
                                        if ((paramInt3 == 1)) {
                                            j = paramInt1 % 5;
                                            if ((j != 0)) {
                                                i = 1;
                                                for (n = j; n > 0; n--) {
                                                    paramArrayOfDouble[(i - 1 + paramInt2)] = (paramDouble * paramArrayOfDouble[(i - 1 + paramInt2)]);
                                                    i++;
                                                }
                                                if ((paramInt1 < 5)) {
                                                    return;
                                                }
                                            }
                                            k = j + 1;
                                            i = k;
                                            for (n = this.floorDiv((paramInt1 - k + 5), 5); n > 0; n--) {
                                                paramArrayOfDouble[(i - 1 + paramInt2)] = (paramDouble * paramArrayOfDouble[(i - 1 + paramInt2)]);
                                                paramArrayOfDouble[(i + paramInt2)] = (paramDouble * paramArrayOfDouble[(i + paramInt2)]);
                                                paramArrayOfDouble[(i + 1 + paramInt2)] = (paramDouble * paramArrayOfDouble[(i + 1 + paramInt2)]);
                                                paramArrayOfDouble[(i + 2 + paramInt2)] = (paramDouble * paramArrayOfDouble[(i + 2 + paramInt2)]);
                                                paramArrayOfDouble[(i + 3 + paramInt2)] = (paramDouble * paramArrayOfDouble[(i + 3 + paramInt2)]);
                                                i += 5;
                                            }
                                        }
                                        else {
                                            m = paramInt1 * paramInt3;
                                            i = 1;
                                            for (n = this.floorDiv((m - 1 + paramInt3), paramInt3); n > 0; n--) {
                                                paramArrayOfDouble[(i - 1 + paramInt2)] = (paramDouble * paramArrayOfDouble[(i - 1 + paramInt2)]);
                                                i += paramInt3;
                                            }
                                        }
                                    };
                                    JavaBlas.prototype.dgetf2 = function (paramInt1, paramInt2, paramArrayOfDouble, paramInt3, paramInt4, paramArrayOfInt, paramInt5, info) {
                                        var d = 0.0;
                                        var i = 0;
                                        var j = 0;
                                        var k = 0;
                                        info[0] = 0;
                                        if ((paramInt1 < 0)) {
                                            info[0] = -1;
                                        }
                                        else {
                                            if ((paramInt2 < 0)) {
                                                info[0] = -2;
                                            }
                                            else {
                                                if ((paramInt4 < Math.max(1, paramInt1))) {
                                                    info[0] = -4;
                                                }
                                            }
                                        }
                                        if ((info[0] != 0)) {
                                            return;
                                        }
                                        if (((paramInt2 == 0))) {
                                            return;
                                        }
                                        d = org.kevoree.modeling.util.PrimitiveHelper.DOUBLE_MIN_VALUE();
                                        j = 1;
                                        for (var m = Math.min(paramInt1, paramInt2); m > 0; m--) {
                                            k = j - 1 + this.idamax(paramInt1 - j + 1, paramArrayOfDouble, j - 1 + (j - 1) * paramInt4 + paramInt3, 1);
                                            paramArrayOfInt[(j - 1 + paramInt5)] = k;
                                            if ((paramArrayOfDouble[(k - 1 + (j - 1) * paramInt4 + paramInt3)] != 0.0)) {
                                                if ((k != j)) {
                                                    this.dswap(paramInt2, paramArrayOfDouble, j - 1 + paramInt3, paramInt4, paramArrayOfDouble, k - 1 + paramInt3, paramInt4);
                                                }
                                                if ((j < paramInt1)) {
                                                    if ((Math.abs(paramArrayOfDouble[(j - 1 + (j - 1) * paramInt4 + paramInt3)]) >= d)) {
                                                        this.dscal(paramInt1 - j, 1.0 / paramArrayOfDouble[(j - 1 + (j - 1) * paramInt4 + paramInt3)], paramArrayOfDouble, j + (j - 1) * paramInt4 + paramInt3, 1);
                                                    }
                                                    else {
                                                        i = 1;
                                                        for (var n = paramInt1 - j; n > 0; n--) {
                                                            paramArrayOfDouble[(j + i - 1 + (j - 1) * paramInt4 + paramInt3)] /= paramArrayOfDouble[(j - 1 + (j - 1) * paramInt4 + paramInt3)];
                                                            i++;
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                if ((info[0] == 0)) {
                                                    info[0] = j;
                                                }
                                            }
                                            if ((j < Math.min(paramInt1, paramInt2))) {
                                                this.dger(paramInt1 - j, paramInt2 - j, -1.0, paramArrayOfDouble, j + (j - 1) * paramInt4 + paramInt3, 1, paramArrayOfDouble, j - 1 + (j) * paramInt4 + paramInt3, paramInt4, paramArrayOfDouble, j + (j) * paramInt4 + paramInt3, paramInt4);
                                            }
                                            j++;
                                        }
                                    };
                                    JavaBlas.prototype.dlaswp = function (paramInt1, paramArrayOfDouble, paramInt2, paramInt3, paramInt4, paramInt5, paramArrayOfInt, paramInt6, paramInt7) {
                                        var i = 0;
                                        var j = 0;
                                        var k = 0;
                                        var m = 0;
                                        var n = 0;
                                        var i1 = 0;
                                        var i2 = 0;
                                        var i3 = 0;
                                        var i4 = 0;
                                        var i5 = 0;
                                        var d = 0.0;
                                        if ((paramInt7 > 0)) {
                                            i2 = paramInt4;
                                            j = paramInt4;
                                            k = paramInt5;
                                            m = 1;
                                        }
                                        else {
                                            if ((paramInt7 < 0)) {
                                                i2 = 1 + (1 - paramInt5) * paramInt7;
                                                j = paramInt5;
                                                k = paramInt4;
                                                m = -1;
                                            }
                                            else {
                                                return;
                                            }
                                        }
                                        i5 = this.floorDiv(paramInt1, 32) * 32;
                                        var i6;
                                        var i7;
                                        if ((i5 != 0)) {
                                            i3 = 1;
                                            for (i6 = this.floorDiv((i5 - 1 + 32), 32); i6 > 0; i6--) {
                                                i1 = i2;
                                                i = j;
                                                for (i7 = this.floorDiv((k - j + m), m); i7 > 0; i7--) {
                                                    n = paramArrayOfInt[(i1 - 1 + paramInt6)];
                                                    if ((n != i)) {
                                                        i4 = i3;
                                                        for (var i8 = i3 + 31 - i3 + 1; i8 > 0; i8--) {
                                                            d = paramArrayOfDouble[(i - 1 + (i4 - 1) * paramInt3 + paramInt2)];
                                                            paramArrayOfDouble[(i - 1 + (i4 - 1) * paramInt3 + paramInt2)] = paramArrayOfDouble[(n - 1 + (i4 - 1) * paramInt3 + paramInt2)];
                                                            paramArrayOfDouble[(n - 1 + (i4 - 1) * paramInt3 + paramInt2)] = d;
                                                            i4++;
                                                        }
                                                    }
                                                    i1 += paramInt7;
                                                    i += m;
                                                }
                                                i3 += 32;
                                            }
                                        }
                                        if ((i5 != paramInt1)) {
                                            i5++;
                                            i1 = i2;
                                            i = j;
                                            for (i6 = this.floorDiv((k - j + m), m); i6 > 0; i6--) {
                                                n = paramArrayOfInt[(i1 - 1 + paramInt6)];
                                                if ((n != i)) {
                                                    i4 = i5;
                                                    for (i7 = paramInt1 - i5 + 1; i7 > 0; i7--) {
                                                        d = paramArrayOfDouble[(i - 1 + (i4 - 1) * paramInt3 + paramInt2)];
                                                        paramArrayOfDouble[(i - 1 + (i4 - 1) * paramInt3 + paramInt2)] = paramArrayOfDouble[(n - 1 + (i4 - 1) * paramInt3 + paramInt2)];
                                                        paramArrayOfDouble[(n - 1 + (i4 - 1) * paramInt3 + paramInt2)] = d;
                                                        i4++;
                                                    }
                                                }
                                                i1 += paramInt7;
                                                i += m;
                                            }
                                        }
                                    };
                                    JavaBlas.prototype.dtrsm = function (paramString1, paramString2, paramString3, paramString4, paramInt1, paramInt2, paramDouble, paramArrayOfDouble1, paramInt3, paramInt4, paramArrayOfDouble2, paramInt5, paramInt6) {
                                        var d = 0.0;
                                        var i = 0;
                                        var j = 0;
                                        var k = 0;
                                        var m = 0;
                                        var n = 0;
                                        var bool1 = false;
                                        var bool2 = false;
                                        var bool3 = false;
                                        bool1 = paramString1.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasSideType.LEFT);
                                        if (bool1) {
                                            n = paramInt1;
                                        }
                                        else {
                                            n = paramInt2;
                                        }
                                        bool2 = paramString4.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasUnitType.NONUNIT);
                                        bool3 = paramString2.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasOrientationType.UPPER);
                                        var i1;
                                        var i2;
                                        if ((paramDouble == 0)) {
                                            k = 1;
                                            for (i1 = paramInt2; i1 > 0; i1--) {
                                                i = 1;
                                                for (i2 = paramInt1; i2 > 0; i2--) {
                                                    paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] = 0.0;
                                                    i++;
                                                }
                                                k++;
                                            }
                                            return;
                                        }
                                        var i3;
                                        if (bool1) {
                                            if (paramString3.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE)) {
                                                if (bool3) {
                                                    k = 1;
                                                    for (i1 = paramInt2; i1 > 0; i1--) {
                                                        if ((paramDouble != 1.0)) {
                                                            i = 1;
                                                            for (i2 = paramInt1; i2 > 0; i2--) {
                                                                paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] = (paramDouble * paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)]);
                                                                i++;
                                                            }
                                                        }
                                                        m = paramInt1;
                                                        for (i2 = paramInt1; i2 > 0; i2--) {
                                                            if ((paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt6 + paramInt5)] != 0.0)) {
                                                                if (bool2) {
                                                                    paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt6 + paramInt5)] /= paramArrayOfDouble1[(m - 1 + (m - 1) * paramInt4 + paramInt3)];
                                                                }
                                                                i = 1;
                                                                for (i3 = m - 1; i3 > 0; i3--) {
                                                                    paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] -= paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt6 + paramInt5)] * paramArrayOfDouble1[(i - 1 + (m - 1) * paramInt4 + paramInt3)];
                                                                    i++;
                                                                }
                                                            }
                                                            m += -1;
                                                        }
                                                        k++;
                                                    }
                                                }
                                                else {
                                                    k = 1;
                                                    for (i1 = paramInt2; i1 > 0; i1--) {
                                                        if ((paramDouble != 1.0)) {
                                                            i = 1;
                                                            for (i2 = paramInt1; i2 > 0; i2--) {
                                                                paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] = (paramDouble * paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)]);
                                                                i++;
                                                            }
                                                        }
                                                        m = 1;
                                                        for (i2 = paramInt1; i2 > 0; i2--) {
                                                            if ((paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt6 + paramInt5)] != 0.0)) {
                                                                if (bool2) {
                                                                    paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt6 + paramInt5)] /= paramArrayOfDouble1[(m - 1 + (m - 1) * paramInt4 + paramInt3)];
                                                                }
                                                                i = m + 1;
                                                                for (i3 = paramInt1 - (m + 1) + 1; i3 > 0; i3--) {
                                                                    paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] -= paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt6 + paramInt5)] * paramArrayOfDouble1[(i - 1 + (m - 1) * paramInt4 + paramInt3)];
                                                                    i++;
                                                                }
                                                            }
                                                            m++;
                                                        }
                                                        k++;
                                                    }
                                                }
                                            }
                                            else {
                                                if (bool3) {
                                                    k = 1;
                                                    for (i1 = paramInt2; i1 > 0; i1--) {
                                                        i = 1;
                                                        for (i2 = paramInt1; i2 > 0; i2--) {
                                                            d = paramDouble * paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)];
                                                            m = 1;
                                                            for (i3 = i - 1; i3 > 0; i3--) {
                                                                d -= paramArrayOfDouble1[(m - 1 + (i - 1) * paramInt4 + paramInt3)] * paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt6 + paramInt5)];
                                                                m++;
                                                            }
                                                            if (bool2) {
                                                                d /= paramArrayOfDouble1[(i - 1 + (i - 1) * paramInt4 + paramInt3)];
                                                            }
                                                            paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] = d;
                                                            i++;
                                                        }
                                                        k++;
                                                    }
                                                }
                                                else {
                                                    k = 1;
                                                    for (i1 = paramInt2; i1 > 0; i1--) {
                                                        i = paramInt1;
                                                        for (i2 = paramInt1; i2 > 0; i2--) {
                                                            d = paramDouble * paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)];
                                                            m = i + 1;
                                                            for (i3 = paramInt1 - i; i3 > 0; i3--) {
                                                                d -= paramArrayOfDouble1[(m - 1 + (i - 1) * paramInt4 + paramInt3)] * paramArrayOfDouble2[(m - 1 + (k - 1) * paramInt6 + paramInt5)];
                                                                m++;
                                                            }
                                                            if (bool2) {
                                                                d /= paramArrayOfDouble1[(i - 1 + (i - 1) * paramInt4 + paramInt3)];
                                                            }
                                                            paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] = d;
                                                            i += -1;
                                                        }
                                                        k++;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (paramString3.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE)) {
                                                if (bool3) {
                                                    k = 1;
                                                    for (i1 = paramInt2; i1 > 0; i1--) {
                                                        if ((paramDouble != 1.0)) {
                                                            i = 1;
                                                            for (i2 = paramInt1; i2 > 0; i2--) {
                                                                paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] = (paramDouble * paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)]);
                                                                i++;
                                                            }
                                                        }
                                                        m = 1;
                                                        for (i2 = k - 1; i2 > 0; i2--) {
                                                            if ((paramArrayOfDouble1[(m - 1 + (k - 1) * paramInt4 + paramInt3)] != 0.0)) {
                                                                i = 1;
                                                                for (i3 = paramInt1; i3 > 0; i3--) {
                                                                    paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] -= paramArrayOfDouble1[(m - 1 + (k - 1) * paramInt4 + paramInt3)] * paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)];
                                                                    i++;
                                                                }
                                                            }
                                                            m++;
                                                        }
                                                        if (bool2) {
                                                            d = 1.0 / paramArrayOfDouble1[(k - 1 + (k - 1) * paramInt4 + paramInt3)];
                                                            i = 1;
                                                            for (i2 = paramInt1; i2 > 0; i2--) {
                                                                paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] = (d * paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)]);
                                                                i++;
                                                            }
                                                        }
                                                        k++;
                                                    }
                                                }
                                                else {
                                                    k = paramInt2;
                                                    for (i1 = paramInt2; i1 > 0; i1--) {
                                                        if ((paramDouble != 1.0)) {
                                                            i = 1;
                                                            for (i2 = paramInt1; i2 > 0; i2--) {
                                                                paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] = (paramDouble * paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)]);
                                                                i++;
                                                            }
                                                        }
                                                        m = k + 1;
                                                        for (i2 = paramInt2 - (k + 1) + 1; i2 > 0; i2--) {
                                                            if ((paramArrayOfDouble1[(m - 1 + (k - 1) * paramInt4 + paramInt3)] != 0.0)) {
                                                                i = 1;
                                                                for (i3 = paramInt1; i3 > 0; i3--) {
                                                                    paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] -= paramArrayOfDouble1[(m - 1 + (k - 1) * paramInt4 + paramInt3)] * paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)];
                                                                    i++;
                                                                }
                                                            }
                                                            m++;
                                                        }
                                                        if (bool2) {
                                                            d = 1.0 / paramArrayOfDouble1[(k - 1 + (k - 1) * paramInt4 + paramInt3)];
                                                            i = 1;
                                                            for (i2 = paramInt1; i2 > 0; i2--) {
                                                                paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] = (d * paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)]);
                                                                i++;
                                                            }
                                                        }
                                                        k += -1;
                                                    }
                                                }
                                            }
                                            else {
                                                if (bool3) {
                                                    m = paramInt2;
                                                    for (i1 = paramInt2; i1 > 0; i1--) {
                                                        if (bool2) {
                                                            d = 1.0 / paramArrayOfDouble1[(m - 1 + (m - 1) * paramInt4 + paramInt3)];
                                                            i = 1;
                                                            for (i2 = paramInt1; i2 > 0; i2--) {
                                                                paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)] = (d * paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)]);
                                                                i++;
                                                            }
                                                        }
                                                        k = 1;
                                                        for (i2 = m - 1; i2 > 0; i2--) {
                                                            if ((paramArrayOfDouble1[(k - 1 + (m - 1) * paramInt4 + paramInt3)] != 0.0)) {
                                                                d = paramArrayOfDouble1[(k - 1 + (m - 1) * paramInt4 + paramInt3)];
                                                                i = 1;
                                                                for (i3 = paramInt1; i3 > 0; i3--) {
                                                                    paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] -= d * paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)];
                                                                    i++;
                                                                }
                                                            }
                                                            k++;
                                                        }
                                                        if ((paramDouble != 1.0)) {
                                                            i = 1;
                                                            for (i2 = paramInt1; i2 > 0; i2--) {
                                                                paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)] = (paramDouble * paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)]);
                                                                i++;
                                                            }
                                                        }
                                                        m += -1;
                                                    }
                                                }
                                                else {
                                                    m = 1;
                                                    for (i1 = paramInt2; i1 > 0; i1--) {
                                                        if (bool2) {
                                                            d = 1.0 / paramArrayOfDouble1[(m - 1 + (m - 1) * paramInt4 + paramInt3)];
                                                            i = 1;
                                                            for (i2 = paramInt1; i2 > 0; i2--) {
                                                                paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)] = (d * paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)]);
                                                                i++;
                                                            }
                                                        }
                                                        k = m + 1;
                                                        for (i2 = paramInt2 - (m + 1) + 1; i2 > 0; i2--) {
                                                            if ((paramArrayOfDouble1[(k - 1 + (m - 1) * paramInt4 + paramInt3)] != 0.0)) {
                                                                d = paramArrayOfDouble1[(k - 1 + (m - 1) * paramInt4 + paramInt3)];
                                                                i = 1;
                                                                for (i3 = paramInt1; i3 > 0; i3--) {
                                                                    paramArrayOfDouble2[(i - 1 + (k - 1) * paramInt6 + paramInt5)] -= d * paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)];
                                                                    i++;
                                                                }
                                                            }
                                                            k++;
                                                        }
                                                        if ((paramDouble != 1.0)) {
                                                            i = 1;
                                                            for (i2 = paramInt1; i2 > 0; i2--) {
                                                                paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)] = (paramDouble * paramArrayOfDouble2[(i - 1 + (m - 1) * paramInt6 + paramInt5)]);
                                                                i++;
                                                            }
                                                        }
                                                        m++;
                                                    }
                                                }
                                            }
                                        }
                                    };
                                    JavaBlas.prototype.floorDiv = function (x, y) {
                                        return Math.floor(x / y);
                                    };
                                    return JavaBlas;
                                })();
                                impl.JavaBlas = JavaBlas;
                            })(impl = blas.impl || (blas.impl = {}));
                        })(blas = structure.blas || (structure.blas = {}));
                        var impl;
                        (function (impl) {
                            var Array1D = (function () {
                                function Array1D(p_size, p_offset, p_segmentIndex, p_segment, p_metaClass) {
                                    this._size = p_size;
                                    this._offset = p_offset;
                                    this._segmentIndex = p_segmentIndex;
                                    this._segment = p_segment;
                                    this._metaClass = p_metaClass;
                                }
                                Array1D.prototype.size = function () {
                                    return this._size;
                                };
                                Array1D.prototype.get = function (p_index) {
                                    return this._segment.getDoubleArrayElem(this._segmentIndex, this._offset + p_index, this._metaClass);
                                };
                                Array1D.prototype.set = function (p_index, p_value) {
                                    this._segment.setDoubleArrayElem(this._segmentIndex, this._offset + p_index, p_value, this._metaClass);
                                    return p_value;
                                };
                                Array1D.prototype.add = function (index, value) {
                                    return this.set(index, this.get(index) + value);
                                };
                                Array1D.prototype.addAll = function (value) {
                                    for (var i = 0; i < this._size; i++) {
                                        this.add(i, value);
                                    }
                                };
                                Array1D.prototype.setAll = function (value) {
                                };
                                Array1D.prototype.addElement = function (index, numElem) {
                                };
                                Array1D.prototype.clone = function () {
                                    return null;
                                };
                                Array1D.prototype.data = function () {
                                    return this._segment.getDoubleArray(this._segmentIndex, this._metaClass);
                                };
                                Array1D.prototype.setData = function (data) {
                                };
                                return Array1D;
                            })();
                            impl.Array1D = Array1D;
                            var Array2D = (function () {
                                function Array2D(p_nbRows, p_nbColumns, p_offset, p_segmentIndex, p_segment, p_metaClass) {
                                    this._nbRows = p_nbRows;
                                    this._nbColumns = p_nbColumns;
                                    this._offset = p_offset;
                                    this._segment = p_segment;
                                    this._segmentIndex = p_segmentIndex;
                                    this._metaClass = p_metaClass;
                                }
                                Array2D.prototype.rows = function () {
                                    return this._nbRows;
                                };
                                Array2D.prototype.columns = function () {
                                    return this._nbColumns;
                                };
                                Array2D.prototype.getIndex = function (p_rowIndex, p_columnIndex) {
                                    return this._offset + p_rowIndex + (this._nbRows * p_columnIndex);
                                };
                                Array2D.prototype.get = function (p_rowIndex, p_columnIndex) {
                                    return this._segment.getDoubleArrayElem(this._segmentIndex, this.getIndex(p_rowIndex, p_columnIndex), this._metaClass);
                                };
                                Array2D.prototype.set = function (p_rowIndex, p_columnIndex, value) {
                                    this._segment.setDoubleArrayElem(this._segmentIndex, this.getIndex(p_rowIndex, p_columnIndex), value, this._metaClass);
                                    return value;
                                };
                                Array2D.prototype.add = function (rowIndex, columnIndex, value) {
                                    return this.set(rowIndex, columnIndex, this.get(rowIndex, columnIndex) + value);
                                };
                                Array2D.prototype.setAll = function (value) {
                                    for (var i = 0; i < this._nbColumns * this._nbRows; i++) {
                                        this._segment.setDoubleArrayElem(this._segmentIndex, this._offset + i, value, this._metaClass);
                                    }
                                };
                                Array2D.prototype.addRow = function (rowindex, numRow) {
                                };
                                Array2D.prototype.addCol = function (colIndex, numCol) {
                                };
                                Array2D.prototype.clone = function () {
                                    var cloned = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(this._nbRows, this._nbColumns);
                                    cloned.setData(this.data());
                                    return cloned;
                                };
                                Array2D.prototype.data = function () {
                                    return this._segment.getDoubleArray(this._segmentIndex, this._metaClass);
                                };
                                Array2D.prototype.setData = function (p_data) {
                                    for (var i = 0; i < p_data.length; i++) {
                                        this.setAtIndex(i, p_data[i]);
                                    }
                                };
                                Array2D.prototype.getAtIndex = function (index) {
                                    return this._segment.getDoubleArrayElem(this._segmentIndex, this._offset + index, this._metaClass);
                                };
                                Array2D.prototype.setAtIndex = function (index, value) {
                                    this._segment.setDoubleArrayElem(this._segmentIndex, this._offset + index, value, this._metaClass);
                                    return value;
                                };
                                Array2D.prototype.addAtIndex = function (index, value) {
                                    return this.setAtIndex(index, this.getAtIndex(index) + value);
                                };
                                return Array2D;
                            })();
                            impl.Array2D = Array2D;
                            var NativeArray2D = (function () {
                                function NativeArray2D(p_nbRows, p_nbColumns) {
                                    this._nbRows = p_nbRows;
                                    this._nbColumns = p_nbColumns;
                                    this._back = new Float64Array(p_nbRows * p_nbColumns);
                                }
                                NativeArray2D.prototype.getIndex = function (p_rowIndex, p_columnIndex) {
                                    return p_rowIndex + (this._nbRows * p_columnIndex);
                                };
                                NativeArray2D.prototype.rows = function () {
                                    return this._nbRows;
                                };
                                NativeArray2D.prototype.columns = function () {
                                    return this._nbColumns;
                                };
                                NativeArray2D.prototype.get = function (p_rowIndex, p_columnIndex) {
                                    return this._back[this.getIndex(p_rowIndex, p_columnIndex)];
                                };
                                NativeArray2D.prototype.set = function (p_rowIndex, p_columnIndex, value) {
                                    this._back[this.getIndex(p_rowIndex, p_columnIndex)] = value;
                                    return value;
                                };
                                NativeArray2D.prototype.add = function (rowIndex, columnIndex, value) {
                                    return this.set(rowIndex, columnIndex, this.get(rowIndex, columnIndex) + value);
                                };
                                NativeArray2D.prototype.setAll = function (value) {
                                };
                                NativeArray2D.prototype.addRow = function (rowindex, numRow) {
                                };
                                NativeArray2D.prototype.addCol = function (colIndex, numCol) {
                                };
                                NativeArray2D.prototype.clone = function () {
                                    var newArr = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(this._nbRows, this._nbColumns);
                                    java.lang.System.arraycopy(this._back, 0, newArr._back, 0, this._nbColumns * this._nbRows);
                                    return newArr;
                                };
                                NativeArray2D.prototype.data = function () {
                                    return this._back;
                                };
                                NativeArray2D.prototype.setData = function (data) {
                                    this._back = data;
                                };
                                NativeArray2D.prototype.getAtIndex = function (index) {
                                    return this._back[index];
                                };
                                NativeArray2D.prototype.setAtIndex = function (index, value) {
                                    this._back[index] = value;
                                    return value;
                                };
                                NativeArray2D.prototype.addAtIndex = function (index, value) {
                                    this._back[index] += value;
                                    return this._back[index];
                                };
                                return NativeArray2D;
                            })();
                            impl.NativeArray2D = NativeArray2D;
                        })(impl = structure.impl || (structure.impl = {}));
                        var matrix;
                        (function (matrix) {
                            var MatrixOperations = (function () {
                                function MatrixOperations() {
                                }
                                MatrixOperations.leadingDimension = function (matA) {
                                    return Math.max(matA.columns(), matA.rows());
                                };
                                MatrixOperations.multiply = function (matA, matB, blas) {
                                    var matC = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(matA.rows(), matB.columns());
                                    blas.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, matC.rows(), matC.columns(), matA.columns(), 1.0, matA.data(), 0, matA.rows(), matB.data(), 0, matB.rows(), 0.0, matC.data(), 0, matC.rows());
                                    return matC;
                                };
                                MatrixOperations.multiplyTransposeAlpha = function (transA, transB, matA, matB, alpha, blas) {
                                    if (org.kevoree.modeling.util.maths.structure.matrix.MatrixOperations.testDimensionsAB(transA, transB, matA, matB)) {
                                        var k = 0;
                                        var dimC = new Int32Array(2);
                                        if (transA.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE)) {
                                            k = matA.columns();
                                            if (transB.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE)) {
                                                dimC[0] = matA.rows();
                                                dimC[1] = matB.columns();
                                            }
                                            else {
                                                dimC[0] = matA.rows();
                                                dimC[1] = matB.rows();
                                            }
                                        }
                                        else {
                                            k = matA.rows();
                                            if (transB.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE)) {
                                                dimC[0] = matA.columns();
                                                dimC[1] = matB.columns();
                                            }
                                            else {
                                                dimC[0] = matA.columns();
                                                dimC[1] = matB.rows();
                                            }
                                        }
                                        var matC = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(dimC[0], dimC[1]);
                                        blas.dgemm(transA, transB, matC.rows(), matC.columns(), k, alpha, matA.data(), 0, matA.rows(), matB.data(), 0, matB.rows(), 0, matC.data(), 0, matC.rows());
                                        return matC;
                                    }
                                    else {
                                        throw new Error("Dimensions mismatch between A,B and C");
                                    }
                                };
                                MatrixOperations.multiplyAlphaBetaResult = function (alpha, matA, matB, beta, matC, blas) {
                                    if (org.kevoree.modeling.util.maths.structure.matrix.MatrixOperations.testDimensionsABC(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, matA, matB, matC)) {
                                        blas.dgemm(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, matC.rows(), matC.columns(), matA.columns(), alpha, matA.data(), 0, matA.rows(), matB.data(), 0, matB.rows(), beta, matC.data(), 0, matC.rows());
                                    }
                                    else {
                                        throw new Error("Dimensions mismatch between A,B and C");
                                    }
                                };
                                MatrixOperations.multiplyTransposeAlphaBetaResult = function (transA, transB, alpha, matA, matB, beta, matC, blas) {
                                    if (org.kevoree.modeling.util.maths.structure.matrix.MatrixOperations.testDimensionsABC(transA, transB, matA, matB, matC)) {
                                        var k;
                                        if (transA.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE)) {
                                            k = matA.columns();
                                        }
                                        else {
                                            k = matA.rows();
                                        }
                                        blas.dgemm(transA, transB, matC.rows(), matC.columns(), k, alpha, matA.data(), 0, matA.rows(), matB.data(), 0, matB.rows(), beta, matC.data(), 0, matC.rows());
                                    }
                                    else {
                                        throw new Error("Dimensions mismatch between A,B and C");
                                    }
                                };
                                MatrixOperations.testDimensionsABC = function (transA, transB, matA, matB, matC) {
                                    if (transA.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE)) {
                                        if (transB.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE)) {
                                            return (matA.columns() == matB.rows() && matC.rows() == matA.rows() && matC.columns() == matB.columns());
                                        }
                                        else {
                                            return (matA.columns() == matB.columns() && matC.rows() == matA.rows() && matC.columns() == matB.rows());
                                        }
                                    }
                                    else {
                                        if (transB.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE)) {
                                            return (matA.rows() == matB.rows() && matC.rows() == matA.columns() && matC.columns() == matB.columns());
                                        }
                                        else {
                                            return (matA.rows() == matB.columns() && matC.rows() == matA.columns() && matC.columns() == matB.rows());
                                        }
                                    }
                                };
                                MatrixOperations.testDimensionsAB = function (transA, transB, matA, matB) {
                                    if (transA.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE)) {
                                        if (transB.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE)) {
                                            return (matA.columns() == matB.rows());
                                        }
                                        else {
                                            return (matA.columns() == matB.columns());
                                        }
                                    }
                                    else {
                                        if (transB.equals(org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE)) {
                                            return (matA.rows() == matB.rows());
                                        }
                                        else {
                                            return (matA.rows() == matB.columns());
                                        }
                                    }
                                };
                                MatrixOperations.initMatrice = function (matA, random) {
                                    var rand = new java.util.Random();
                                    var k = 0;
                                    for (var j = 0; j < matA.columns(); j++) {
                                        for (var i = 0; i < matA.rows(); i++) {
                                            if (random) {
                                                matA.set(i, j, rand.nextDouble() * 100 - 50);
                                            }
                                            else {
                                                matA.set(i, j, k);
                                            }
                                            k++;
                                        }
                                    }
                                };
                                MatrixOperations.random = function (rows, columns) {
                                    var res = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(rows, columns);
                                    var rand = new java.util.Random();
                                    for (var i = 0; i < rows * columns; i++) {
                                        res.setAtIndex(i, rand.nextDouble() * 100 - 50);
                                    }
                                    return res;
                                };
                                MatrixOperations.invert = function (mat, blas) {
                                    if (mat.rows() != mat.columns()) {
                                        return null;
                                    }
                                    var alg = new org.kevoree.modeling.util.maths.structure.matrix.solver.LU(mat.rows(), mat.columns());
                                    var result = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(mat.rows(), mat.columns());
                                    var A_temp = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(mat.rows(), mat.columns());
                                    java.lang.System.arraycopy(mat.data(), 0, A_temp.data(), 0, mat.columns() * mat.rows());
                                    var dlu = new org.kevoree.modeling.util.maths.structure.matrix.solver.LU(A_temp.rows(), A_temp.columns());
                                    if (dlu.invert(A_temp, blas)) {
                                        result.setData(A_temp.data());
                                        return result;
                                    }
                                    else {
                                        return null;
                                    }
                                };
                                MatrixOperations.invertInPlace = function (mat, blas) {
                                    if (mat.rows() != mat.columns()) {
                                        return false;
                                    }
                                    var alg = new org.kevoree.modeling.util.maths.structure.matrix.solver.LU(mat.rows(), mat.columns());
                                    var result = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(mat.rows(), mat.columns());
                                    var dlu = new org.kevoree.modeling.util.maths.structure.matrix.solver.LU(mat.rows(), mat.columns());
                                    return dlu.invert(mat, blas);
                                };
                                MatrixOperations.scale = function (alpha, matA) {
                                    if (alpha == 0) {
                                        matA.setAll(0);
                                        return;
                                    }
                                    for (var i = 0; i < matA.rows() * matA.columns(); i++) {
                                        matA.setAtIndex(i, alpha * matA.getAtIndex(i));
                                    }
                                };
                                MatrixOperations.transpose = function (matA) {
                                    var result = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(matA.columns(), matA.rows());
                                    if (matA.columns() == matA.rows()) {
                                        org.kevoree.modeling.util.maths.structure.matrix.MatrixOperations.transposeSquare(matA, result);
                                    }
                                    else {
                                        if (matA.columns() > MatrixOperations.TRANSPOSE_SWITCH && matA.rows() > MatrixOperations.TRANSPOSE_SWITCH) {
                                            org.kevoree.modeling.util.maths.structure.matrix.MatrixOperations.transposeBlock(matA, result);
                                        }
                                        else {
                                            org.kevoree.modeling.util.maths.structure.matrix.MatrixOperations.transposeStandard(matA, result);
                                        }
                                    }
                                    return result;
                                };
                                MatrixOperations.transposeSquare = function (matA, result) {
                                    var index = 1;
                                    var indexEnd = matA.columns();
                                    for (var i = 0; i < matA.rows(); i++) {
                                        var indexOther = (i + 1) * matA.columns() + i;
                                        var n = i * (matA.columns() + 1);
                                        result.setAtIndex(n, matA.getAtIndex(n));
                                        for (; index < indexEnd; index++) {
                                            result.setAtIndex(index, matA.getAtIndex(indexOther));
                                            result.setAtIndex(indexOther, matA.getAtIndex(index));
                                            indexOther += matA.columns();
                                        }
                                        index += i + 2;
                                        indexEnd += matA.columns();
                                    }
                                };
                                MatrixOperations.transposeStandard = function (matA, result) {
                                    var index = 0;
                                    for (var i = 0; i < result.columns(); i++) {
                                        var index2 = i;
                                        var end = index + result.rows();
                                        while (index < end) {
                                            result.setAtIndex(index++, matA.getAtIndex(index2));
                                            index2 += matA.rows();
                                        }
                                    }
                                };
                                MatrixOperations.transposeBlock = function (matA, result) {
                                    for (var j = 0; j < matA.columns(); j += MatrixOperations.BLOCK_WIDTH) {
                                        var blockWidth = Math.min(MatrixOperations.BLOCK_WIDTH, matA.columns() - j);
                                        var indexSrc = j * matA.rows();
                                        var indexDst = j;
                                        for (var i = 0; i < matA.rows(); i += MatrixOperations.BLOCK_WIDTH) {
                                            var blockHeight = Math.min(MatrixOperations.BLOCK_WIDTH, matA.rows() - i);
                                            var indexSrcEnd = indexSrc + blockHeight;
                                            for (; indexSrc < indexSrcEnd; indexSrc++) {
                                                var colSrc = indexSrc;
                                                var colDst = indexDst;
                                                var end = colDst + blockWidth;
                                                for (; colDst < end; colDst++) {
                                                    result.setAtIndex(colDst, matA.getAtIndex(colSrc));
                                                    colSrc += matA.rows();
                                                }
                                                indexDst += result.rows();
                                            }
                                        }
                                    }
                                };
                                MatrixOperations.createIdentity = function (width) {
                                    var ret = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(width, width);
                                    ret.setAll(0);
                                    for (var i = 0; i < width; i++) {
                                        ret.set(i, i, 1);
                                    }
                                    return ret;
                                };
                                MatrixOperations.solve = function (matA, matB, workInPlace, transB, blas) {
                                    if (!workInPlace) {
                                        var A_temp = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(matA.rows(), matA.columns());
                                        java.lang.System.arraycopy(matA.data(), 0, A_temp.data(), 0, matA.columns() * matA.rows());
                                        var dlu = new org.kevoree.modeling.util.maths.structure.matrix.solver.LU(A_temp.rows(), A_temp.columns());
                                        dlu.factor(A_temp, blas);
                                        if (dlu.isSingular()) {
                                            return null;
                                        }
                                        var B_temp = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(matB.rows(), matB.columns());
                                        java.lang.System.arraycopy(matB.data(), 0, B_temp.data(), 0, matB.columns() * matB.rows());
                                        dlu.transSolve(B_temp, transB, blas);
                                        return B_temp;
                                    }
                                    else {
                                        var dlu = new org.kevoree.modeling.util.maths.structure.matrix.solver.LU(matA.rows(), matA.columns());
                                        dlu.factor(matA, blas);
                                        if (dlu.isSingular()) {
                                            return null;
                                        }
                                        dlu.transSolve(matB, transB, blas);
                                        return matB;
                                    }
                                };
                                MatrixOperations.compareMatrix = function (matA, matB) {
                                    var err = 0;
                                    for (var i = 0; i < matA.rows(); i++) {
                                        for (var j = 0; j < matA.columns(); j++) {
                                            if (err < Math.abs(matA.get(i, j) - matB.get(i, j))) {
                                                err = Math.abs(matA.get(i, j) - matB.get(i, j));
                                            }
                                        }
                                    }
                                    return err;
                                };
                                MatrixOperations.BLOCK_WIDTH = 60;
                                MatrixOperations.TRANSPOSE_SWITCH = 375;
                                return MatrixOperations;
                            })();
                            matrix.MatrixOperations = MatrixOperations;
                            var solver;
                            (function (solver) {
                                var LU = (function () {
                                    function LU(m, n) {
                                        this.LU = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(m, n);
                                        this.piv = new Int32Array(Math.min(m, n));
                                    }
                                    LU.prototype.getLU = function () {
                                        return this.LU;
                                    };
                                    LU.factorize = function (A, blas) {
                                        return new org.kevoree.modeling.util.maths.structure.matrix.solver.LU(A.rows(), A.columns()).factor(A, blas);
                                    };
                                    LU.prototype.factor = function (A, blas) {
                                        this.singular = false;
                                        var info = new Int32Array(1);
                                        info[0] = 0;
                                        blas.dgetrf(A.rows(), A.columns(), A.data(), 0, A.rows(), this.piv, 0, info);
                                        if (info[0] > 0) {
                                            this.singular = true;
                                        }
                                        else {
                                            if (info[0] < 0) {
                                                throw new Error();
                                            }
                                        }
                                        this.LU.setData(A.data());
                                        return this;
                                    };
                                    LU.prototype.getLower = function () {
                                        var numRows = this.LU.rows();
                                        var numCols = this.LU.rows() < this.LU.columns() ? this.LU.rows() : this.LU.columns();
                                        var lower = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(numRows, numCols);
                                        for (var i = 0; i < numCols; i++) {
                                            lower.set(i, i, 1.0);
                                            for (var j = 0; j < i; j++) {
                                                lower.set(i, j, this.LU.get(i, j));
                                            }
                                        }
                                        if (numRows > numCols) {
                                            for (var i = numCols; i < numRows; i++) {
                                                for (var j = 0; j < numCols; j++) {
                                                    lower.set(i, j, this.LU.get(i, j));
                                                }
                                            }
                                        }
                                        return lower;
                                    };
                                    LU.prototype.getUpper = function () {
                                        var numRows = this.LU.rows() < this.LU.columns() ? this.LU.rows() : this.LU.columns();
                                        var numCols = this.LU.columns();
                                        var upper = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(numRows, numCols);
                                        for (var i = 0; i < numRows; i++) {
                                            for (var j = i; j < numCols; j++) {
                                                upper.set(i, j, this.LU.get(i, j));
                                            }
                                        }
                                        return upper;
                                    };
                                    LU.prototype.getPivots = function () {
                                        return this.piv;
                                    };
                                    LU.prototype.isSingular = function () {
                                        return this.singular;
                                    };
                                    LU.prototype.solve = function (B, blas) {
                                        return this.transSolve(B, org.kevoree.modeling.util.maths.structure.blas.KBlasTransposeType.NOTRANSPOSE, blas);
                                    };
                                    LU.prototype.transSolve = function (B, trans, blas) {
                                        if (B.rows() != this.LU.rows()) {
                                            throw new Error("B.numRows() != LU.numRows()");
                                        }
                                        var info = new Int32Array(1);
                                        blas.dgetrs(trans, this.LU.rows(), B.columns(), this.LU.data(), 0, this.LU.rows(), this.piv, 0, B.data(), 0, this.LU.rows(), info);
                                        if (info[0] < 0) {
                                            throw new Error();
                                        }
                                        return B;
                                    };
                                    LU.prototype.invert = function (A, blas) {
                                        var info = new Int32Array(1);
                                        info[0] = 0;
                                        blas.dgetrf(A.rows(), A.columns(), A.data(), 0, A.rows(), this.piv, 0, info);
                                        if (info[0] > 0) {
                                            this.singular = true;
                                            return false;
                                        }
                                        else {
                                            if (info[0] < 0) {
                                                throw new Error();
                                            }
                                        }
                                        var lwork = A.rows() * A.rows();
                                        var work = new Float64Array(lwork);
                                        for (var i = 0; i < lwork; i++) {
                                            work[i] = 0;
                                        }
                                        blas.dgetri(A.rows(), A.data(), 0, A.rows(), this.piv, 0, work, 0, lwork, info);
                                        if (info[0] != 0) {
                                            return false;
                                        }
                                        else {
                                            return true;
                                        }
                                    };
                                    return LU;
                                })();
                                solver.LU = LU;
                                var QR = (function () {
                                    function QR(rows, columns) {
                                        if (columns > rows) {
                                            throw new Error("n > m");
                                        }
                                        this.m = rows;
                                        this.n = columns;
                                        this.k = Math.min(this.m, this.n);
                                        this.tau = new Float64Array(this.k);
                                        this.R = new org.kevoree.modeling.util.maths.structure.impl.NativeArray2D(this.m, this.n);
                                    }
                                    QR.factorize = function (A, workInPlace, blas) {
                                        return new org.kevoree.modeling.util.maths.structure.matrix.solver.QR(A.rows(), A.columns()).factor(A, workInPlace, blas);
                                    };
                                    QR.prototype.factor = function (matA, workInPlace, blas) {
                                        var A;
                                        if (!workInPlace) {
                                            A = matA.clone();
                                        }
                                        else {
                                            A = matA;
                                        }
                                        var lwork;
                                        this.work = new Float64Array(1);
                                        var info = new Int32Array(1);
                                        info[0] = 0;
                                        blas.dgeqrf(this.m, this.n, new Float64Array(0), 0, this.m, new Float64Array(0), 0, this.work, 0, -1, info);
                                        if (info[0] != 0) {
                                            lwork = this.n;
                                        }
                                        else {
                                            lwork = this.work[0];
                                        }
                                        lwork = Math.max(1, lwork);
                                        this.work = new Float64Array(lwork);
                                        this.workGen = new Float64Array(1);
                                        var info = new Int32Array(1);
                                        info[0] = 0;
                                        blas.dorgqr(this.m, this.n, this.k, new Float64Array(0), 0, this.m, new Float64Array(0), 0, this.workGen, 0, -1, info);
                                        if (info[0] != 0) {
                                            lwork = this.n;
                                        }
                                        else {
                                            lwork = this.workGen[0];
                                        }
                                        lwork = Math.max(1, lwork);
                                        this.workGen = new Float64Array(lwork);
                                        var info = new Int32Array(1);
                                        info[0] = 0;
                                        blas.dgeqrf(this.m, this.n, A.data(), 0, this.m, this.tau, 0, this.work, 0, this.work.length, info);
                                        if (info[0] < 0) {
                                            throw new Error("" + info[0]);
                                        }
                                        for (var col = 0; col < A.columns(); col++) {
                                            for (var row = 0; row <= col; row++) {
                                                this.R.set(row, col, A.get(row, col));
                                            }
                                        }
                                        info[0] = 0;
                                        blas.dorgqr(this.m, this.n, this.k, A.data(), 0, this.m, this.tau, 0, this.workGen, 0, this.workGen.length, info);
                                        if (info[0] < 0) {
                                            throw new Error();
                                        }
                                        this.Q = A;
                                        return this;
                                    };
                                    QR.prototype.getR = function () {
                                        return this.R;
                                    };
                                    QR.prototype.getQ = function () {
                                        return this.Q;
                                    };
                                    return QR;
                                })();
                                solver.QR = QR;
                            })(solver = matrix.solver || (matrix.solver = {}));
                        })(matrix = structure.matrix || (structure.matrix = {}));
                    })(structure = maths.structure || (maths.structure = {}));
                })(maths = util.maths || (util.maths = {}));
            })(util = modeling.util || (modeling.util = {}));
        })(modeling = kevoree.modeling || (kevoree.modeling = {}));
    })(kevoree = org.kevoree || (org.kevoree = {}));
})(org || (org = {}));
var model;
(function (model) {
    var ModelModel = (function (_super) {
        __extends(ModelModel, _super);
        function ModelModel(p_manager) {
            _super.call(this, p_manager);
            this._metaModel = new org.kevoree.modeling.meta.impl.MetaModel("Model");
            var tempMetaClasses = new Array();
            tempMetaClasses[1] = model.meta.MetaBinarySearchTree.getInstance();
            tempMetaClasses[2] = model.meta.MetaCustomer.getInstance();
            tempMetaClasses[0] = model.meta.MetaNode.getInstance();
            var tempEnums = new Array();
            this._metaModel.init(tempMetaClasses, tempEnums);
        }
        ModelModel.prototype.internalCreateUniverse = function (key) {
            return new model.ModelUniverse(key, this._manager);
        };
        ModelModel.prototype.metaModel = function () {
            return this._metaModel;
        };
        ModelModel.prototype.internalCreateObject = function (universe, time, uuid, p_clazz, previousUniverse, previousTime) {
            if (p_clazz == null) {
                return null;
            }
            switch (p_clazz.index()) {
                case 1:
                    return new model.impl.BinarySearchTreeImpl(universe, time, uuid, p_clazz, this._manager, previousUniverse, previousTime);
                case 2:
                    return new model.impl.CustomerImpl(universe, time, uuid, p_clazz, this._manager, previousUniverse, previousTime);
                case 0:
                    return new model.impl.NodeImpl(universe, time, uuid, p_clazz, this._manager, previousUniverse, previousTime);
                default:
                    return new org.kevoree.modeling.meta.impl.GenericObject(universe, time, uuid, p_clazz, this._manager, previousUniverse, previousTime);
            }
        };
        ModelModel.prototype.createBinarySearchTree = function (universe, time) {
            return this.create(model.meta.MetaBinarySearchTree.getInstance(), universe, time);
        };
        ModelModel.prototype.createCustomer = function (universe, time) {
            return this.create(model.meta.MetaCustomer.getInstance(), universe, time);
        };
        ModelModel.prototype.createNode = function (universe, time) {
            return this.create(model.meta.MetaNode.getInstance(), universe, time);
        };
        return ModelModel;
    })(org.kevoree.modeling.abs.AbstractKModel);
    model.ModelModel = ModelModel;
    var ModelUniverse = (function (_super) {
        __extends(ModelUniverse, _super);
        function ModelUniverse(p_key, p_manager) {
            _super.call(this, p_key, p_manager);
        }
        ModelUniverse.prototype.internal_create = function (timePoint) {
            return new model.impl.ModelViewImpl(this._universe, timePoint, this._manager);
        };
        return ModelUniverse;
    })(org.kevoree.modeling.abs.AbstractKUniverse);
    model.ModelUniverse = ModelUniverse;
    var impl;
    (function (impl) {
        var BinarySearchTreeImpl = (function (_super) {
            __extends(BinarySearchTreeImpl, _super);
            function BinarySearchTreeImpl(p_universe, p_time, p_uuid, p_metaClass, p_manager, p_previousUniverse, p_previoustTime) {
                _super.call(this, p_universe, p_time, p_uuid, p_metaClass, p_manager, p_previousUniverse, p_previoustTime);
            }
            BinarySearchTreeImpl.prototype.addRoot = function (p_obj) {
                this.add(model.meta.MetaBinarySearchTree.REL_ROOT, p_obj);
                return this;
            };
            BinarySearchTreeImpl.prototype.removeRoot = function (p_obj) {
                this.remove(model.meta.MetaBinarySearchTree.REL_ROOT, p_obj);
                return this;
            };
            BinarySearchTreeImpl.prototype.getRoot = function (cb) {
                if (cb == null) {
                    return;
                }
                this.getRelation(model.meta.MetaBinarySearchTree.REL_ROOT, function (kObjects) {
                    var casted = new Array();
                    for (var i = 0; i < kObjects.length; i++) {
                        casted[i] = kObjects[i];
                    }
                    cb(casted);
                });
            };
            BinarySearchTreeImpl.prototype.sizeOfRoot = function () {
                return this.size(model.meta.MetaBinarySearchTree.REL_ROOT);
            };
            return BinarySearchTreeImpl;
        })(org.kevoree.modeling.abs.AbstractKObject);
        impl.BinarySearchTreeImpl = BinarySearchTreeImpl;
        var CustomerImpl = (function (_super) {
            __extends(CustomerImpl, _super);
            function CustomerImpl(p_universe, p_time, p_uuid, p_metaClass, p_manager, p_previousUniverse, p_previoustTime) {
                _super.call(this, p_universe, p_time, p_uuid, p_metaClass, p_manager, p_previousUniverse, p_previoustTime);
            }
            CustomerImpl.prototype.getPassword = function () {
                return this.get(model.meta.MetaCustomer.ATT_PASSWORD);
            };
            CustomerImpl.prototype.setPassword = function (p_obj) {
                this.set(model.meta.MetaCustomer.ATT_PASSWORD, p_obj);
                return this;
            };
            CustomerImpl.prototype.getBalance = function () {
                return this.get(model.meta.MetaCustomer.ATT_BALANCE);
            };
            CustomerImpl.prototype.setBalance = function (p_obj) {
                this.set(model.meta.MetaCustomer.ATT_BALANCE, p_obj);
                return this;
            };
            CustomerImpl.prototype.getCardnumber = function () {
                return this.get(model.meta.MetaCustomer.ATT_CARDNUMBER);
            };
            CustomerImpl.prototype.setCardnumber = function (p_obj) {
                this.set(model.meta.MetaCustomer.ATT_CARDNUMBER, p_obj);
                return this;
            };
            CustomerImpl.prototype.getEmail = function () {
                return this.get(model.meta.MetaCustomer.ATT_EMAIL);
            };
            CustomerImpl.prototype.setEmail = function (p_obj) {
                this.set(model.meta.MetaCustomer.ATT_EMAIL, p_obj);
                return this;
            };
            CustomerImpl.prototype.getUsername = function () {
                return this.get(model.meta.MetaCustomer.ATT_USERNAME);
            };
            CustomerImpl.prototype.setUsername = function (p_obj) {
                this.set(model.meta.MetaCustomer.ATT_USERNAME, p_obj);
                return this;
            };
            return CustomerImpl;
        })(org.kevoree.modeling.abs.AbstractKObject);
        impl.CustomerImpl = CustomerImpl;
        var ModelViewImpl = (function (_super) {
            __extends(ModelViewImpl, _super);
            function ModelViewImpl(p_universe, _time, p_manager) {
                _super.call(this, p_universe, _time, p_manager);
            }
            ModelViewImpl.prototype.createBinarySearchTree = function () {
                return this.create(model.meta.MetaBinarySearchTree.getInstance());
            };
            ModelViewImpl.prototype.createCustomer = function () {
                return this.create(model.meta.MetaCustomer.getInstance());
            };
            ModelViewImpl.prototype.createNode = function () {
                return this.create(model.meta.MetaNode.getInstance());
            };
            return ModelViewImpl;
        })(org.kevoree.modeling.abs.AbstractKView);
        impl.ModelViewImpl = ModelViewImpl;
        var NodeImpl = (function (_super) {
            __extends(NodeImpl, _super);
            function NodeImpl(p_universe, p_time, p_uuid, p_metaClass, p_manager, p_previousUniverse, p_previoustTime) {
                _super.call(this, p_universe, p_time, p_uuid, p_metaClass, p_manager, p_previousUniverse, p_previoustTime);
            }
            NodeImpl.prototype.getCypher = function () {
                return this.get(model.meta.MetaNode.ATT_CYPHER);
            };
            NodeImpl.prototype.setCypher = function (p_obj) {
                this.set(model.meta.MetaNode.ATT_CYPHER, p_obj);
                return this;
            };
            NodeImpl.prototype.getPlain = function () {
                return this.get(model.meta.MetaNode.ATT_PLAIN);
            };
            NodeImpl.prototype.setPlain = function (p_obj) {
                this.set(model.meta.MetaNode.ATT_PLAIN, p_obj);
                return this;
            };
            NodeImpl.prototype.addLeft = function (p_obj) {
                this.add(model.meta.MetaNode.REL_LEFT, p_obj);
                return this;
            };
            NodeImpl.prototype.removeLeft = function (p_obj) {
                this.remove(model.meta.MetaNode.REL_LEFT, p_obj);
                return this;
            };
            NodeImpl.prototype.getLeft = function (cb) {
                if (cb == null) {
                    return;
                }
                this.getRelation(model.meta.MetaNode.REL_LEFT, function (kObjects) {
                    var casted = new Array();
                    for (var i = 0; i < kObjects.length; i++) {
                        casted[i] = kObjects[i];
                    }
                    cb(casted);
                });
            };
            NodeImpl.prototype.sizeOfLeft = function () {
                return this.size(model.meta.MetaNode.REL_LEFT);
            };
            NodeImpl.prototype.addRight = function (p_obj) {
                this.add(model.meta.MetaNode.REL_RIGHT, p_obj);
                return this;
            };
            NodeImpl.prototype.removeRight = function (p_obj) {
                this.remove(model.meta.MetaNode.REL_RIGHT, p_obj);
                return this;
            };
            NodeImpl.prototype.getRight = function (cb) {
                if (cb == null) {
                    return;
                }
                this.getRelation(model.meta.MetaNode.REL_RIGHT, function (kObjects) {
                    var casted = new Array();
                    for (var i = 0; i < kObjects.length; i++) {
                        casted[i] = kObjects[i];
                    }
                    cb(casted);
                });
            };
            NodeImpl.prototype.sizeOfRight = function () {
                return this.size(model.meta.MetaNode.REL_RIGHT);
            };
            return NodeImpl;
        })(org.kevoree.modeling.abs.AbstractKObject);
        impl.NodeImpl = NodeImpl;
    })(impl = model.impl || (model.impl = {}));
    var meta;
    (function (meta) {
        var MetaBinarySearchTree = (function (_super) {
            __extends(MetaBinarySearchTree, _super);
            function MetaBinarySearchTree() {
                _super.call(this, "model.BinarySearchTree", 1, null, new Int32Array([]));
                var temp_all = new Array();
                temp_all[0] = MetaBinarySearchTree.REL_ROOT;
                this.init(temp_all);
            }
            MetaBinarySearchTree.getInstance = function () {
                if (MetaBinarySearchTree.INSTANCE == null) {
                    MetaBinarySearchTree.INSTANCE = new model.meta.MetaBinarySearchTree();
                }
                return MetaBinarySearchTree.INSTANCE;
            };
            MetaBinarySearchTree.INSTANCE = null;
            MetaBinarySearchTree.REL_ROOT = new org.kevoree.modeling.meta.impl.MetaRelation("root", 0, true, 0, "op_BinarySearchTree_root", 1, -1);
            return MetaBinarySearchTree;
        })(org.kevoree.modeling.meta.impl.MetaClass);
        meta.MetaBinarySearchTree = MetaBinarySearchTree;
        var MetaCustomer = (function (_super) {
            __extends(MetaCustomer, _super);
            function MetaCustomer() {
                _super.call(this, "model.Customer", 2, null, new Int32Array([]));
                var temp_all = new Array();
                temp_all[0] = MetaCustomer.ATT_PASSWORD;
                temp_all[1] = MetaCustomer.ATT_BALANCE;
                temp_all[2] = MetaCustomer.ATT_CARDNUMBER;
                temp_all[3] = MetaCustomer.ATT_EMAIL;
                temp_all[4] = MetaCustomer.ATT_USERNAME;
                this.init(temp_all);
            }
            MetaCustomer.getInstance = function () {
                if (MetaCustomer.INSTANCE == null) {
                    MetaCustomer.INSTANCE = new model.meta.MetaCustomer();
                }
                return MetaCustomer.INSTANCE;
            };
            MetaCustomer.INSTANCE = null;
            MetaCustomer.ATT_PASSWORD = new org.kevoree.modeling.meta.impl.MetaAttribute("password", 0, 0, false, -2, org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation.instance());
            MetaCustomer.ATT_BALANCE = new org.kevoree.modeling.meta.impl.MetaAttribute("balance", 1, 0, false, -2, org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation.instance());
            MetaCustomer.ATT_CARDNUMBER = new org.kevoree.modeling.meta.impl.MetaAttribute("cardnumber", 2, 0, false, -2, org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation.instance());
            MetaCustomer.ATT_EMAIL = new org.kevoree.modeling.meta.impl.MetaAttribute("email", 3, 0, false, -2, org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation.instance());
            MetaCustomer.ATT_USERNAME = new org.kevoree.modeling.meta.impl.MetaAttribute("username", 4, 0, false, -2, org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation.instance());
            return MetaCustomer;
        })(org.kevoree.modeling.meta.impl.MetaClass);
        meta.MetaCustomer = MetaCustomer;
        var MetaNode = (function (_super) {
            __extends(MetaNode, _super);
            function MetaNode() {
                _super.call(this, "model.Node", 0, null, new Int32Array([]));
                var temp_all = new Array();
                temp_all[0] = MetaNode.ATT_CYPHER;
                temp_all[1] = MetaNode.ATT_PLAIN;
                temp_all[2] = MetaNode.REL_LEFT;
                temp_all[3] = MetaNode.REL_OP_BINARYSEARCHTREE_ROOT;
                temp_all[4] = MetaNode.REL_RIGHT;
                temp_all[5] = MetaNode.REL_OP_NODE_LEFT;
                temp_all[6] = MetaNode.REL_OP_NODE_RIGHT;
                this.init(temp_all);
            }
            MetaNode.getInstance = function () {
                if (MetaNode.INSTANCE == null) {
                    MetaNode.INSTANCE = new model.meta.MetaNode();
                }
                return MetaNode.INSTANCE;
            };
            MetaNode.INSTANCE = null;
            MetaNode.ATT_CYPHER = new org.kevoree.modeling.meta.impl.MetaAttribute("cypher", 0, 0, false, -2, org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation.instance());
            MetaNode.ATT_PLAIN = new org.kevoree.modeling.meta.impl.MetaAttribute("plain", 1, 0, false, -2, org.kevoree.modeling.extrapolation.impl.DiscreteExtrapolation.instance());
            MetaNode.REL_LEFT = new org.kevoree.modeling.meta.impl.MetaRelation("left", 2, true, 0, "op_Node_left", 0, -1);
            MetaNode.REL_OP_BINARYSEARCHTREE_ROOT = new org.kevoree.modeling.meta.impl.MetaRelation("op_BinarySearchTree_root", 3, false, 1, "root", 0, -1);
            MetaNode.REL_RIGHT = new org.kevoree.modeling.meta.impl.MetaRelation("right", 4, true, 0, "op_Node_right", 0, -1);
            MetaNode.REL_OP_NODE_LEFT = new org.kevoree.modeling.meta.impl.MetaRelation("op_Node_left", 5, false, 0, "left", 0, -1);
            MetaNode.REL_OP_NODE_RIGHT = new org.kevoree.modeling.meta.impl.MetaRelation("op_Node_right", 6, false, 0, "right", 0, -1);
            return MetaNode;
        })(org.kevoree.modeling.meta.impl.MetaClass);
        meta.MetaNode = MetaNode;
    })(meta = model.meta || (model.meta = {}));
})(model || (model = {}));
